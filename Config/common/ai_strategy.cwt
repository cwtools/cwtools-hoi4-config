types = {
	type[ai_strategy] = {
		path = "game/common/ai_strategy"
		path_strict = yes
	}
	type[ai_strategy_plan] = {
		path = "game/common/ai_strategy_plans"
	}
}

ai_strategy = {
	## cardinality = 0..1
	allowed = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	target_array = value[array]
	## cardinality = 0..1
	target_array = variable_field
	## cardinality = 0..1
	targets = {
		## cardinality = ~1..inf
		scope[country]
	}
	## cardinality = 0..1
	enable_reverse = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	enable = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	abort = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	abort_when_not_enabled = bool
	## cardinality = 0..1
	reversed = bool
	alias_name[ai_strategy_rule] = alias_match_left[ai_strategy_rule]
}

ai_strategy_plan = {
	## cardinality = 0..1
	name = scalar
	## cardinality = 0..1
	desc = localisation

	## cardinality = 0..1
	allowed = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	enable = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	abort = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	ai_national_focuses = {
		## cardinality = 0..inf
		<focus>
		## cardinality = 0..inf
		<shared_focus>
	}

	## cardinality = 0..1
	focus_factors = {
		## cardinality = 0..inf
		<focus> = float
		## cardinality = 0..inf
		<shared_focus> = float
	}

	## cardinality = 0..1
	research = {
		## cardinality = ~1..inf
		enum[tech_category] = float
	}

	## cardinality = 0..1
	ideas = {
		## cardinality = 0..inf
		enum[idea_name] = int

		## cardinality = 0..inf
		value[advisor_token] = int
	}

	## cardinality = 0..1
	traits = {
		## cardinality = ~1..inf
		<country_leader_trait> = int
	}

	alias_name[ai_strategy_rule] = alias_match_left[ai_strategy_rule]

	### Keep small, as it is used as a factor for some things (such as research needs). Recommended around 1.0. Useful for relation between plans.
	## cardinality = 0..1
	weight = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
}

alias[ai_strategy_rule:ai_strategy] = {
	type = enum[ai_role_strats]
	id = value[ai_template_roles]
	id = value[ai_equipment_roles]
	value = int
}

alias[ai_strategy_rule:ai_strategy] = {
	type = enum[unit_strats]
	id = <unit>
	id = enum[equipment_category]
	id = value[ai_template_roles]
	id = value[ai_equipment_roles]
	value = int
}

alias[ai_strategy_rule:ai_strategy] = {
	type = equipment_production_min_factories
	id = enum[equipment_category]
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = equipment_production_min_factories_archetype
	id = <equipment.archetype_equip>
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[equipment_strats]
	id = <equipment>
	id = enum[allowed_ai_type_planes]
	id = enum[equipment_category]
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[pp_strats]
	id = enum[pp_targets]
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = land_xp_spend_priority
	id = enum[ai_xp_targets]
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = air_xp_spend_priority
	id = enum[ai_xp_targets]
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = navy_xp_spend_priority
	id = enum[ai_xp_targets]
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = area_priority
	id = <ai_area>
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[ai_diplo_strats]
	id = enum[country_tags]
	id = scope[country]
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[ai_diplo_strats]
	target = <ai_area>
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = recruit_scientist
	id = <specialization>
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = dont_join_wars_with
	id = enum[country_tags]
	id = scope[country]
	## cardinality = 0..1
	target_country = enum[country_tags]
	## cardinality = 0..1
	target_country = scope[country]
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[strat_region_strats]
	id = <strategic_region>
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[strat_region_strats_without_value]
	id = <strategic_region>
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[no_id_strats]
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[state_strats]
	target = <state>
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[state_strats]
	id = <state>
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[state_strats_with_id]
	id = <building>
	## cardinality = 0..1
	target = int
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[diplo_action_strats]
	id = scope[country]
	id = enum[country_tags]
	target = enum[diplomatic_relations]
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[naval_mission_strats]
	id = enum[naval_missions]
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[building_strats]
	id = <building>
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[research_strats]
	id = <technology>
	id = int
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = scorched_earth_prio
	id = scope[country]
	## cardinality = 0..1
	states = {
		## cardinality = ~1..inf
		int
	}
}
alias[ai_strategy_rule:ai_strategy] = {
	type = put_unit_buffers
	ratio = float[0..1]
	## cardinality = 0..1
	order_id = int
	## cardinality = 0..1
	states = {
		## cardinality = ~1..inf
		int
	}
	## cardinality = 0..inf
	area = <ai_area>
	## cardinality = 0..inf
	subtract_invasions_from_need = bool
	## cardinality = 0..inf
	subtract_fronts_from_need = bool
}
alias[ai_strategy_rule:ai_strategy] = {
	type = front_control
	## cardinality = 0..inf
	tag = scope[country]
	## cardinality = 0..inf
	state = int
	## cardinality = 0..inf
	area = <ai_area>
	## cardinality = 0..inf
	strategic_region = <strategic_region>
	## cardinality = 0..1
	country_trigger = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	## replace_scope = { this = state from = country fromfrom = country }
	state_trigger = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	ratio = float[0..1]
	## cardinality = 0..1
	priority = int
	## cardinality = 0..1
	ordertype = enum[ordertypes]
	## cardinality = 0..1
	execution_type = enum[execution_types]
	## cardinality = 0..1
	execute_order = bool
	## cardinality = 0..1
	manual_attack = bool
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[unit_requests]
	## cardinality = 0..inf
	tag = scope[country]
	## cardinality = 0..inf
	state = int
	## cardinality = 0..inf
	strategic_region = <strategic_region>
	## cardinality = 0..inf
	area = <ai_area>
	## cardinality = 0..1
	country_trigger = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	## replace_scope = { this = state from = country fromfrom = country }
	state_trigger = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = intelligence_agency_branch_desire_factor
	id = enum[intel_branches]
	value = int
}
alias[ai_strategy_rule:ai_strategy] = {
	type = asking_foreign_garrison
	value = int
	## cardinality = 0..1
	id = scope[country]
}
alias[ai_strategy_rule:ai_strategy] = {
	type = operative_mission
	mission = enum[operative_missions]
	value = int
	## cardinality = 0..1
	mission_target = scope[country]
	## cardinality = 0..inf
	state = int
	## cardinality = 0..1
	priority = int
	## cardinality = 0..1
	num_operatives = int[1..inf]
}
alias[ai_strategy_rule:ai_strategy] = {
	type = operative_operation
	operation = <operation>
	operation = variable_field
	# TODO
	# operation = token:operation?
	value = int
	operation_target = scope[country]
	operation_target = variable_field
}
alias[ai_strategy_rule:ai_strategy] = {
	type = enum[market_seller_strats]
	## cardinality = 0..1
	equipment_type = <equipment>
	## cardinality = 0..1
	seller = scope[country]
	## cardinality = 0..1
	seller = enum[country_tags]
	value = int
}

alias[ai_strategy_rule:ai_strategy] = {
	type = force_concentration_front_factor
	### Target a specific country. Can specify multiple.
	## cardinality = 0..inf
	tag = scope[country]
	### Target a state. Can specify multiple.
	## cardinality = 0..inf	
	state = <state>		
	### Target a strategic region. Can specify multiple.
	## cardinality = 0..inf
	strategic_region = <strategic_region>
	### Target a specific ai area. Can specify multiple.
	## cardinality = 0..inf
	area = <ai_area>
	### Trigger to check against a specific country. Scope is enemy country, FROM scope is our country.
	## cardinality = 0..1
	## replace_scope = { this = country root = country from = country }
	country_trigger = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}
	### # Trigger to check against a state. Scope is state. FROM scope is enemy country FROM.FROM scope is our country.
	## cardinality = 0..1
	## replace_scope = { this = state from = country fromfrom = country }
	state_trigger = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}
	### The strategy is enabled only if ratio of the front covered by this strategy's targets is greater than this ratio.
	## cardinality = 0..1
	ratio = float
	### Factor for the normal priority. 40 means +40 %, -60 means -60 %.
	value = int	
}

alias[ai_strategy_rule:ai_strategy] = {
	type = force_concentration_target_weight
	### Target a specific country. Can specify multiple.
	## cardinality = 0..inf
	tag = scope[country]
	### Target a state. Can specify multiple.
	## cardinality = 0..inf	
	state = <state>		
	### Target a strategic region. Can specify multiple.
	## cardinality = 0..inf
	strategic_region = <strategic_region>
	### Target a specific ai area. Can specify multiple.
	## cardinality = 0..inf
	area = <ai_area>
	### Trigger to check against a specific country. Scope is enemy country, FROM scope is our country.
	## cardinality = 0..1
	## replace_scope = { this = country root = country from = country }
	country_trigger = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}
	### # Trigger to check against a state. Scope is state. FROM scope is enemy country FROM.FROM scope is our country.
	## cardinality = 0..1
	## replace_scope = { this = state from = country fromfrom = country }
	state_trigger = {
		## cardinality = ~1..inf
		alias_name[trigger] = alias_match_left[trigger]
	}
	### Factor for the normal priority. 40 means +40 %, -60 means -60 %.
	value = int	
}

enums = {
	enum[ai_diplo_strats] = {
		alliance
		antagonize
		avoid_starting_wars
		asking_foreign_garrison
		befriend
		conquer
		consider_weak
		contain
		declare_war
		diplo_action_acceptance
		diplo_action_desire
		dont_defend_ally_borders
		dont_join_wars_with
		equipment_market_trade_desire
		force_defend_ally_borders
		force_concentration_factor
		front_armor_score
		ignore
		ignore_claim
		influence
		invade
		occupation_policy
		prepare_for_war
		protect
		send_lend_lease_desire
		send_volunteers_desire
		support
	}
	enum[equipment_strats] = {
		equipment_variant_production_factor
		save_equipment
		production_upgrade_desire_offset
		equipment_production_surplus_management
		equipment_market_buying_threshold
		equipment_market_for_sale_threshold
		equipment_market_for_sale_factor
		equipment_market_min_for_sale
		equipment_market_max_for_sale
	}
	enum[no_id_strats] = {
		added_military_to_civilian_factory_ratio
		air_factory_balance
		dockyard_to_military_factory_ratio
		equipment_stockpile_surplus_ratio
		ignore_army_incompetence
		spare_unit_factor
		template_xp_reserve
		force_build_armies
		garrison
		produce_unit_for_subject_supply_chunks
		intelligence_agency_usable_factories
		agency_ai_base_num_factories_factor
		agency_ai_per_upgrade_factories_factor
		garrison_reinforcement_priority
		operation_equipment_priority
		railway_gun_divisions_ratio
		naval_invasion_focus
		naval_invasion_supremacy_weight
		avoid_starting_wars
		min_wanted_supply_trucks
		wanted_supply_trucks
		min_wanted_supply_trains
		wanted_supply_trains
		ai_wanted_divisions_factor
		equipment_market_spend_factories
		force_concentration_factor
		raid_target_country
		become_spymaster
	}
	enum[pp_strats] = {
		pp_spend_amount
		pp_spend_priority
	}
	enum[pp_targets] = {
		admiral
		general
		idea
		decision
		relation
		guarantee
	}
	enum[ai_xp_targets] = {
		division_template
		upgrade_xp_cutoff
	}
	enum[unit_strats] = {
		equipment_production_factor
		template_prio
		unit_ratio
	}
	enum[strat_region_strats] = {
		naval_convoy_raid_region
		naval_avoid_region
		strategic_air_importance
		strike_force_home_base
	}
	enum[strat_region_strats_without_value] = {
		strike_force_home_base
	}
	enum[state_strats] = {
		theatre_distribution_demand_increase
		factory_build_score_factor
	}
	enum[state_strats_with_id] = {
		build_building
	}
	enum[naval_mission_strats] = {
		naval_mission_threshold
	}
	enum[ai_role_strats] = {
		role_ratio
		build_army
		build_airplane
	}
	enum[building_strats] = {
		building_target
	}
	enum[ordertypes] = {
		front
		invasion
	}
	enum[execution_types] = {
		careful
		balanced
		rush
		rush_weak
	}
	enum[unit_requests] = {
		front_unit_request
		invasion_unit_request
	}
	enum[intel_branches] = {
		branch_intelligence
		branch_defense
		branch_operation
		branch_operative
		branch_crypto
	}
	enum[operative_missions] = {
		build_intel_network
		counter_intelligence
		quiet_network
		boost_ideology
		propaganda
		root_out_resistance
		control_trade
		diplomatic_pressure
		no_mission
	}
	enum[diplo_action_strats] = {
		diplo_action_desire
		diplo_action_acceptance
	}
	enum[market_seller_strats] = {
		equipment_market_buy
	}
	enum[research_strats] = {
		research_tech
		research_weight_factor
	}
}
