## scope = country
## push_scope = state
alias[effect:every_core_state] = {
	### Apply the effect to this number of randomly selected entities
	## cardinality = 0..1
	random_select_amount = int[1..inf]
	## cardinality = 0..1
	display_individual_scopes = bool
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	tooltip = localisation
	alias_name[effect] = alias_match_left[effect]
}

## scope = country
## push_scope = state
alias[effect:random_core_state] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	prioritize = {
		## cardinality = 1..inf
		<state>
	}
	## cardinality = 0..1
	tooltip = localisation
	alias_name[effect] = alias_match_left[effect]
}

### transfers state (owns and controls) to target
## scope = { state }
alias[effect:transfer_state_to] = enum[country_tags]
### transfers state (owns and controls) to target
## scope = { state }
alias[effect:transfer_state_to] = scope[country]

### transfers state (owns) to target, control changes only if at peace with controller and controller doesn't have rule can_occupy_non_war
## scope = { state }
alias[effect:set_state_owner_to] = enum[country_tags]
### transfers state (owns) to target, control changes only if at peace with controller and controller doesn't have rule can_occupy_non_war
## scope = { state }
alias[effect:set_state_owner_to] = scope[country]

### transfers state (controls only) to target
## scope = { state }
alias[effect:set_state_controller_to] = enum[country_tags]
### transfers state (controls only) to target
## scope = { state }
alias[effect:set_state_controller_to] = scope[country]

### releases target country from owned and controlled states of scoped country
## scope = { country }
alias[effect:release_on_controlled] = enum[country_tags]
### releases target country from owned and controlled states of scoped country
## scope = { country }
alias[effect:release_on_controlled] = scope[country]

### releases target country from owned and controlled states as a puppet of scoped country
## scope = { country }
alias[effect:release_puppet_on_controlled] = enum[country_tags]
### releases target country from owned and controlled states as a puppet of scoped country
## scope = { country }
alias[effect:release_puppet_on_controlled] = scope[country]

## scope = country
alias[effect:uncomplete_national_focus] = {
	focus = <focus>
	focus = <shared_focus>
	### Default is no. If yes, all proceeding focuses will also be uncompleted if their prerequisite aren't met after the preceeding focuses are uncompleted.
	## cardinality = 0..1
	uncomplete_children = bool
	### Default is no. If yes, the country is refunded the political power invested in the current focus if it's canceled as a result of its prerequisites being uncompleted.
	## cardinality = 0..1
	refund_political_power = bool
}

## scope = country
## push_scope = character
alias[effect:every_character] = {
	### Apply the effect to this number of randomly selected entities
	## cardinality = 0..1
	random_select_amount = int[1..inf]
	## cardinality = 0..1
	display_individual_scopes = bool
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	tooltip = localisation
	alias_name[effect] = alias_match_left[effect]
}

## scope = country
## push_scope = character
alias[effect:random_character] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	tooltip = localisation
	alias_name[effect] = alias_match_left[effect]
}

## scope = { character country unit_leader }
alias[effect:add_corps_commander_role] = {
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = <character>
	### required in country scope, optional in character scope
	## cardinality = 0..1
    character = value[character_token]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[variable]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[global_event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = scope[character]
	## cardinality = 0..1
	desc = localisation
	## cardinality = 0..1
	traits = {
		## cardinality = ~1..inf
		<unit_leader_trait>
	}
	### Optional for effect_tooltip
	## cardinality = 0..1
	skill = int_variable_field
	### Optional for effect_tooltip
	## cardinality = 0..1
	attack_skill = int_variable_field
	### Optional for effect_tooltip
	## cardinality = 0..1
	defense_skill = int_variable_field
	### Optional for effect_tooltip
	## cardinality = 0..1
	planning_skill = int_variable_field
	### Optional for effect_tooltip
	## cardinality = 0..1
	logistics_skill = int_variable_field
	## cardinality = 0..1
	female = bool
	## cardinality = 0..1
	legacy_id = value_set[unit_leader_ids]
	## cardinality = 0..1
	visible = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

### Remove unit leader role to character
## scope = { character unit_leader }
alias[effect:remove_unit_leader_role] = bool

### Remove unit leader role to character
## scope = { country }
alias[effect:remove_unit_leader_role] = <character>
alias[effect:remove_unit_leader_role] = value[character_token]

### Remove unit leader role to character
## scope = { country }
alias[effect:remove_unit_leader_role] = value[variable]

### Remove unit leader role to character
## scope = { country }
alias[effect:remove_unit_leader_role] = value[event_target]

### Remove unit leader role to character
## scope = { country }
alias[effect:remove_unit_leader_role] = value[global_event_target]

### Remove unit leader role to character
## scope = { country }
alias[effect:remove_unit_leader_role] = scope[character]

### Remove unit leader role to character
## scope = { country }
alias[effect:remove_unit_leader_role] = {
	character = <character>
    character = value[character_token]
	character = value[variable]
	character = value[event_target]
	character = value[global_event_target]
	character = scope[character]
}

## scope = { character country unit_leader }
alias[effect:add_field_marshal_role] = {
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = <character>
	### required in country scope, optional in character scope
	## cardinality = 0..1
    character = value[character_token]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[variable]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[global_event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = scope[character]
	## cardinality = 0..1
	desc = localisation
	## cardinality = 0..1
	traits = {
		## cardinality = ~1..inf
		<unit_leader_trait>
	}
	skill = int_variable_field
	attack_skill = int_variable_field
	defense_skill = int_variable_field
	planning_skill = int_variable_field
	logistics_skill = int_variable_field
	## cardinality = 0..1
	legacy_id = value_set[unit_leader_ids]
	## cardinality = 0..1
	## replace_scope = { this = character root = country }
	visible = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

## scope = { character country unit_leader }
alias[effect:add_naval_commander_role] = {
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = <character>
	### required in country scope, optional in character scope
	## cardinality = 0..1
    character = value[character_token]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[variable]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[global_event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = scope[character]
	## cardinality = 0..1
	desc = localisation
	## cardinality = 0..1
	traits = {
		## cardinality = ~1..inf
		<unit_leader_trait>
	}
	skill = int_variable_field
	attack_skill = int_variable_field
	defense_skill = int_variable_field
	maneuvering_skill = int_variable_field
	coordination_skill = int_variable_field
	## cardinality = 0..1
	legacy_id = value_set[unit_leader_ids]
	## cardinality = 0..1
	visible = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

## scope = { character country unit_leader }
alias[effect:add_country_leader_role] = {
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = <character>
	### required in country scope, optional in character scope
	## cardinality = 0..1
    character = value[character_token]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[variable]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[global_event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = scope[character]
	### makes character lead their ideology party, default no
	## cardinality = 0..1
	promote_leader = bool
	country_leader = {
		## cardinality = 0..1
		desc = localisation
		ideology = enum[sub_ideology]
		## cardinality = 0..1
		traits = {
			## cardinality = ~1..inf
			<country_leader_trait>
		}
		## cardinality = 0..1
		expire = datetime_field
		## cardinality = 0..1
		id = int
	}
}

## scope = { character country unit_leader }
alias[effect:remove_country_leader_role] = {
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = <character>
	### required in country scope, optional in character scope
	## cardinality = 0..1
    character = value[character_token]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[variable]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[global_event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = scope[character]
	### makes character lead their ideology party, default no
	## cardinality = 0..1
	ideology = enum[sub_ideology]
}

## scope = { character country unit_leader }
alias[effect:add_advisor_role] = {
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = <character>
	### required in country scope, optional in character scope
	## cardinality = 0..1
    character = value[character_token]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[variable]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[global_event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = scope[character]
	### hires advisor bypassing cost, default no
	## cardinality = 0..1
	activate = bool
	advisor = {
		slot = value[character_advisor_slot]
		### Optional, defaults to <character>_advisor_role
		## cardinality = 0..1
		idea_token = value_set[advisor_token]
		## cardinality = 0..1
		name = localisation
		## cardinality = 0..1
		desc = localisation
		### Sets advsior effects.
		## cardinality = ~1..1
		traits = {
			## cardinality = 0..inf
			<country_leader_trait>
		}
		## cardinality = 0..1
		research_bonus = {
			## cardinality = 1..inf
			enum[tech_category] = float
		}
		## cardinality = 0..1
		ledger = enum[ledgers]
		### overrides default cost of advisor
		## cardinality = 0..1
		cost = int
		### cost to remove advisor, -1 prevents removal
		## cardinality = 0..1
		removal_cost = int
		## cardinality = 0..1
		## replace_scope = { this = character root = country }
		ai_will_do = {
			enum[base_factor] = variable_field
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
		### Modifiers that are applied to tag while the advisor is active.
		## replace_scope = { this = character root = country }
		## cardinality = 0..1
		modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## cardinality = 0..1
		can_be_fired = bool
	}
}

## scope = { character country unit_leader }
alias[effect:remove_advisor_role] = {
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = <character>
	### required in country scope, optional in character scope
	## cardinality = 0..1
    character = value[character_token]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[variable]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = value[global_event_target]
	### required in country scope, optional in character scope
	## cardinality = 0..1
	character = scope[character]
	slot = value[character_advisor_slot]
}

### removes character from all roles and availability
## scope = { country }
alias[effect:retire_character] = <character>
### removes character from all roles and availability
## scope = { country }
alias[effect:retire_character] = value[character_token]

### removes character from all roles and availability
## scope = { any }
alias[effect:retire_character] = value[variable]

### removes character from all roles and availability
## scope = { any }
alias[effect:retire_character] = value[event_target]

### removes character from all roles and availability
## scope = { any }
alias[effect:retire_character] = value[global_event_target]

### removes character from all roles and availability
## scope = { any }
alias[effect:retire_character] = scope[character]

### renames character
## scope = { character unit_leader }
alias[effect:set_character_name] = localisation_inline
### renames character
## scope = { character unit_leader }
alias[effect:set_character_name] = <spriteType>
### renames character
## scope = { country character unit_leader }
alias[effect:set_character_name] = {
	## cardinality = 0..1
	character = <character>
	## cardinality = 0..1
	character = value[character_token]
	## cardinality = 0..1
	character = value[variable]
	## cardinality = 0..1
	character = value[event_target]
	## cardinality = 0..1
	character = value[global_event_target]
	## cardinality = 0..1
	character = scope[character]
	name = localisation
}

### makes character head of their ideology party
## scope = { country }
alias[effect:promote_character] = <character>
### makes character head of their ideology party
## scope = { country }
alias[effect:promote_character] = value[character_token]
### makes character head of their ideology party
## scope = { country }
alias[effect:promote_character] = value[variable]
### makes character head of their ideology party
## scope = { country }
alias[effect:promote_character] = {
	character = <character>
	character = value[character_token]
	character = country_leader
	character = value[variable]
	### must match the character's country leader sub-ideology
	ideology = enum[sub_ideology]
	ideology = <ideology>
}

### makes character head of their ideology party
## scope = { character unit_leader }
alias[effect:promote_character] = bool
### makes character head of their ideology party
## scope = { character unit_leader }
alias[effect:promote_character] = enum[sub_ideology]
### makes character head of their ideology party
## scope = { character unit_leader }
alias[effect:promote_character] = <ideology>
### makes character head of their ideology party
## scope = { character unit_leader }
alias[effect:promote_character] = {
	ideology = enum[sub_ideology]
	ideology = <ideology>
}

## scope = { character unit_leader }
alias[effect:swap_country_leader_traits] = {
	remove = <country_leader_trait>
	add = <country_leader_trait>

	## cardinality = 0..1
	ideology = enum[sub_ideology]
}

## scope = { character unit_leader }
alias[effect:set_character_flag] = value_set[character_flag]

## scope = { character unit_leader }
alias[effect:set_character_flag] = {
	flag = value_set[character_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	days = int
}

## scope = { character unit_leader }
alias[effect:modify_character_flag] = {
	flag = value[character_flag]
	value = int_variable_field
}
## scope = { character unit_leader }
alias[effect:clr_character_flag] = value[character_flag]

### Hires advisor (adds advisor idea)
## scope = { country }
alias[effect:activate_advisor] = value[advisor_token]

### Fires advisor (removes advisor idea)
## scope = { country }
alias[effect:deactivate_advisor] = value[advisor_token]

### makes character head of their ideology party
## scope = { country character unit_leader }
alias[effect:add_trait] = {
	## cardinality = 0..1
	character = <character>
	## cardinality = 0..1
	character = value[character_token]
	## cardinality = 0..1
	character = value[variable]
	## cardinality = 0..1
	character = value[event_target]
	## cardinality = 0..1
	character = value[global_event_target]
	## cardinality = 0..1
	character = scope[character]
	trait = <unit_leader_trait>
}
### makes character head of their ideology party
## scope = { country character unit_leader }
alias[effect:add_trait] = {
	## cardinality = 0..1
	character = <character>
	## cardinality = 0..1
	character = value[character_token]
	## cardinality = 0..1
	character = scope[character]
	## cardinality = 0..1
	character = value[variable]
	## cardinality = 0..1
	character = value[event_target]
	## cardinality = 0..1
	character = value[global_event_target]
	## cardinality = 0..1
	character = scope[character]
	trait = <country_leader_trait>
	trait = <unit_leader_trait>
	### must match the character's country leader sub-ideology
	## cardinality = 0..1
	ideology = enum[sub_ideology]
	## cardinality = 0..1
	slot = value[character_advisor_slot]
}
## scope = { country character unit_leader }
alias[effect:remove_trait] = {
	## cardinality = 0..1
	character = <character>
	## cardinality = 0..1
	character = value[character_token]
	## cardinality = 0..1
	character = scope[character]
	## cardinality = 0..1
	character = value[variable]
	## cardinality = 0..1
	character = value[event_target]
	## cardinality = 0..1
	character = value[global_event_target]
	## cardinality = 0..1
	character = scope[character]
	trait = <country_leader_trait>
	trait = <unit_leader_trait>
	## cardinality = 0..1
	ideology = enum[sub_ideology]
	## cardinality = 0..1
	slot = value[character_advisor_slot]
}

### Transfer from one country to another for the character in scope. Note that this is not related to operative nationalities added via add_nationality. Note that for operative, this will temporarily lock their slot on the country of origin
## scope = { country character unit_leader operative }
alias[effect:set_nationality] = {
	target_country = scope[country]
	target_country = enum[country_tags]
	character = <character>
	character = value[character_token]
	character = value[variable]
	character = value[event_target]
	character = value[global_event_target]
	character = scope[character]
}

### Transfer from one country to another for the character in scope. Note that this is not related to operative nationalities added via add_nationality. Note that for operative, this will temporarily lock their slot on the country of origin
## scope = { character unit_leader operative }
alias[effect:set_nationality] = scope[country]

### Transfer from one country to another for the character in scope. Note that this is not related to operative nationalities added via add_nationality. Note that for operative, this will temporarily lock their slot on the country of origin
## scope = { character unit_leader operative }
alias[effect:set_nationality] = {
	target_country = scope[country]
	target_country = enum[country_tags]
}

### Transfer from one country to another for the character in scope. Note that this is not related to operative nationalities added via add_nationality. Note that for operative, this will temporarily lock their slot on the country of origin
## scope = { character unit_leader operative }
alias[effect:set_nationality] = enum[country_tags]

### Executes children effects on every subject country that fulfills the "limit" trigger. tooltip=key can be defined to override tooltip title
## scope = { COUNTRY }
## push_scope = country
alias[effect:every_subject_country] = {
	### Apply the effect to this number of randomly selected entities
	## cardinality = 0..1
	random_select_amount = int[1..inf]
	## cardinality = 0..1
	display_individual_scopes = bool
    ## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	tooltip = localisation
	alias_name[effect] = alias_match_left[effect]
}

### Executes child effects on random subject country that fulfills the limit.
## scope = { COUNTRY }
## push_scope = country
alias[effect:random_subject_country] = {
    ## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on every country that fulfils the "limit" trigger. Difference with every_country is that it includes countries not yet present on the map. tooltip=key can be defined to override tooltip title.
## scope = { any }
## push_scope = country
alias[effect:every_possible_country] = {
	### Apply the effect to this number of randomly selected entities
	## cardinality = 0..1
	random_select_amount = int[1..inf]
	## cardinality = 0..1
	display_individual_scopes = bool
    ## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	tooltip = localisation
	alias_name[effect] = alias_match_left[effect]
}

### Display in tooltip every character that fulfils the "limit" trigger.
## scope = { COUNTRY }
## push_scope = character
alias[effect:character_list_tooltip] = {
    ## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

### set portraits for the target character. Syntax is similar to character files.
## scope = { character country unit_leader }
alias[effect:set_portraits] = {
	## cardinality = 0..1
	character = <character>
	## cardinality = 0..1
	character = value[character_token]
	## cardinality = 0..1
	character = value[variable]
	## cardinality = 0..1
	character = value[event_target]
	## cardinality = 0..1
	character = value[global_event_target]
	## cardinality = 0..1
	character = scope[character]
	### Portrait(s), army and/or civilian
	## cardinality = ~1..3
	enum[character_portrait_types] = {
		### Portrait(s), large and/or small
		## cardinality = ~1..2
		alias_name[portraitset] = alias_match_left[portraitset]
	}
}

### Recruits character. Use only in history files
## scope = { country }
alias[effect:recruit_character] = <character>
### Recruits character. Use only in history files
## scope = { country }
alias[effect:recruit_character] = value[variable]
### Recruits character. Use only in history files
## scope = { country }
alias[effect:recruit_character] = value[event_target]
### Recruits character. Use only in history files
## scope = { country }
alias[effect:recruit_character] = value[global_event_target]
### Recruits character. Use only in history files
## scope = { country }
alias[effect:recruit_character] = scope[character]

### Remove idea from country.
## scope = country
alias[effect:remove_ideas] = value[variable]
### Adds idea from country.
## scope = country
alias[effect:add_ideas] = value[variable]
### Adds idea from country.
## scope = country
alias[effect:add_ideas] = value[advisor_token]
### Remove idea from country.
## scope = country
alias[effect:remove_ideas] = value[advisor_token]

### damages units for given conditions. no tooltip generated
## scope = { country state unit_leader }
alias[effect:damage_units] = {
	### specify a location
	## cardinality = 0..1
	province = enum[provinces]
	## cardinality = 0..1
	state = <state>
	## cardinality = 0..1
	state = scope[state]
	## cardinality = 0..1
	region = <strategic_region>
    ## cardinality = 0..1
	## replace_scope = { this = country }
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	damage = float
	## cardinality = 0..1
	org_damage = float
	## cardinality = 0..1
	str_damage = float
	### will damage a ratio damage to total org/str of unit if set
	## cardinality = 0..1
	ratio = bool
	### you can limit army templates
	## cardinality = 0..1
	template = value[division_template_name]
	### you can limit army templates
	## cardinality = 0..1
	division_template = value[division_template_name]
	### Damage armies
	## cardinality = 0..1
	army = bool
	### Damage navies
	## cardinality = 0..1
	navy = bool
}

### This is to force the update of a custom map mode.
## scope = { country }
alias[effect:force_update_map_mode] = {
	## cardinality = ~1..2
	mapmode = <scripted_map_modes>
}

### Create railway gun effect
## scope = { any }
alias[effect:create_railway_gun] = {
	equipment = <equipment.railway_gun>
	## cardinality = 0..1
	name = localisation_inline
	### optional, created in capital otherwise
	## cardinality = 0..1
	location = enum[provinces]
}

### Generate character
## scope = { country }
alias[effect:generate_character] = {
	token_base = value_set[character_token]
	## cardinality = 0..1
	name = localisation
	## cardinality = 0..1
	advisor = {
		slot = value[character_advisor_slot]
		## cardinality = 0..1
		name = localisation
		## cardinality = 0..1
		desc = localisation
		### Optional, defaults to <character>_advisor_role
		## cardinality = 0..1
		idea_token = value_set[advisor_token]
		## replace_scope = { this = character root = country }
		## cardinality = 0..1
		allowed = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}
		## replace_scope = { this = character root = country }
		## cardinality = 0..1
		visible = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}
		## replace_scope = { this = character root = country }
		## cardinality = 0..1
		available = {
			## cardinality = ~1..inf
			alias_name[trigger] = alias_match_left[trigger]
		}
		### Sets advsior effects.
		## cardinality = ~1..1
		traits = {
			## cardinality = 0..inf
			<country_leader_trait>
		}
		## cardinality = 0..1
		research_bonus = {
			## cardinality = 1..inf
			enum[tech_category] = float
		}
		## cardinality = 0..1
		ledger = enum[ledgers]
		### overrides default cost of advisor
		## cardinality = 0..1
		cost = int
		### cost to remove advisor, -1 prevents removal
		## cardinality = 0..1
		removal_cost = int
		## cardinality = 0..1
		## replace_scope = { this = character root = country }
		ai_will_do = {
			enum[base_factor] = variable_field
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
		## replace_scope = { this = character root = country }
		## cardinality = 0..inf
		on_add = {
			alias_name[effect] = alias_match_left[effect]
		}
		## replace_scope = { this = character root = country }
		## cardinality = 0..inf
		on_remove = {
			alias_name[effect] = alias_match_left[effect]
		}
		### While it is used in vanilla and doesn't throw errors, I can't get it to work reliably so I suspect there is some hard-coded strangeness going on here.
		## replace_scope = { this = character root = country }
		## cardinality = 0..1
		do_effect = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		### Modifiers that are applied to tag while the advisor is active.
		## replace_scope = { this = character root = country }
		## cardinality = 0..1
		modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## cardinality = 0..1
		can_be_fired = bool
	}
	## cardinality = 0..1
	### Should have at least one portrait defined
	portraits = {
		### Portrait(s), army and/or civilian
		## cardinality = ~1..3
		enum[character_portrait_types] = {
			### Portrait(s), large (leader) and/or small (advisor)
			## cardinality = ~1..2
			enum[character_portrait_sizes] = scalar
		}
	}
}

### Creates an enitity
### Uses the the same coordinate system that the map uses. A positive change in rotation results in counter-clockwise rotation, a full 360 degrees rotation is approximately 6.28 radians. 
### For comparison, default minimum zoom level (closest to the map) is 50 units, while default maximum zoom level is 3000 units. 
## scope = any
alias[effect:create_entity] = {
    entity = <entity>
	## cardinality = 0..1
    id = value_set[entity_id]
	## cardinality = 0..1
    var = value_set[variable]
    x = float
    y = float
	## cardinality = 0..1
    z = float
    province = enum[provinces]
    state = <state>
    rotation = float
    scale = float
    min_zoom = float
	## cardinality = 0..1
    visible = <scripted_trigger>
}

### Destroys an existing entity
### IDs are set by the create_entity effect. 
## scope = any
alias[effect:destroy_entity] = value[entity_id]

### Sets the position and rotation of an entity using two coordinates. 
### IDs are set by the create_entity effect. Uses the the same coordinate system that the map uses. 
### A positive change in rotation results in counter-clockwise rotation, a full 360 degrees rotation is approximately 6.28 radians. 
## scope = any
alias[effect:set_entity_movement] = {
    id = value[entity_id]
    start = {
        x = float
        y = float
		## cardinality = 0..1
        z = float
    }
    target = {
        province = enum[provinces]
    }
    ratio = float
    rotation = float
}

### Sets the position of an existing entity.
### IDs are set by the create_entity effect. Uses the the same coordinate system that the map uses.
## scope = any
alias[effect:set_entity_position] = {
	id = value[entity_id]
	x = float
	y = float
	## cardinality = 0..1
	z = float
	province = enum
	state = <state>
}

### Sets the currently-facing angle of an existing entity.
### IDs are set by the create_entity effect.
### A positive change results in counter-clockwise rotation, a full 360 degrees rotation is approximately 6.28 radians.
## scope = any
alias[effect:set_entity_rotation] = {
    id = value[entity_id]
    rotation = float
}

### Sets the size of an existing entity.
### IDs are set by the create_entity effect.
## scope = any
alias[effect:set_entity_scale] = {
	id = value[entity_id]
	scale = float
}

### Sets the animation of a specified entity
### IDs are set by the create_entity effect. Animations are defined within the /Hearts of Iron IV/gfx/models/**/*.asset files. 
## scope = any
alias[effect:set_entity_animation] = {
    id = value[entity_id]
    animation = <model_animation>
}

### Sets a variable to the number of supply vehicles in stockpile or that are needed
## scope = country
alias[effect:get_supply_vehicles] = {
	var = value_set[variable]
	type = truck
	type = train
	### default no. If yes, gets the number of needed vehicles
	## cardinality = 0..1
	need = yes
	## error_if_only_match = This is the default value and can be omitted
	## severity = info
	## cardinality = 0..1
    need = no
}

### Sets a temp variable to the number of supply vehicles in stockpile or that are needed
## scope = country
alias[effect:get_supply_vehicles_temp] = {
	var = value_set[variable]
	type = truck
	type = train
	### default no. If yes, gets the number of needed vehicles
	## cardinality = 0..1
	need = yes
	## error_if_only_match = This is the default value and can be omitted
	## severity = info
	## cardinality = 0..1
    need = no
}

### Executes children effects on random characters that fulfills the "limit" trigger.Has to use has_ideology in limit to determine the party (with ideology group). tooltip=key can be added to override tooltip title
## scope = country
## push_scope = character
alias[effect:party_leader] = {
	## cardinality = 0..1
	tooltip = localisation
	### Documentation suggests to use has_ideology trigger here
	## cardinality = 0..1
	limit = {
		has_ideology = enum[sub_ideology]
	}
	alias_name[effect] = alias_match_left[effect]
}

### Teleport the target country's railway guns to the province to which railway guns are deployed
## scope = country
alias[effect:teleport_railway_guns_to_deploy_province] = scope[country]
