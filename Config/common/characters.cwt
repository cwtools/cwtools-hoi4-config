types = {
	## unique = yes
	type[character] = {
		path = "game/common/characters"
		path_strict = yes
		skip_root_key = any
		subtype[instanced] = {
			## cardinality = ~2..inf
			instance = {

			}
		}
		## only_if_not = { instanced }
		subtype[uninstanced] = {

		}
		subtype[country_leader] = {
			## cardinality = 1..inf
			country_leader = {

			}
		}
		subtype[country_leader] = {
			## cardinality = ~2..inf
			instance = {
				## cardinality = 1..inf
				country_leader = {
				}
			}
		}
		## only_if_not = { field_marshal navy_leader }
		subtype[corps_commander] = {
			corps_commander = {

			}
        }
		## only_if_not = { field_marshal navy_leader }
		subtype[corps_commander] = {
			## cardinality = ~2..inf
			instance = {
				corps_commander = {

				}
			}
        }
		## only_if_not = { corps_commander navy_leader }
		subtype[field_marshal] = {
			field_marshal = {

			}
		}
		## only_if_not = { corps_commander navy_leader }
		subtype[field_marshal] = {
			## cardinality = ~2..inf
			instance = {
				field_marshal = {
				}
			}
		}
		## only_if_not = { corps_commander field_marshal }
		subtype[navy_leader] = {
			navy_leader = {

			}
		}
		## only_if_not = { corps_commander field_marshal }
		subtype[navy_leader] = {
			## cardinality = ~2..inf
			instance = {
				navy_leader = {
				}
			}
		}
		subtype[advisor] = {
			## cardinality = 1..inf
			advisor = {

			}
		}
		subtype[scientist] = {
			## cardinality = 1..inf
			scientist = {

			}
		}
		subtype[advisor] = {
			## cardinality = ~2..inf
			instance = {
				## cardinality = 1..inf
				advisor = {
				}
			}
		}
	}
}

character = {

	subtype[uninstanced] = {
		name = localisation
		### Should have at least one portrait defined
		portraits = {
			### Portrait(s), army and/or civilian
			## cardinality = ~1..3
			enum[character_portrait_types] = {
				### Portrait(s), large (leader) and/or small (advisor)
					## cardinality = ~1..2
					alias_name[portraitset] = alias_match_left[portraitset]
			}
		}
		## cardinality = 0..1
		## replace_scope = { this = character root = country }
		allowed_civil_war = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		name = localisation
		## cardinality = 0..1
		gender = female
		## cardinality = 0..1
		gender = male
		## cardinality = 0..1
		gender = undefined
	}
	subtype[country_leader] = {
		## cardinality = 1..inf
		country_leader = {
			ideology = enum[sub_ideology]
			## cardinality = 0..1
			desc = localisation
			## cardinality = 0..1
			expire = datetime_field
			## cardinality = 0..1
			name = localisation
			### Sets starting traits for this leader.
			## cardinality = 0..1
			traits = {
				## cardinality = 0..inf
				<country_leader_trait>
			}
			## cardinality = 0..1
			research_bonus = {
				## cardinality = 1..inf
				enum[tech_category] = float
			}
			## cardinality = 0..1
			enum[character_ids] = value_set[country_leader_ids]
		}
	}

	subtype[corps_commander] = {
		corps_commander = {
			## cardinality = 0..1
			desc = localisation
			## cardinality = 0..1
			expire = datetime_field
			## cardinality = ~1..1
			skill = int
			## cardinality = ~1..1
			attack_skill = int
			## cardinality = ~1..1
			defense_skill = int
			## cardinality = ~1..1
			planning_skill = int
			## cardinality = ~1..1
			logistics_skill = int
			## cardinality = 0..1
			enum[character_ids] = value_set[unit_leader_ids]
			## cardinality = 0..1
			name = localisation
			### Sets starting traits for this leader.
			## cardinality = 0..1
			traits = {
				## cardinality = 0..inf
				<unit_leader_trait>
			}
			### Can the player see this character as a unit leader.
			## replace_scope = { this = character root = country }
			## cardinality = 0..1
			visible = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}
	}
	subtype[field_marshal] = {
		field_marshal = {
			## cardinality = 0..1
			desc = localisation
			## cardinality = 0..1
			expire = datetime_field
			## cardinality = ~1..1
			skill = int
			## cardinality = ~1..1
			attack_skill = int
			## cardinality = ~1..1
			defense_skill = int
			## cardinality = ~1..1
			planning_skill = int
			## cardinality = ~1..1
			logistics_skill = int
			## cardinality = 0..1
			enum[character_ids] = value_set[unit_leader_ids]
			### Sets starting traits for this leader.
			## cardinality = 0..1
			traits = {
				## cardinality = 0..inf
				<unit_leader_trait>
			}
			### Can the player see this character as a unit leader.
			## replace_scope = { this = character root = country }
			## cardinality = 0..1
			visible = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}
	}
	subtype[navy_leader] = {
		navy_leader = {
			## cardinality = 0..1
			desc = localisation
			## cardinality = 0..1
			expire = datetime_field
			## cardinality = ~1..1
			skill = int
			## cardinality = ~1..1
			attack_skill = int
			## cardinality = ~1..1
			defense_skill = int
			## cardinality = ~1..1
			maneuvering_skill = int
			## cardinality = ~1..1
			coordination_skill = int
			## cardinality = 0..1
			enum[character_ids] = value_set[unit_leader_ids]
			## cardinality = 0..1
			name = localisation
			### Sets starting traits for this leader.
			## cardinality = 0..1
			traits = {
				## cardinality = 0..inf
				<unit_leader_trait>
			}
			### Can the player see this character as a unit leader.
			## replace_scope = { this = character root = country }
			## cardinality = 0..1
			visible = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}
	}
	subtype[advisor] = {
		## cardinality = 1..inf
		advisor = {
			slot = value[character_advisor_slot]
			## cardinality = 0..1
			name = localisation
			## cardinality = 0..1
			desc = localisation
			### Optional, defaults to <character>_advisor_role
			## cardinality = 0..1
			idea_token = value_set[advisor_token]
			## replace_scope = { this = character root = country }
			## cardinality = 0..1
			allowed = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			## replace_scope = { this = character root = country }
			## cardinality = 0..1
			visible = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			## replace_scope = { this = character root = country }
			## cardinality = 0..1
			available = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			## cardinality = 0..1
			name = localisation
			### Sets advsior effects.
			## cardinality = ~1..1
			traits = {
				## cardinality = 0..inf
				<country_leader_trait>
			}
			## cardinality = 0..1
			research_bonus = {
				## cardinality = 1..inf
				enum[tech_category] = float
			}
			## cardinality = 0..1
			ledger = enum[ledgers]
			### overrides default cost of advisor
			## cardinality = 0..1
			cost = int
			### cost to remove advisor, -1 prevents removal
			## cardinality = 0..1
			removal_cost = int
			## cardinality = 0..1
			## replace_scope = { this = character root = country }
			ai_will_do = {
				enum[base_factor] = variable_field
				alias_name[modifier_rule] = alias_match_left[modifier_rule]
			}
			## replace_scope = { this = character root = country }
			## cardinality = 0..inf
			on_add = {
				alias_name[effect] = alias_match_left[effect]
			}
			## replace_scope = { this = character root = country }
			## cardinality = 0..inf
			on_remove = {
				alias_name[effect] = alias_match_left[effect]
			}
			### While it is used in vanilla and doesn't throw errors, I can't get it to work reliably so I suspect there is some hard-coded strangeness going on here.
			## replace_scope = { this = character root = country }
			## cardinality = 0..1
			do_effect = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			### Modifiers that are applied to tag while the advisor is active.
			## replace_scope = { this = character root = country }
			## cardinality = 0..1
			modifier = {
				alias_name[modifier] = alias_match_left[modifier]
			}
			## cardinality = 0..1
			can_be_fired = bool
		}
	}
	subtype[scientist] = {
		## cardinality = 1..inf
		scientist = {
			## cardinality = 0..1
			desc = localisation
			## replace_scope = { this = character root = country }
			## cardinality = 0..1
			visible = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			## cardinality = 0..1
			traits = {
				## cardinality = ~1..inf
				<scientist_trait>
			}
			## cardinality = 1..1
			skills = {
				## cardinality = 1..1
				<specialization> = int
			}
		}
	}
	subtype[instanced] = {
		### Character instance, for use on startup checks (i.e. has_dlc, and similar) to create alternate versions of a character, usually two
		## cardinality = ~2..inf
		instance = {
			## replace_scope = { this = character root = country }
			allowed = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			## cardinality = 0..1
			name = localisation
			### Should have at least one portrait defined
			portraits = {
				### Portrait(s), army and/or civilian
				## cardinality = ~1..3
				enum[character_portrait_types] = {
					### Portrait(s), large and/or small
					## cardinality = ~1..2
					alias_name[portraitset] = alias_match_left[portraitset]
				}
			}
			## cardinality = 0..1
			name = localisation
			## cardinality = 0..1
			gender = female
			## cardinality = 0..1
			gender = male
			## cardinality = 0..1
			gender = undefined
			## cardinality = 0..1
			## replace_scope = { this = character root = country }
			allowed_civil_war = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			### Country leader subtype
			## cardinality = 0..inf
			country_leader = {
				ideology = enum[sub_ideology]
				## cardinality = 0..1
				desc = localisation
				## cardinality = 0..1
				expire = datetime_field
				## cardinality = 0..1
				name = localisation
				### Sets starting traits for this leader.
				## cardinality = 0..1
				traits = {
					## cardinality = 0..inf
					<country_leader_trait>
				}
				## cardinality = 0..1
				research_bonus = {
					## cardinality = 1..inf
					enum[tech_category] = float
				}
				## cardinality = 0..1
				enum[character_ids] = value_set[country_leader_ids]
			}
			### Corps commander subtype
			## cardinality = 0..1
			corps_commander = {
				## cardinality = 0..1
				desc = localisation
				## cardinality = 0..1
				expire = datetime_field
				## cardinality = ~1..1
				skill = int
				## cardinality = ~1..1
				attack_skill = int
				## cardinality = ~1..1
				defense_skill = int
				## cardinality = ~1..1
				planning_skill = int
				## cardinality = ~1..1
				logistics_skill = int
				## cardinality = 0..1
				enum[character_ids] = value_set[unit_leader_ids]
				## cardinality = 0..1
				name = localisation
				### Sets starting traits for this leader.
				## cardinality = 0..1
				traits = {
					## cardinality = 0..inf
					<unit_leader_trait>
				}
				### Can the player see this character as a unit leader.
				## replace_scope = { this = character root = country }
				## cardinality = 0..1
				visible = {
					alias_name[trigger] = alias_match_left[trigger]
				}
			}
			### Field marshal subtype
			## cardinality = 0..1
			field_marshal = {
				## cardinality = 0..1
				desc = localisation
				## cardinality = 0..1
				expire = datetime_field
				## cardinality = ~1..1
				skill = int
				## cardinality = ~1..1
				attack_skill = int
				## cardinality = ~1..1
				defense_skill = int
				## cardinality = ~1..1
				planning_skill = int
				## cardinality = ~1..1
				logistics_skill = int
				## cardinality = 0..1
				enum[character_ids] = value_set[unit_leader_ids]
				## cardinality = 0..1
				name = localisation
				### Sets starting traits for this leader.
				## cardinality = 0..1
				traits = {
					## cardinality = 0..inf
					<unit_leader_trait>
				}
				### Can the player see this character as a unit leader.
				## replace_scope = { this = character root = country }
				## cardinality = 0..1
				visible = {
					alias_name[trigger] = alias_match_left[trigger]
				}
			}
			### Navy leader subtype
			## cardinality = 0..1
			navy_leader = {
				## cardinality = 0..1
				desc = localisation
				## cardinality = 0..1
				expire = datetime_field
				## cardinality = ~1..1
				skill = int
				## cardinality = ~1..1
				attack_skill = int
				## cardinality = ~1..1
				defense_skill = int
				## cardinality = ~1..1
				maneuvering_skill = int
				## cardinality = ~1..1
				coordination_skill = int
				## cardinality = 0..1
				enum[character_ids] = value_set[unit_leader_ids]
				## cardinality = 0..1
				name = localisation
				### Sets starting traits for this leader.
				## cardinality = 0..1
				traits = {
					## cardinality = 0..inf
					<unit_leader_trait>
				}
				### Can the player see this character as a unit leader.
				## replace_scope = { this = character root = country }
				## cardinality = 0..1
				visible = {
					alias_name[trigger] = alias_match_left[trigger]
				}
			}
			### Advisor subtype
			## cardinality = 0..inf
			advisor = {
				slot = value[character_advisor_slot]
				### Optional, defaults to <character>_advisor_role
				## cardinality = 0..1
				idea_token = value_set[advisor_token]
				## cardinality = 0..1
				name = localisation
				## cardinality = 0..1
				desc = localisation
				## replace_scope = { this = character root = country }
				## cardinality = 0..1
				allowed = {
					alias_name[trigger] = alias_match_left[trigger]
				}
				## replace_scope = { this = character root = country }
				## cardinality = 0..1
				visible = {
					alias_name[trigger] = alias_match_left[trigger]
				}
				## replace_scope = { this = character root = country }
				## cardinality = 0..1
				available = {
					alias_name[trigger] = alias_match_left[trigger]
				}
				### Sets advsior effects.
				## cardinality = ~1..1
				traits = {
					## cardinality = 0..inf
					<country_leader_trait>
				}
				## cardinality = 0..1
				research_bonus = {
					## cardinality = 1..inf
					enum[tech_category] = float
				}
				## cardinality = 0..1
				ledger = enum[ledgers]
				### overrides default cost of advisor
				## cardinality = 0..1
				cost = int
				### cost to remove advisor, -1 prevents removal
				## cardinality = 0..1
				removal_cost = int
				## cardinality = 0..1
				## replace_scope = { this = character root = country }
				ai_will_do = {
					enum[base_factor] = variable_field
					alias_name[modifier_rule] = alias_match_left[modifier_rule]
				}
				## replace_scope = { this = character root = country }
				## cardinality = 0..inf
				on_add = {
					alias_name[effect] = alias_match_left[effect]
				}
				## replace_scope = { this = character root = country }
				## cardinality = 0..inf
				on_remove = {
					alias_name[effect] = alias_match_left[effect]
				}
				### While it is used in vanilla and doesn't throw errors, I can't get it to work reliably so I suspect there is some hard-coded strangeness going on here.
				## replace_scope = { this = character root = country }
				## cardinality = 0..1
				do_effect = {
					alias_name[trigger] = alias_match_left[trigger]
				}
				### Modifiers that are applied to tag while the advisor is active.
				## replace_scope = { this = character root = country }
				## cardinality = 0..1
				modifier = {
					alias_name[modifier] = alias_match_left[modifier]
				}
				## cardinality = 0..1
				can_be_fired = bool
			}
			### Scientist subtype
			## cardinality = 0..inf
			scientist = {
				## cardinality = 0..1
				desc = localisation
				## replace_scope = { this = character root = country }
				## cardinality = 0..1
				visible = {
					alias_name[trigger] = alias_match_left[trigger]
				}
				## cardinality = 0..1
				traits = {
					## cardinality = ~1..inf
					<scientist_trait>
				}
				## cardinality = 1..1
				skills = {
					## cardinality = 1..1
					<specialization> = int
				}
			}
		}
	}
}

enums = {
	enum[character_ids] = {
		id
		legacy_id
	}
	enum[character_portrait_types] = {
		civilian
		army
		navy
		operative
	}
	enum[character_portrait_sizes] = {
		large
		small
	}
}



alias[portraitset:large] = <spriteType>
alias[portraitset:large] = filepath
alias[portraitset:small] = <spriteType>
alias[portraitset:small] = filepath