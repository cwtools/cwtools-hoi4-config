###Effect not shown in tooltips
## scopes = { STATE COUNTRY }
# alias[effect:hidden_effect] = replace_me

###Grant experience to the scoped in unit leader. Cannot be used to remove experience. The unit leader is promoted to the next skill level if applicable
## scopes = { UNIT_LEADER }
alias[effect:gain_xp] = variable_field

###Delete units of a country. No tooltip is generated.
## scopes = { COUNTRY }
alias[effect:delete_unit] = {
	## cardinality = 0..1
	template = scalar
	## cardinality = 0..1
	id = variable_field
	## cardinality = 0..1
	state = <state>
	## cardinality = 0..1
	state = scope[state]
	## cardinality = 0..1
	disband = bool
}

###Delete units of a country. No tooltip is generated.
## scopes = { COUNTRY }
alias[effect:delete_unit] = {
	## cardinality = 0..1
	template = scalar
	## cardinality = 0..1
	id = variable_field
	state = <state>
	state = scope[state]
	## cardinality = 0..1
	disband = bool
}


###Delete units of a country. No tooltip is generated.
## scopes = { COUNTRY }
alias[effect:delete_unit] = {
	## cardinality = 0..1
	template = scalar
	id = variable_field
	## cardinality = 0..1
	state = <state>
	## cardinality = 0..1
	state = scope[state]
	## cardinality = 0..1
	disband = bool
}

###Free an operative. Can be used from a scope and a target that is either a country or a unit leader.
## scopes = { UNIT_LEADER }
alias[effect:free_operative] = enum[country_tags]

###Free an operative. Can be used from a scope and a target that is either a country or a unit leader.
## scopes = { UNIT_LEADER }
alias[effect:free_operative] = scope[country]

###Free an operative. Can be used from a scope and a target that is either a country or a unit leader.
## scopes = { COUNTRY }
alias[effect:free_operative] = value[unit_leader_ids]

###Free an operative. Can be used from a scope and a target that is either a country or a unit leader.
## scopes = { COUNTRY }
alias[effect:free_operative] = scope[unit_leader]

###Free a random captured operative of a certain tag by a certain tag. Can be used from a country scope of the operative in question.`all` is optional, default value is no - if set to yes it will free all operatives captured by the target country.
## scopes = { COUNTRY }
alias[effect:free_random_operative] = {
	captured_by = enum[country_tags]
	captured_by = scope[country]
	## cardinality = 0..1
	all = bool
}

###Create operative for country.
## scopes = { COUNTRY }
alias[effect:create_operative_leader] = {
	## cardinality = 0..1
	name = scalar
	## cardinality = 0..1
	desc = localisation
	## cardinality = 0..1
	picture = scalar
	## cardinality = 0..1
	portrait_path = scalar
	## cardinality = 0..1
	## severity = warning
	gfx = <spriteType>
	### Sets starting traits for this leader. If empty, sets no traits. If missing, assigns a random trait
	## cardinality = 0..1
	traits = {
		## cardinality = 0..inf
		<unit_leader_trait>
	}
	## cardinality = 0..1
	id = value_set[unit_leader_ids]
	## cardinality = 0..1
	available_to_spy_master = bool
	## cardinality = 0..1
	bypass_recruitment = bool
	## cardinality = 0..1
	nationalities = {
		## cardinality = 0..inf
		scope[country]
		## cardinality = 0..inf
		enum[country_tags]
	}
	## cardinality = 0..1
	portrait_tag_override = scope[country]
	## cardinality = 0..1
	portrait_tag_override = enum[country_tags]
	## cardinality = 0..1
	female = bool
	## cardinality = 0..1
	skill = int
}

###Capture an operative. Can be used from a scope and a target that is either a country or a unit leader.
## scopes = { COUNTRY }
alias[effect:capture_operative] = scope[unit_leader]

###Capture an operative. Can be used from a scope and a target that is either a country or a unit leader.
## scopes = { COUNTRY }
alias[effect:capture_operative] = {
	operative = scope[unit_leader]
	## cardinality = 0..1
	ignore_death_chance = bool
}

###Capture an operative. Can be used from a scope and a target that is either a country or a unit leader.
## scopes = { UNIT_LEADER }
alias[effect:capture_operative] = {
	captured_by = scope[country]
	captured_by = enum[country_tags]
}

###Executes children effects on a random operatives that fulfils the "limit" trigger.
## scopes = { COUNTRY OPERATION }
## push_scope = unit_leader
alias[effect:random_operative] = {
    ## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


###Executes children effects on operatives that fulfils the "limit" trigger. tooltip=key can be added to override tooltip title
## scopes = { COUNTRY OPERATION }
## push_scope = unit_leader
alias[effect:every_operative] = {
    ## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


###Sends to target scope specified fraction of equipment.
## scopes = { COUNTRY }
alias[effect:send_equipment_fraction] = {
	target = enum[country_tags]
	target = scope[country]
	value = variable_field
}

###Transfer units (air, army, navy) to another country. Also transfer the stockpiled equipment (you can set it to zero if it is undesired) as well as unit leaders.
## scopes = { COUNTRY }
alias[effect:transfer_units_fraction] = {
	target = enum[country_tags]
	target = scope[country]
	## cardinality = 0..1
	size = variable_field
	## cardinality = 0..1
	stockpile_ratio = variable_field
	## cardinality = 0..1
	army_ratio = variable_field
	## cardinality = 0..1
	navy_ratio = variable_field
	## cardinality = 0..1
	air_ratio = variable_field
	## cardinality = 0..1
	keep_unit_leaders = {
		## cardinality = ~1..inf
		value[unit_leader_ids]
	}
	## cardinality = 0..1
	## push_scope = any
	keep_unit_leaders_trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

###Removes a ideology leader as leader of his party, making the next in line the new party leader.
## scopes = { COUNTRY }
alias[effect:kill_ideology_leader] = <ideology>

###Removes a ideology leader as leader of his party, making the next in line the new party leader.
## scopes = { COUNTRY }
alias[effect:kill_ideology_leader] = variable_field

###Adds/removes days to 'days_remove' value of a decision.
## scopes = { COUNTRY }
alias[effect:add_days_remove] = {
	decision = <decision.timed>
	days = int_variable_field
}

###Add days to 'mission_timeout' value of a mission.
## scopes = { COUNTRY }
alias[effect:add_days_mission_timeout] = {
	mission = <decision.mission>
	days = int_variable_field
}

###Add resistance to a state.
## scopes = { STATE }
alias[effect:add_resistance] = variable_field

###Add compliance to a state.
## scopes = { STATE }
alias[effect:add_compliance] = variable_field

###Starts resistance activity for a core country. Use along with force_enable_resistance if you are enabling resistance in a state that is not possible (ie core).
## scopes = { STATE }
alias[effect:start_resistance] = enum[country_tags]

###Starts resistance activity for a core country. Use along with force_enable_resistance if you are enabling resistance in a state that is not possible (ie core).
## scopes = { STATE }
alias[effect:start_resistance] = scope[country]

###Starts resistance activity for a core country. Use along with force_enable_resistance if you are enabling resistance in a state that is not possible (ie core).
## scopes = { STATE }
alias[effect:start_resistance] = bool

###Cancels resistance activity for a core country. Use along with force_disable_resistance to disable resistance forever.
## scopes = { STATE }
alias[effect:cancel_resistance] = bool

###Set resistance of a state.
## scopes = { STATE }
alias[effect:set_resistance] = variable_field

###Set compliance of a state.
## scopes = { STATE }
alias[effect:set_compliance] = variable_field

###Adds a specific token against against another country.
## scopes = { COUNTRY }
alias[effect:add_operation_token] = {
	tag = scope[country]
	tag = enum[country_tags]
	token = <operation_token>
}

###Remove a specific token against against another country.
## scopes = { COUNTRY }
alias[effect:remove_operation_token] = {
	tag = scope[country]
	tag = enum[country_tags]
	token = <operation_token>
}

###Adds a random limited use tech bonus from country of categories that is it ahead in compared to you. It must have at least one category or folder. But it can contain any number of them in any combination. Note: if a country does not have a tech to be stolen a random tech bonus will be applied based on base_bonus.
## scopes = { COUNTRY }
alias[effect:steal_random_tech_bonus] = {
	## cardinality = 0..inf
	folder = enum[tech_folder]
	## cardinality = 0..inf
	category = enum[tech_category]
	## cardinality = 1..2
	enum[tech_bonus] = float
	## cardinality = 0..1
	base_bonus = float
	## cardinality = 0..1
	### swaps bonus types from instant to category depending on type as well as uses weights on tech progress
	dynamic = bool
	## cardinality = 0..1
	name = localisation
	## cardinality = 0..1
	uses = int[1..32767]
	## cardinality = 0..1
	### instant unlock instead of bonus
	instant = bool
	target = enum[country_tags]
	target = scope[country]
}

###Teleport armies in state to another state or province.
## scopes = { STATE }
alias[effect:teleport_armies] = {
	## cardinality = 0..1
	## push_scope = country
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	to_state = <state>
	to_state = scope[state]
}

###Teleport armies in state to another state or province.
## scopes = { STATE }
alias[effect:teleport_armies] = {
	## cardinality = 0..1
	## push_scope = country
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	to_state_array = value_set[array]
}

###Teleport armies in state to another state or province.
## scopes = { STATE }
alias[effect:teleport_armies] = {
	## cardinality = 0..1
	## push_scope = country
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	to_province = enum[provinces]
}

###Teleport armies in state to another state or province.
## scopes = { STATE }
alias[effect:teleport_armies] = {
	## cardinality = 0..1
	## push_scope = country
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

###Executes children effects on every controlled state that fulfils the "limit" trigger. tooltip=key can be added to override tooltip title.
## scopes = { COUNTRY }
## push_scope = state
alias[effect:every_controlled_state] = {
    ## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	tooltip = localisation
	alias_name[effect] = alias_match_left[effect]
}


###Sets the controller of provinces belong to a state and fulfils a condition. No tooltip is built.
## scopes = { STATE }
alias[effect:set_state_province_controller] = {
	controller = enum[country_tags]
	controller = scope[country]
	## cardinality = 0..1
	## push_scope = country
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

###Reserves a dynamic country so it won't be recycled for civil wars. A dynamic country with no owned states must be reserved after it is created and unreserved once it is no longer going to be used.
## scopes = { COUNTRY }
alias[effect:reserve_dynamic_country] = bool

###Calculates the highest scored country that is defined in a country scorer and sets it to a variable.
## scopes = { COUNTRY }
alias[effect:get_highest_scored_country_temp] = {
	scorer = <country_scorer>
	## cardinality = 0..1
	var = value_set[variable]
}

###Creates a dynamic country and runs child effects on it.
## scopes = { any }
## push_scope = country
alias[effect:create_dynamic_country] = {
	original_tag = enum[country_tags]
	original_tag = scope[country]
	## cardinality = 0..1
	copy_tag = enum[country_tags]
	## cardinality = 0..1
	copy_tag = scope[country]
	alias_name[effect] = alias_match_left[effect]
}

###Calculates & sorts all countries in a country scorer and stores them and their scores in temp arrays.
## scopes = { COUNTRY }
alias[effect:get_sorted_scored_countries_temp] = {
	scorer = <country_scorer>
	## cardinality = 0..1
	array = value_set[array]
	## cardinality = 0..1
	scores = value_set[array]
}

###Executes children effects on random occupied country that fulfils the "limit" trigger.
## scopes = { COUNTRY }
## push_scope = country
alias[effect:random_occupied_country] = {
    ## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


###Executes children effects on every occupied country that fulfils the "limit" trigger. tooltip=key can be defined to override tooltip title.
## scopes = { COUNTRY }
## push_scope = country
alias[effect:every_occupied_country] = {
    ## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	tooltip = localisation
	alias_name[effect] = alias_match_left[effect]
}


###Adds resistance target to the scoped state.
## scopes = { STATE }
alias[effect:add_resistance_target] = {
	amount = variable_field
	## cardinality = ~0..1
	tooltip = localisation
	## cardinality = 0..1
	id = value_set[resistance_target]
	## cardinality = 0..1
	days = int_variable_field
	## cardinality = 0..1
	occupier = scope[country]
	## cardinality = 0..1
	occupier = enum[country_tags]
	## cardinality = 0..1
	occupied = scope[country]
	## cardinality = 0..1
	occupied = enum[country_tags]
}

###Removes a previously added resistance target using its id. No tooltips are generated.
## scopes = { STATE }
alias[effect:remove_resistance_target] = value[resistance_target]

###Calculates the highest scored country that is defined in a country scorer and sets it to a temp variable.
## scopes = { COUNTRY }
alias[effect:get_highest_scored_country] = {
	scorer = <country_scorer>
	## cardinality = 0..1
	var = value_set[variable]
}

###Calculates & sorts all countries in a country scorer and stores them and their scores in arrays.
## scopes = { COUNTRY }
alias[effect:get_sorted_scored_countries] = {
	scorer = <country_scorer>
	## cardinality = 0..1
	array = value_set[array]
	## cardinality = 0..1
	scores = value_set[array]
}

###Executes children effects on a random country with original tag.
## scopes = { any }
## push_scope = country
alias[effect:random_country_with_original_tag] = {
	original_tag_to_check = enum[country_tags]
	original_tag_to_check = scope[country]
    ## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


###Executes children effects on a all countries with original tag. tooltip=key can be defined to override tooltip title.
## scopes = { any }
## push_scope = country
alias[effect:every_country_with_original_tag] = {
	original_tag_to_check = enum[country_tags]
	original_tag_to_check = scope[country]
    ## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


###Add decryption against a target country.
## scopes = { COUNTRY }
alias[effect:add_decryption] = {
	target = enum[country_tags]
	target = scope[country]

	amount = variable_field
}

###Add decryption against a target country.
## scopes = { COUNTRY }
alias[effect:add_decryption] = {
	target = enum[country_tags]
	target = scope[country]

	ratio = variable_field
}


###Deletes units that uses a specific template.
## scopes = { COUNTRY }
alias[effect:delete_units] = {
	division_template = scalar
	## cardinality = 0..1
	disband = bool
}

###Force enables resistance for scoped state. The resistance will be active even if other conditions doesn't satisfy (even if it is core or resistance check trigger is false).
## scopes = { STATE }
alias[effect:force_enable_resistance] = scope[country]

###Force enables resistance for scoped state. The resistance will be active even if other conditions doesn't satisfy (even if it is core or resistance check trigger is false).
## scopes = { STATE }
alias[effect:force_enable_resistance] = enum[country_tags]

###Force enables resistance for scoped state. The resistance will be active even if other conditions doesn't satisfy (even if it is core or resistance check trigger is false).
## scopes = { STATE }
alias[effect:force_enable_resistance] = {
	## cardinality = 0..1
	clear = bool
	occupier = scope[country]
	occupier = enum[country_tags]
	## cardinality = 0..1
	occupied = scope[country]
	## cardinality = 0..1
	occupied = enum[country_tags]
}

###Force enables resistance for scoped state. The resistance will be active even if other conditions doesn't satisfy (even if it is core or resistance check trigger is false).
## scopes = { STATE }
alias[effect:force_enable_resistance] = {
	## cardinality = 0..1
	clear = bool
	## cardinality = 0..1
	occupier = scope[country]
	## cardinality = 0..1
	occupier = enum[country_tags]
	occupied = scope[country]
	occupied = enum[country_tags]
}

###Force disables resistance for scoped state. The resistance will be active even if other conditions doesn't satisfy (even if it is core or resistance check trigger is false).
## scopes = { STATE }
alias[effect:force_disable_resistance] = scope[country]

###Force disables resistance for scoped state. The resistance will be active even if other conditions doesn't satisfy (even if it is core or resistance check trigger is false).
## scopes = { STATE }
alias[effect:force_disable_resistance] = enum[country_tags]

###Force disables resistance for scoped state. The resistance will be active even if other conditions doesn't satisfy (even if it is core or resistance check trigger is false).
## scopes = { STATE }
alias[effect:force_disable_resistance] = {
	## cardinality = 0..1
	clear = bool
	occupier = scope[country]
	occupier = enum[country_tags]
	## cardinality = 0..1
	occupied = scope[country]
	## cardinality = 0..1
	occupied = enum[country_tags]
}

###Force disables resistance for scoped state. The resistance will be active even if other conditions doesn't satisfy (even if it is core or resistance check trigger is false).
## scopes = { STATE }
alias[effect:force_disable_resistance] = {
	## cardinality = 0..1
	clear = bool
	## cardinality = 0..1
	occupier = scope[country]
	## cardinality = 0..1
	occupier = enum[country_tags]
	occupied = scope[country]
	occupied = enum[country_tags]
}

###Force disables resistance for scoped state. The resistance will be active even if other conditions doesn't satisfy (even if it is core or resistance check trigger is false).
## scopes = { STATE }
alias[effect:force_disable_resistance] = {
	clear = yes
	## error_if_only_match = This has no effect
	## severity = info
	## cardinality = 0..1
	clear = no
	## cardinality = 0..1
	occupier = scope[country]
	## cardinality = 0..1
	occupier = enum[country_tags]
	## cardinality = 0..1
	occupied = scope[country]
	## cardinality = 0..1
	occupied = enum[country_tags]
}

###Create an Intelligence Agency for the country, if it is not already done.
## scopes = { COUNTRY }
alias[effect:create_intelligence_agency] = yes

###Create an Intelligence Agency for the country, if it is not already done.
## scopes = { COUNTRY }
alias[effect:create_intelligence_agency] = {
  name = localisation
  icon = <spriteType>
}

###Add an upgrade to the Intelligence Agency (must be created).
## scopes = { COUNTRY }
alias[effect:upgrade_intelligence_agency] = <intelligence_agency_upgrade>

###Create a ship from another country and assign it to the reserve fleet. 'creator' is optional. If not set, it will be the scoped country. 'name' is optional.
## scopes = { COUNTRY }
alias[effect:create_ship] = {
	type = <equipment.naval_equip>
	equipment_variant = scalar
	## cardinality = 0..1
	creator = enum[country_tags]
	## cardinality = 0..1
	creator = scope[country]
	## cardinality = 0..1
	name = scalar
}

###Set current country as spy master of its faction.
## scopes = { COUNTRY }
alias[effect:set_faction_spymaster] = bool

###Lock all the division template at the country level. Note that you need to unlock them in the same way (You can't use 'set_division_template_lock' individually, because the lock at the country level will not be removed).
## scopes = { COUNTRY }
alias[effect:country_lock_all_division_template] = bool

###Randomize a temporary variable.
## scopes = { any }
alias[effect:randomize_temp_variable] = value_set[variable]

###Randomize a temporary variable.
## scopes = { any }
alias[effect:randomize_temp_variable] = {
	var = value_set[variable]
	distribution = uniform
}

###Randomize a temporary variable.
## scopes = { any }
alias[effect:randomize_temp_variable] = {
	var = value_set[variable]
	distribution = binomial
}

###Randomize a temporary variable.
## scopes = { any }
alias[effect:randomize_temp_variable] = {
	var = value_set[variable]
	distribution = uniform
	min = variable_field_32
	max = variable_field_32
}

###Randomize a temporary variable.
## scopes = { any }
alias[effect:randomize_temp_variable] = {
	var = value_set[variable]
	distribution = binomial
	min = variable_field_32
	max = variable_field_32
}

###Randomize a temporary variable.
## scopes = { any }
alias[effect:randomize_temp_variable] = {
	var = value_set[variable]
	distribution = binomial
	## cardinality = 0..1
	min = variable_field_32
	lambda = variable_field_32
}

###Randomize a variable.
## scopes = { any }
alias[effect:randomize_variable] = variable_field_32

###Randomize a variable.
## scopes = { any }
alias[effect:randomize_variable] = {
	var = variable_field_32
	distribution = uniform
}

###Randomize a variable.
## scopes = { any }
alias[effect:randomize_variable] = {
	var = variable_field_32
	distribution = binomial
}

###Randomize a variable.
## scopes = { any }
alias[effect:randomize_variable] = {
	var = variable_field_32
	distribution = uniform
	min = variable_field_32
	max = variable_field_32
}

###Randomize a variable.
## scopes = { any }
alias[effect:randomize_variable] = {
	var = variable_field_32
	distribution = binomial
	min = variable_field_32
	max = variable_field_32
}

###Randomize a variable.
## scopes = { any }
alias[effect:randomize_variable] = {
	var = variable_field_32
	distribution = binomial
	## cardinality = 0..1
	min = variable_field_32
	lambda = variable_field_32
}

###Harm an operative. The specified value is subject to modifiers.
## scopes = { UNIT_LEADER }
alias[effect:harm_operative_leader] = variable_field

###Force an operative into hiding, preventing them from performing mission. The specified values is subject to modifiers.
## scopes = { UNIT_LEADER }
alias[effect:force_operative_leader_into_hiding] = variable_field

###Add the specified amount of intel over a specified country.
## scopes = { COUNTRY }
alias[effect:add_intel] = {
	target = enum[country_tags]
	target = scope[country]
	## cardinality = 0..1
	civilian_intel = variable_field
	## cardinality = 0..1
	army_intel = variable_field
	## cardinality = 0..1
	navy_intel = variable_field
	## cardinality = 0..1
    airforce_intel = variable_field
  }

###Fires a operative leader event for owner country.
## scopes = { UNIT_LEADER }
alias[effect:operative_leader_event] = {
	### The event to fire.
	id = <event.operative_leader_event>

	### The originator of the event (default to the owner of the operative)
	## cardinality = 0..1
	originator = enum[country_tags]
	### The originator of the event (default to the owner of the operative)
	## cardinality = 0..1
	originator = scope[country]

	### The recipient of the event (default to the owner of the operative)
	## cardinality = 0..1
	recipient = enum[country_tags]
	### The recipient of the event (default to the owner of the operative)
	## cardinality = 0..1
	recipient = scope[country]

	### The number of hours to wait before firing the event. Note: hours, days, and months can all be used and will simply be added together.
	## cardinality = 0..1
	hours = variable_field

	### The number of days to wait before firing the event. Note: hours, days, and months can all be used and will simply be added together.
	## cardinality = 0..1
	days = variable_field

	### The number of months to wait before firing the event. Note: hours, days, and months can all be used and will simply be added together.
	## cardinality = 0..1
	months = variable_field

	### A random amount of hours to be added to the delay before firing, from 0 up to but not including random_hours. Equivalent to random_hours. Preserverd for backwards compatibility.
	## cardinality = 0..1
	random = variable_field

	### A random amount of hours to be added to the delay before firing, from 0 up to but not including random_hours.
	## cardinality = 0..1
	random_hours = variable_field

	### A random amount of days to be added to the delay before firing, from 0 up to but one hour less than random_days.
	## cardinality = 0..1
	random_days = variable_field

	### Specify a set of child effects to execute as part of this effect, with a percentage chance of randomly happening or not (as a group, not individually).
	## cardinality = 0..1
	random = {
		chance = variable_field
		alias_name[effect] = alias_match_left[effect]
	}

	### Manually specify which tooltip to use for this effect.
	## cardinality = 0..1
	tooltip = localisation

	### Set the scope of the From in the scripted localization
	## cardinality = 0..1
	set_from = enum[country_tags]
	### Set the scope of the From in the scripted localization
	## cardinality = 0..1
	set_from = scope[country]

	### Set the scope of the From.From in the scripted localization
	## cardinality = 0..1
	set_from_from = enum[country_tags]
	### Set the scope of the From.From in the scripted localization
	## cardinality = 0..1
	set_from_from = scope[country]

	### Set the scope of the Root in the scripted localization
	## cardinality = 0..1
	set_root = enum[country_tags]
	### Set the scope of the Root in the scripted localization
	## cardinality = 0..1
	set_root = scope[country]
}

###Kills an operative. This will temporarily lock the slot they occupy.
## scopes = { COUNTRY }
alias[effect:kill_operative] = scope[unit_leader]

###Kills an operative. This will temporarily lock the slot they occupy.
## scopes = { COUNTRY }
alias[effect:kill_operative] = {
	operative = scope[unit_leader]
}

###Kills an operative. This will temporarily lock the slot they occupy.
## scopes = { UNIT_LEADER }
alias[effect:kill_operative] = {
	killed_by = scope[country]
	killed_by = enum[country_tags]
}

###Executes children effects on random controlled state that fulfils the "limit" trigger. prioritize = { <stateID> <stateID> } to pick those states first if they fulfil the limit.
## scopes = { COUNTRY }
## push_scope = state
alias[effect:random_controlled_state] = {
	## cardinality = 0..1
	prioritize = {
		## cardinality = 1..inf
		<state>
	}
    ## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


###Forces the refresh of the tree layout for the scoped country.
## scopes = { COUNTRY }
alias[effect:mark_focus_tree_layout_dirty] = yes

###Adds a civil war target to a specific country.
## scopes = { COUNTRY }
alias[effect:add_civil_war_target] = scope[country]

###Adds a civil war target to a specific country.
## scopes = { COUNTRY }
alias[effect:add_civil_war_target] = enum[country_tags]

###Modulos a temp variable with another.
## scopes = { any }
alias[effect:modulo_temp_variable] = {
	value_set[variable] = variable_field_32
}

###mMdulos a temp variable with another.
## scopes = { any }
alias[trigger:modulo_temp_variable] = {
	var = value_set[variable]
	value = variable_field_32
}

###Modulos a variable with another.
## scopes = { any }
alias[effect:modulo_variable] = {
	value_set[variable] = variable_field_32
}

###Modulos a variable with another.
## scopes = { any }
alias[trigger:modulo_variable] = {
	var = value_set[variable]
	value = variable_field_32
}

###Adds the collaboration in a target country with our currently scoped country.
## scopes = { COUNTRY }
alias[effect:add_collaboration] = {
	target = scope[country]
	target = enum[country_tags]
	value = variable_field
}

###Sets the collaboration in a target country with our currently scoped country.
## scopes = { COUNTRY }
alias[effect:set_collaboration] = {
	target = scope[country]
	target = enum[country_tags]
	value = variable_field
}

###Special effect for executing the Coordinated Strike Operation. Amount determines how often the simulation is run.
## scopes = { OPERATION }
alias[effect:execute_operation_coordinated_strike] = {
	amount = int
}

###Add the specified nationality to the scoped-in operative.
## scopes = { UNIT_LEADER }
alias[effect:add_nationality] = scope[country]

###Add the specified nationality to the scoped-in operative.
## scopes = { UNIT_LEADER }
alias[effect:add_nationality] = enum[country_tags]

###The scoped in country recall the volunteers sent to the target country.
## scopes = { COUNTRY }
alias[effect:recall_volunteers_from] = scope[country]

###The scoped in country recall the volunteers sent to the target country.
## scopes = { COUNTRY }
alias[effect:recall_volunteers_from] = enum[country_tags]

###An operative is turned by the specified country. This transfers the operative to the target country and make it appear as killed to the country of origin (increases the death counter and lock the slot). This fires the on_action on_operative_death with as killer the target country. If the target country is the owner of the operative, this has no effect and an error is logged. WARN: the on_action might execute immediately, before any effect listed after the occurrence of turn_operative.
## scopes = { COUNTRY }
alias[effect:turn_operative] = scope[unit_leader]

###An operative is turned by the specified country. This transfers the operative to the target country and make it appear as killed to the country of origin (increases the death counter and lock the slot). This fires the on_action on_operative_death with as killer the target country. If the target country is the owner of the operative, this has no effect and an error is logged. WARN: the on_action might execute immediately, before any effect listed after the occurrence of turn_operative.
## scopes = { COUNTRY }
alias[effect:turn_operative] = {
	operative = scope[unit_leader]
}

###An operative is turned by the specified country. This transfers the operative to the target country and make it appear as killed to the country of origin (increases the death counter and lock the slot). This fires the on_action on_operative_death with as killer the target country. If the target country is the owner of the operative, this has no effect and an error is logged. WARN: the on_action might execute immediately, before any effect listed after the occurrence of turn_operative.
## scopes = { UNIT_LEADER }
alias[effect:turn_operative] = {
	turned_by = scope[country]
	turned_by = enum[country_tags]
}

###Set initial garrison strength.
## scopes = { STATE }
alias[effect:set_garrison_strength] = variable_field

###Releases specified country as a puppet using your owned or controlled states.
## scope = { COUNTRY }
alias[effect:release_on_controlled] = scope[country]

###Releases specified country as a puppet using your owned or controlled states.
## scope = { COUNTRY }
alias[effect:release_on_controlled] = enum[country_tags]

###Releases specified country as puppet using states you own or control.
## scope = { COUNTRY }
alias[effect:release_puppet_on_controlled] = scope[country]

###Releases specified country as puppet using states you own or control.
## scope = { COUNTRY }
alias[effect:release_puppet_on_controlled] = enum[country_tags]

###Releases specified country using your owned states.
## scope = { COUNTRY }
alias[effect:release] = scope[country]

###Releases specified country using your owned states.
## scope = { COUNTRY }
alias[effect:release] = enum[country_tags]

###Changes the name of country leader. No tooltip is generated.
## scope = { COUNTRY }
alias[effect:set_country_leader_name] = {
	name = localisation_inline
	## cardinality = 0..1
	ideology = <ideology>
	## cardinality = 0..1
	ideology = variable_field
}

###Changes the portrait of country leader. No tooltip is generated.
## scope = { COUNTRY }
alias[effect:set_country_leader_portrait] = {
	portrait = <spriteType>
	## cardinality = 0..1
	ideology = <ideology>
	## cardinality = 0..1
	ideology = variable_field
}

###Changes the description of country leader. No tooltip is generated.
## scope = { COUNTRY }
alias[effect:set_country_leader_description] = {
	desc = localisation
	## cardinality = 0..1
	ideology = <ideology>
	## cardinality = 0..1
	ideology = variable_field
}

###Changes the name of unit leader. No tooltip is generated.
## scope = { unit_leader }
alias[effect:set_leader_name] = localisation_inline

###Changes the portrait of unit leader. No tooltip is generated.
## scope = { unit_leader }
alias[effect:set_leader_portrait] = <spriteType>

###Changes the description of unit leader. No tooltip is generated.
## scope = { character unit_leader }
alias[effect:set_leader_description] = localisation

###Sets a variable to a random value.
## scopes = { any }
alias[effect:set_variable_to_random] = value_set[variable]

###Sets a variable to a random value.
## scopes = { any }
alias[effect:set_variable_to_random] = {
	var = value_set[variable]
	## cardinality = 0..1
	min = variable_field_32
	## cardinality = 0..1
	max = variable_field_32
	## cardinality = 0..1
	integer = bool
}

###Sets a temp variable to a random value.
## scopes = { any }
alias[effect:set_temp_variable_to_random] = value_set[variable]

###Sets a temp variable to a random value.
## scopes = { any }
alias[effect:set_temp_variable_to_random] = {
	var = value_set[variable]
	## cardinality = 0..1
	min = variable_field_32
	## cardinality = 0..1
	max = variable_field_32
	## cardinality = 0..1
	integer = bool
}

###Adds victory point to province.
## scopes = { any }
alias[effect:add_victory_points] = {
	province = enum[provinces]
	value = variable_field_32
}

###Sets victory point to province.
## scopes = { any }
alias[effect:set_victory_points] = {
	province = enum[provinces]
	value = variable_field_32
}

###Removes wargoals of specified type for country in scope.
## scopes = { country }
alias[effect:remove_wargoal] = {
	target = scope[country]
	target = enum[country_tags]
	type = <wargoal>
	type = all
}

###Damages units for given conditions.
## scopes = { any }
alias[effect:damage_units] = {
	## cardinality = 0..1
	province = enum[provinces]
	## cardinality = 0..1
	state = <state>
	## cardinality = 0..1
	state = scope[state]
	## cardinality = 0..1
	region = <strategic_region>

	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	damage = float[0.0..1.0]
	## cardinality = 0..1
	org_damage = float[0.0..1.0]
	## cardinality = 0..1
	str_damage = float[0.0..1.0]
	ratio = bool
	## cardinality = 0..1
	army = bool
	## cardinality = 0..1
	navy = bool
}