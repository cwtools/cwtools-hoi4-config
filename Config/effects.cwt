## scope = any
alias[effect:<scripted_effect>] = yes

### Adds the stability to the country in scope. Example: add_stability = 5.
## scope = country
alias[effect:add_stability] = variable_field

### Adds manpower to the country in scope or locally on a state if in state scope.
## scope = { state country }
alias[effect:add_manpower] = int_variable_field

### Shows just a custom tooltip.
## scope = any
alias[effect:custom_effect_tooltip] = localisation

### move capital to state.
## scope = country
alias[effect:set_capital] = scope[state]
### move capital to state.
## scope = country
alias[effect:set_capital] = <state>

### add core on state.
## scope = country
alias[effect:add_state_core] = scope[state]
### add core on state.
## scope = country
alias[effect:add_state_core] = <state>

### remove core on state.
## scope = country
alias[effect:remove_state_core] = scope[state]
### remove core on state.
## scope = country
alias[effect:remove_state_core] = <state>

### Changes player to other country.
## scope = country
alias[effect:change_tag_from] = scope[country]
### Changes player to other country.
## scope = country
alias[effect:change_tag_from] = enum[country_tags]

### Adds static modifiers to specified province.
## scope = { state }
alias[effect:add_province_modifier] = {
	static_modifiers = {
		## cardinality = 1..inf
		<static_modifier>
	}
	province = {
		all_provinces = yes
		## cardinality = 0..1
		limit_to_coastal = yes
		## cardinality = 0..1
		limit_to_naval_base = yes
		## cardinality = 0..1
		limit_to_border = yes
		## cardinality = 0..1
		limit_to_victory_point = yes
	}
	province = {
		## cardinality = ~1..inf
		id = enum[provinces]
	}
}

### Removes static modifiers from specified province.
## scope = { state }
alias[effect:remove_province_modifier] = {
	static_modifiers = {
		## cardinality = 1..inf
		<static_modifier>
	}
	province = {
		all_provinces = yes
		## cardinality = 0..1
		limit_to_coastal = yes
		## cardinality = 0..1
		limit_to_naval_base = yes
		## cardinality = 0..1
		limit_to_border = yes
		## cardinality = 0..1
		limit_to_victory_point = yes
	}
	province = {
		## cardinality = ~1..inf
		id = enum[provinces]
	}
}

### Adds static modifiers to specified province.
## scope = { state }
alias[effect:add_province_modifier] = {
	enum[provinces] = <static_modifier>
}

### Removes static modifiers fom specified province.
## scope = { state }
alias[effect:remove_province_modifier] = {
	enum[provinces] = <static_modifier>
}

### set country flag.
## scope = country
alias[effect:set_country_flag] = value_set[country_flag]
### set country flag.
## scope = country
alias[effect:set_country_flag] = {
	flag = value_set[country_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	days = int
}

### clear country flag.
## scope = country
## severity = warning
alias[effect:clr_country_flag] = value[country_flag]

### set global flag.
## scope = any
alias[effect:set_global_flag] = value_set[global_flag]
### set global flag.
## scope = any
alias[effect:set_global_flag] = {
	flag = value_set[global_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	days = int
}

### clear global flag.
## scope = any
## severity = warning
alias[effect:clr_global_flag] = value[global_flag]

### Removes specified building in specified state or province.
## scope = state
alias[effect:remove_building] = {
	type = <building>
	level = int_variable_field
}

### releases specified country as a free country.
## scope = country
alias[effect:release] = scope[country]
### releases specified country as a free country.
## scope = country
alias[effect:release] = enum[country_tags]

### Executes children effects on every country that fulfills the "limit" trigger.
## scope = any
## push_scope = any
alias[effect:every_country] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on random country that fulfills the "limit" trigger.
## scope = any
## push_scope = any
alias[effect:random_country] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on every neighbor country that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:every_neighbor_country] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on random neighbor country that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:random_neighbor_country] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on random enemy country that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:every_enemy_country] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on random enemy country that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:random_enemy_country] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### fires a country event.
## scope = country
alias[effect:country_event] = {
	id = <event.country_event>
	## cardinality = 0..1
	enum[hours_days_months] = int
	## cardinality = 0..1
	random = int
}

### fires a country event.
## scope = country
alias[effect:country_event] = <event.country_event>

### fires a state event.
## scope = state
alias[effect:state_event] = {
	id = <event.state_event>
	## cardinality = 0..1
	enum[hours_days_months] = int
	## cardinality = 0..1
	random = int
	trigger_for = scope[country]
	trigger_for = enum[country_tags]
}

### fires a state event.
## scope = state
alias[effect:state_event] = <event.state_event>


### Sets a variable to a value or another variable.
## scope = any
alias[effect:set_variable] = {
	value_set[variable] = variable_field
	value_set[variable] = scope_field
}
### Sets a variable to a value or another variable.
## scope = any
alias[effect:set_variable] = {
	var = value_set[variable]
	value = variable_field
	value = scope_field
}

### a random effect.
## scope = any
alias[effect:random] = {
	chance = int
	alias_name[modifier_rule] = alias_match_left[modifier_rule]
	alias_name[effect] = alias_match_left[effect]
}

### a random effect.
## scope = any
alias[effect:random_list] = {
	## cardinality = 1..inf
	int = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
		alias_name[effect] = alias_match_left[effect]
	}
}


### white peaces the two countries if at war.
## scope = country
alias[effect:white_peace] = scope[country]
### white peaces the two countries if at war.
## scope = country
alias[effect:white_peace] = enum[country_tags]

### white peaces the two countries if at war.
## scope = country
alias[effect:white_peace] = {
	tag = scope[country]
	tag = enum[country_tags]
	## cardinality = 0..1
	tooltip = localisation
	## cardinality = 0..1
	message = localisation
}

### a conditional effect.
## scope = any
alias[effect:if] = {
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

### use after (else_)if to check other triggers only if first if fails.
alias[effect:else_if] = {
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

### use after (else_)if for a catch-all case.
alias[effect:else] = {
	alias_name[effect] = alias_match_left[effect]
}

### add claim on state.
## scope = country
alias[effect:add_state_claim] = scope[state]
### add claim on state.
## scope = country
alias[effect:add_state_claim] = <state>

### remove claim on state.
## scope = country
alias[effect:remove_state_claim] = scope[state]
### remove claim on state.
## scope = country
alias[effect:remove_state_claim] = <state>

### Add opinion modifier(s) to target(s).
## scope = country
alias[effect:add_opinion_modifier] = {
	target = scope[country]
	target = enum[country_tags]
	modifier = <opinion>
	## cardinality = 0..1
	days = int
}

### Remove opinion modifier from target.
## scope = country
alias[effect:remove_opinion_modifier] = {
	target = scope[country]
	target = enum[country_tags]
	modifier = <opinion>
}

### creates a leader and adds it to proper party in country.
## scope = country
alias[effect:create_country_leader] = {
	name = scalar
	## cardinality = 0..1
	desc = localisation
	## cardinality = 0..1
	picture = scalar
	## cardinality = 0..1
	picture_path = scalar
	ideology = enum[sub_ideology]
	## cardinality = 0..1
	expire = date_field
	## cardinality = 0..1
	traits = {
		## cardinality = ~1..inf
		<country_leader_trait>
	}
	## cardinality = 0..1
	id = value_set[unit_leader_ids]
	## cardinality = 0..1
	female = bool
}

### Print message to game.log - Can be localized.
## scope = any
alias[effect:log] = localisation

### Create unit effect, just like in OOB, from effect with specified parameters: owner, prioritize_location.
## scope = state
#"name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 0.5"
alias[effect:create_unit] = {
	division = scalar
	owner = scope[country]
	owner = enum[country_tags]
	## cardinality = 0..1
	prioritize_location = enum[provinces]
}

### Plays sound effect.
## scope = any
alias[effect:sound_effect] = scalar

### Promotes general to field marshal.
## scope = unit_leader
alias[effect:promote_leader] = bool

### Randomize weather effect.
## scope = any
alias[effect:randomize_weather] = int

### Adds a division template to country.
## scope = country
alias[effect:division_template] = {
	name = localisation
	## cardinality = 0..1
	division_names_group = <division_name>
	## cardinality = 0..1
	is_locked = bool
	regiments = {
		## cardinality = 1..25
		<unit> = { x = int[0..5] y = int[0..5] }
	}
	## cardinality = 0..1
	support = {
		## cardinality = 0..5
		<unit> = { x = 0 y = int[0..5] }
	}
	## cardinality = 0..1
	template_counter = int
	## cardinality = 0..1
	priority = int
}

### change the ideology of active leader.
## scope = country
alias[effect:set_country_leader_ideology] = enum[sub_ideology]

### add trait to active country leader.
## scope = country
alias[effect:add_country_leader_trait] = <country_leader_trait>

### remove trait from active country leader.
## scope = country
alias[effect:remove_country_leader_trait] = <country_leader_trait>

### set properties of a political party.
## scope = country
alias[effect:set_political_party] = {
	ideology = <ideology>
	popularity = variable_field
}

### Set country political status.
## scope = country
alias[effect:set_politics] = {
	## cardinality = 0..1
	ruling_party = <ideology>
	## cardinality = 0..1
	elections_allowed = bool
	## cardinality = 0..1
	last_election = date_field
	## cardinality = 0..1
	election_frequency = int
}

### Set country political party popilarities.
## scope = country
alias[effect:set_popularities] = {
	## cardinality = 1..inf
	<ideology> = variable_field
}

### add idea(s) to country.
## scope = country
alias[effect:add_ideas] = enum[idea_name]
### add idea(s) to country.
## scope = country
alias[effect:add_ideas] = {
	## cardinality = 1..inf
	enum[idea_name]
}

### remove idea(s) from country.
## scope = country
alias[effect:remove_ideas] = enum[idea_name]
### remove idea(s) from country.
## scope = country
alias[effect:remove_ideas] = {
	## cardinality = 1..inf
	enum[idea_name]
}

### add political power to country.
## scope = country
alias[effect:add_political_power] = variable_field

### set political power for country.
## scope = country
alias[effect:set_political_power] = variable_field

### sets technology level(s) on country.
## scope = country
alias[effect:set_technology] = {
	## cardinality = 1..inf
	<technology> = int[0..1]
}

### create navy leader for country.
## scope = country
alias[effect:create_navy_leader] = {
	name = scalar
	## cardinality = 0..1
	desc = localisation
	## cardinality = 0..1
	picture = scalar
	## cardinality = 0..1
	portrait_path = scalar
	## cardinality = 0..1
	## severity = warning
	gfx = <spriteType>
	## cardinality = 0..1
	traits = {
		## cardinality = ~1..inf
		<unit_leader_trait>
	}
	## cardinality = ~1..1
	skill = int
	## cardinality = ~1..1
	attack_skill = int
	## cardinality = ~1..1
	defense_skill = int
	## cardinality = ~1..1
	maneuvering_skill = int
	## cardinality = ~1..1
	coordination_skill = int
	## cardinality = 0..1
	id = value_set[unit_leader_ids]
	## cardinality = 0..1
	female = bool
}

### remove trait from unit leader.
## scope = unit_leader
alias[effect:remove_unit_leader_trait] = <unit_leader_trait>

### add trait to unit leader.
## scope = unit_leader
alias[effect:add_unit_leader_trait] = <unit_leader_trait>

### adds new namespace.
## scope = any
alias[effect:add_namespace] = scalar

### set owner for state.
## scope = country
alias[effect:set_state_owner] = scope[state]
### set owner for state.
## scope = country
alias[effect:set_state_owner] = <state>

### puppets specified country.
## scope = country
alias[effect:puppet] = scope[country]
### puppets specified country.
## scope = country
alias[effect:puppet] = enum[country_tags]

### set controller for state.
## scope = country
alias[effect:set_state_controller] = scope[state]
### set controller for state.
## scope = country
alias[effect:set_state_controller] = <state>

### set owner and controller for state.
## scope = country
alias[effect:transfer_state] = scope[state]
### set owner and controller for state.
## scope = country
alias[effect:transfer_state] = <state>

### set state flag.
## scope = state
alias[effect:set_state_flag] = value_set[state_flag]
### set state flag.
## scope = state
alias[effect:set_state_flag] = {
	flag = value_set[state_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	days = int
}

### clear state flag.
## scope = state
## severity = warning
alias[effect:clr_state_flag] = value[state_flag]

### create faction of specified name.
## scope = country
alias[effect:create_faction] = localisation

### add nukes to country.
## scope = country
alias[effect:add_nuclear_bombs] = int_variable_field

### annex the target country.
## scope = country
alias[effect:annex_country] = {
	target = scope[country]
	target = enum[country_tags]
	## cardinality = 0..1
	transfer_troops = bool
}

### Starts building construction for amount of levels in specified state or province.
## scope = state
alias[effect:add_building_construction] = {
	type = <building.state>
	level = int_variable_field
	## cardinality = 0..1
	instant_build = bool
}

### Starts building construction for amount of levels in specified state or province.
## scope = state
alias[effect:add_building_construction] = {
	type = <building.provincial>
	level = int_variable_field
	## cardinality = 0..1
	instant_build = bool
	province = enum[provinces]
	province = {
		all_provinces = yes
		## cardinality = 0..1
		limit_to_coastal = yes
		## cardinality = 0..1
		limit_to_naval_base = yes
		## cardinality = 0..1
		limit_to_border = yes
		## cardinality = 0..1
		limit_to_victory_point = yes
		## cardinality = 0..1
		level = int_variable_field
	}
	province = {
		## cardinality = 1..inf
		id = enum[provinces]
		## cardinality = 0..1
		limit_to_coastal = yes
		## cardinality = 0..1
		limit_to_naval_base = yes
		## cardinality = 0..1
		limit_to_border = yes
		## cardinality = 0..1
		limit_to_victory_point = yes
		## cardinality = 0..1
		level = int_variable_field
	}
}

### dismantle faction led by the current country.
## scope = country
alias[effect:dismantle_faction] = bool

### adds specified country to faction.
## scope = country
alias[effect:add_to_faction] = scope[country]
### adds specified country to faction.
## scope = country
alias[effect:add_to_faction] = enum[country_tags]

### removes specified country from faction.
## scope = country
alias[effect:remove_from_faction] = scope[country]
### removes specified country from faction.
## scope = country
alias[effect:remove_from_faction] = enum[country_tags]

### guarantees specified country.
## scope = country
alias[effect:give_guarantee] = scope[country]
### guarantees specified country.
## scope = country
alias[effect:give_guarantee] = enum[country_tags]

### gives military access to the specified country.
## scope = country
alias[effect:give_military_access] = scope[country]
### gives military access to the specified country.
## scope = country
alias[effect:give_military_access] = enum[country_tags]

### Executes children effects on random state that fulfills the "limit" trigger.
## scope = any
## push_scope = any
alias[effect:random_state] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on random owned state that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:random_owned_state] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	prioritize = {
		## cardinality = 1..inf
		<state>
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on random neighbor state that fulfills the "limit" trigger.
## scope = state
## push_scope = any
alias[effect:random_neighbor_state] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on every state that fulfills the "limit" trigger.
## scope = any
## push_scope = any
alias[effect:every_state] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on every owned state that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:every_owned_state] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on every neighbor state that fulfills the "limit" trigger.
## scope = state
## push_scope = any
alias[effect:every_neighbor_state] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### fires a news event.
## scope = country
alias[effect:news_event] = {
	id = <event.news_event>
	## cardinality = 0..1
	enum[hours_days_months] = int
	## cardinality = 0..1
	random = int
}

### fires a news event.
## scope = country
alias[effect:news_event] = <event.news_event>

### declares war on specified country.
## scope = country
alias[effect:declare_war_on] = {
	target = scope[country]
	target = enum[country_tags]
	type = <wargoal>
	## cardinality = 0..1
	generator = {
		## cardinality = 0..inf
		scope[state]
		## cardinality = 0..inf
		<state>
	}
}

# not used in vanilla or documented in wiki
### add political power to country scaled by the difference in IC between the receiver and another country.
## scope = country
alias[effect:add_scaled_political_power] = int_variable_field

### Immediately holds an election in the target country.
## scope = country
alias[effect:hold_election] = scope[country]
### Immediately holds an election in the target country.
## scope = country
alias[effect:hold_election] = enum[country_tags]

### add popularity to an ideology in a country.
## scope = country
alias[effect:add_popularity] = {
	ideology = <ideology>
	popularity = variable_field
}

### Remove all ideas with specified trait from country.
## scope = country
alias[effect:remove_ideas_with_trait] = <country_leader_trait>

### Given ideology starts a civil war in the country. keep_unit_leaders specify ID of unit leaders that remain with the original country.
## scope = country
alias[effect:start_civil_war] = {
	### Ideology of breakaway country.
	ideology = <ideology>
	ideology = scope[country]
	### Ruling party of original country.
	## cardinality = 0..1
	ruling_party = <ideology>
	### Size of breakaway and percent of equip and div going to breakaway.
	## cardinality = 0..1
	size = variable_field[0..1]
	### Percent of navy going to breakaway. Defaults to size if not defined.
	## cardinality = 0..1
	navy_ratio = variable_field[0..1]
	### Percent of air wings going to breakaway. Defaults to size if not defined.
	## cardinality = 0..1
	air_ratio = variable_field[0..1]
	## cardinality = 0..1
	only_own_territory = bool
	### The capital of the breakaway country.
	## cardinality = 0..1
	capital = scope[state]
	### The capital of the breakaway country.
	## cardinality = 0..1
	capital = <state>
	### States that go to the revolter. Use "all" to include all states.
	## cardinality = 0..1
	states = {
		## cardinality = 0..inf
		scope[state]
		## cardinality = 0..inf
		<state>
	}
	### States that go to the revolter. Use "all" to include all states.
	## cardinality = 0..1
	states = all
	### States that go to the revolter. Filtering trigger on the states scripted to go to the revolter.
	## cardinality = 0..1
	## push_scope = any
	states_filter = { alias_name[trigger] = alias_match_left[trigger] }
	## cardinality = 0..1
	keep_unit_leaders = {
		## cardinality = 1..inf
		value[unit_leader_ids]
	}
	## cardinality = 0..1
	## push_scope = any
	keep_unit_leaders_trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

### retires a country leader and removes him as leader of his party, making the next in line the new party and country leader.
## scope = country
alias[effect:retire_country_leader] = bool

### kills a country leader and removes him completely, making the next in line the new party and country leader.
## scope = country
alias[effect:kill_country_leader] = bool

### releases specified country as puppet.
## scope = country
alias[effect:release_puppet] = scope[country]
### releases specified country as puppet.
## scope = country
alias[effect:release_puppet] = enum[country_tags]

### creates wargoal for country in scope.
## scope = country
alias[effect:create_wargoal] = {
	target = scope[country]
	target = enum[country_tags]
	type = <wargoal>
	## cardinality = 0..1
	generator = {
		## cardinality = 0..inf
		scope[state]
		## cardinality = 0..inf
		<state>
	}
	## cardinality = 0..1
	generator = owned_states
	## cardinality = 0..1
	expire = date_field
	## cardinality = 0..1
	expire = 0
}

### Add state claim by country.
## scope = state
alias[effect:add_claim_by] = scope[country]
### Add state claim by country.
## scope = state
alias[effect:add_claim_by] = enum[country_tags]

### Removes state claim by country.
## scope = state
alias[effect:remove_claim_by] = scope[country]
### Removes state claim by country.
## scope = state
alias[effect:remove_claim_by] = enum[country_tags]

### Add state as core of country.
## scope = state
alias[effect:add_core_of] = scope[country]
### Add state as core of country.
## scope = state
alias[effect:add_core_of] = enum[country_tags]

### Removes state as core of country.
## scope = state
alias[effect:remove_core_of] = scope[country]
### Removes state as core of country.
## scope = state
alias[effect:remove_core_of] = enum[country_tags]

### add army experience for country.
## scope = country
alias[effect:army_experience] = variable_field

### add naval experience for country.
## scope = country
alias[effect:navy_experience] = variable_field

### add air experience for country.
## scope = country
alias[effect:air_experience] = variable_field

### save an event target.
## scope = any
alias[effect:save_event_target_as] = value_set[event_target]

### save a global event target.
## scope = any
alias[effect:save_global_event_target_as] = value_set[global_event_target]

### clear a global event target.
## scope = any
alias[effect:clear_global_event_target] = value[global_event_target]

### clear all global event targets.
## scope = any
alias[effect:clear_global_event_targets] = yes

### break execution of effects.
## scope = any
alias[effect:break] = none

### break execution of effects.
## scope = any
alias[effect:break] = yes

### unlocks a focus for a country.
## scope = country
alias[effect:unlock_national_focus] = <focus>
alias[effect:unlock_national_focus] = <shared_focus>

### adds a limited use tech bonus.
## scope = country
alias[effect:add_tech_bonus] = {
	## cardinality = 1..2
	enum[tech_bonus] = float
	## cardinality = 0..1
	uses = int[1..32767]
	## cardinality = 0..inf
	category = enum[tech_category]
	## cardinality = 0..inf
	technology = <technology>
	## cardinality = 0..1
	name = localisation
}

### adds a limited use tech bonus.
## scope = state
alias[effect:set_demilitarized_zone] = bool

### Adds a research slot (negative values subtracts).
## scope = country
alias[effect:add_research_slot] = int

### Sets the number of research slots.
## scope = country
alias[effect:set_research_slots] = int

### starts a border war in a state with neighbouring state that also has border war.
## scope = state
alias[effect:set_border_war] = bool

### Modify allequipments by factor.
## scope = country
alias[effect:set_equipment_fraction] = float

### Adds country threat.
## scope = country
alias[effect:add_threat] = float[-100..100]

### Sends to target scope specified amount of equipment.
## scope = country
alias[effect:send_equipment] = {
	## cardinality = 0..1
	type = <equipment>
	## cardinality = 0..1
	equipment = <equipment>
	amount = int_variable_field
	target = scope[country]
	target = enum[country_tags]
	## cardinality = 0..1
	old_prioritised = yes
}

### Adds rule to country.
## scope = country
alias[effect:set_rule] = {
	## cardinality = 1..inf
	enum[game_rules] = bool
}

### Set up a diplomatic relation between two nations.
## scope = country
alias[effect:diplomatic_relation] = {
	country = scope[country]
	country = enum[country_tags]
	relation = enum[diplomatic_relations]
	## cardinality = 0..1
	active = bool
}

### Shows just tooltip of effects.
## scope = any
alias[effect:effect_tooltip] = { alias_name[effect] = alias_match_left[effect] }

### Adds resource production to state.
## scope = country
alias[effect:add_resource] = {
	type = <resource>
	amount = int_variable_field
	state = scope[state]
	state = <state>
}
### Adds resource production to state.
## scope = state
alias[effect:add_resource] = {
	type = <resource>
	amount = int_variable_field
}

### remove a unit leader ( remove_unit_leader=ID ).
## scope = country
alias[effect:remove_unit_leader] = value[unit_leader_ids]

### add time limited idea to country idea, add_timed_idea = { idea = id days = number_of_days }.
## scope = country
alias[effect:add_timed_idea] = {
	idea = enum[idea_name]
	days = int_variable_field
}

### Stops specefied country being a puppet of current country.
## scope = country
alias[effect:end_puppet] = scope[country]
### Stops specefied country being a puppet of current country.
## scope = country
alias[effect:end_puppet] = enum[country_tags]

### Loads a OOB file instantly.
## scope = country
alias[effect:load_oob] = <oob>

### Creates trade between two countries.
## scope = country
alias[effect:create_import] = {
	## cardinality = 0..1
	amount = int
	resource = <resource>
	## cardinality = 0..1
	factories = int
	exporter = scope[country]
	exporter = enum[country_tags]
}

### Adds country threat.
## scope = country
alias[effect:add_named_threat] = {
	threat = float
	name = localisation
}

### set controller for province.
## scope = country
alias[effect:set_province_controller] = enum[provinces]

### sets mandatory major country flag.
## scope = country
alias[effect:set_major] = yes

### create field marshal for country.
## scope = country
alias[effect:create_field_marshal] = {
	name = scalar
	## cardinality = 0..1
	desc = localisation
	## cardinality = 0..1
	picture = scalar
	## cardinality = 0..1
	portrait_path = scalar
	## cardinality = 0..1
	## severity = warning
	gfx = <spriteType>
	## cardinality = 0..1
	traits = {
		## cardinality = ~1..inf
		<unit_leader_trait>
	}
	## cardinality = ~1..1
	skill = int
	## cardinality = ~1..1
	attack_skill = int
	## cardinality = ~1..1
	defense_skill = int
	## cardinality = ~1..1
	planning_skill = int
	## cardinality = ~1..1
	logistics_skill = int
	## cardinality = 0..1
	id = value_set[unit_leader_ids]
	## cardinality = 0..1
	female = bool
}

### create corps commander for country.
## scope = country
alias[effect:create_corps_commander] = {
	## cardinality = 0..1
	name = scalar
	## cardinality = 0..1
	desc = localisation
	## cardinality = 0..1
	picture = scalar
	## cardinality = 0..1
	portrait_path = scalar
	## cardinality = 0..1
	## severity = warning
	gfx = <spriteType>
	## cardinality = 0..1
	traits = {
		## cardinality = ~1..inf
		<unit_leader_trait>
	}
	## cardinality = ~1..1
	skill = int
	## cardinality = ~1..1
	attack_skill = int
	## cardinality = ~1..1
	defense_skill = int
	## cardinality = ~1..1
	planning_skill = int
	## cardinality = ~1..1
	logistics_skill = int
	## cardinality = 0..1
	id = value_set[unit_leader_ids]
	## cardinality = 0..1
	female = bool
}

### Goes to stated province.
## scope = any
alias[effect:goto_province] = enum[provinces]

### Goes to stated state.
## scope = any
alias[effect:goto_state] = scope[state]
### Goes to stated state.
## scope = any
alias[effect:goto_state] = <state>

### Country leaves the faction.
## scope = country
alias[effect:leave_faction] = bool

### unlocks a focus for a country.
## scope = country
alias[effect:complete_national_focus] = <focus>
alias[effect:complete_national_focus] = <shared_focus>

### change partyname for an ideology in a country.
## scope = country
alias[effect:set_party_name] = {
	ideology = <ideology>
	long_name = localisation
	name = localisation
}

### add extra shared building slot to state.
## scope = state
alias[effect:add_extra_state_shared_building_slots] = int_variable_field

### Add opinion modifier(s) to target(s).
## scope = country
alias[effect:reverse_add_opinion_modifier] = {
	target = scope[country]
	target = enum[country_tags]
	modifier = <opinion>
}

### adds country to the specified war.
## scope = country
alias[effect:add_to_war] = {
	targeted_alliance = scope[country]
	targeted_alliance = enum[country_tags]
	enemy = scope[country]
	enemy = enum[country_tags]
	## cardinality = 0..1
	hostility_reason = localisation
}

### show what idea does.
## scope = country
alias[effect:show_ideas_tooltip] = enum[idea_name]

### creates a new equipment variant.
## scope = country
alias[effect:create_equipment_variant] = {
	name = scalar
	type = <equipment.regular_equip>
	## cardinality = 0..1
	name_group = <ship_name>
	## cardinality = 0..1
	parent_version = int
	## cardinality = 0..1
	upgrades = {
		## cardinality = 0..4
		<upgrade> = int
	}
	## cardinality = 0..1
	modules = {
		## cardinality = 0..inf
		enum[module_slots] = <module>
		## cardinality = 0..inf
		enum[module_slots] = empty
	}
	## cardinality = 0..1
	obsolete = yes
}

### Adds an equipment production.
## scope = country
alias[effect:add_equipment_production] = {
	equipment = {
		type = <equipment.regular_equip>
		## cardinality = 0..1
		creator = enum[country_tags]
		## cardinality = 0..1
		version_name = localisation
	}
	## cardinality = 0..1
	name = scalar
	## cardinality = 0..1
	amount = int
	## cardinality = 0..1
	requested_factories = int[1..150]
	## cardinality = 0..1
	progress = float[0..1]
	## cardinality = 0..1
	efficiency = int[0..100]
}

### adds an air ace.
## scope = country
alias[effect:add_ace] = {
	name = localisation
	surname = localisation
	callsign = localisation
	type = <ace>
	## cardinality = 0..1
	is_female = bool
}

### Executes children effects on random owned state that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:random_owned_controlled_state] = {
	## cardinality = 0..1
	prioritize = {
		## cardinality = ~1..inf
		<state>
	}
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### ai message... ?.
## scope = country
# not in wiki or used in vanilla
alias[effect:ai_message] = replace_me

### Executes children effects on every other country that fulfills the "limit" trigger. Excludes current country.
## scope = country
## push_scope = any
alias[effect:every_other_country] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on random country that fulfills the "limit" trigger. Excludes current country.
## scope = country
## push_scope = any
alias[effect:random_other_country] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Adds equipment to the countries stockpiles.
## scope = country
alias[effect:add_equipment_to_stockpile] = {
	type = <equipment>
	amount = int_variable_field
	## cardinality = 0..1
	producer = scope[country]
	## cardinality = 0..1
	producer = enum[country_tags]
}

### swap 2 ideas.
## scope = country
alias[effect:swap_ideas] = {
	remove_idea = enum[idea_name]
	add_idea = enum[idea_name]
}

### Damages buildings in the current state.
## scope = state
alias[effect:damage_building] = {
	type = <building>
	damage = variable_field
	## cardinality = 0..1
	province = enum[provinces]
}

### releases specified country with specified level of autonomy.
## scope = country
alias[effect:release_autonomy] = {
	target = scope[country]
	target = enum[country_tags]
	autonomy_state = <autonomy>
	autonomy_state = autonomy_free
	## cardinality = 0..1
	freedom_level = float[0..1]
}

### makes autonomy of specified level and country.
## scope = country
alias[effect:set_autonomy] = {
	target = scope[country]
	target = enum[country_tags]
	## cardinality = 0..1
	autonomy_state = <autonomy>
	autonomy_state = autonomy_free
	## cardinality = 0..1
	autonomous_state = <autonomy>
	## cardinality = 0..1
	freedom_level = float[0..1]
}

### Adds country to technology sharing group of specified name.
## scope = country
alias[effect:add_to_tech_sharing_group] = <tech_sharing_group>

### Removes country from technology sharing group of specified name.
## scope = country
alias[effect:remove_from_tech_sharing_group] = <tech_sharing_group>

### Adds exact freedom score to the autonomy.
## scope = country
alias[effect:add_autonomy_score] = {
	value = float
	## cardinality = 0..1
	localization = localisation
}

### Modify country bonus for specified technology sharing group.
## scope = country
alias[effect:modify_tech_sharing_bonus] = {
	id = <tech_sharing_group>
	bonus = float
}

### Adds % freedom score to the autonomy.
## scope = country
alias[effect:add_autonomy_ratio] = {
	value = float
	## cardinality = 0..1
	localization = localisation
}

### Sets country cosmetic tag.
## scope = country
alias[effect:set_cosmetic_tag] = value_set[cosmetic_tag]

### Drops country cosmetic tag.
## scope = country
alias[effect:drop_cosmetic_tag] = yes

### Transfers ship from scope country to target country.
## scope = country
alias[effect:transfer_ship] = {
	## cardinality = 0..1
	prefer_name = scalar
	type = <unit.ship_unit>
	target = scope[country]
	target = enum[country_tags]
}

### Sets the category of a state.
## scope = state
alias[effect:set_state_category] = <state_category>

### modify global flag. Only modifies if flag already exists.
## scope = any
alias[effect:modify_global_flag] = {
	flag = value[global_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	days = int
}

### modify country flag. Only modifies if flag already exists.
## scope = country
alias[effect:modify_country_flag] = {
	flag = value[country_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	days = int
}

### modify state flag. Only modifies if flag already exists.
## scope = state
alias[effect:modify_state_flag] = {
	flag = value[state_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	days = int
}

### Adds a modifier to the state.
## scope = state
alias[effect:add_state_modifier] = {
	modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
}

### set_province_name = { id = <province id> name = <string> } - Set name for a province.
## scope = any
alias[effect:set_province_name] = {
	id = enum[provinces]
	name = localisation
}

### set_state_name = <string> - Set the current states name.
## scope = state
alias[effect:set_state_name] = localisation

### reset name of a province back to localization one.
## scope = any
alias[effect:reset_province_name] = enum[provinces]

### reset_state_name = yes - Resets the current states name to the original one.
## scope = state
alias[effect:reset_state_name] = yes

### Creates production license.
## scope = country
alias[effect:create_production_license] = {
	target = scope[country]
	target = enum[country_tags]
	equipment = {
		type = <equipment.regular_equip>
	}
	cost_factor = float
}

### Adds a static modifier between current scope and target.
## scope = country
alias[effect:add_relation_modifier] = {
	target = scope[country]
	target = enum[country_tags]
	modifier = <static_modifier.relation_modifier>
}


### Removes a static modifier between current scope and target.
## scope = country
alias[effect:remove_relation_modifier] = {
	target = scope[country]
	target = enum[country_tags]
	modifier = <static_modifier.relation_modifier>
}

### Sets specific level of a building construction for amount of levels in specified state or province.
## scope = state
alias[effect:set_building_level] = {
	type = <building.state>
	level = int_variable_field
	## cardinality = 0..1
	instant_build = yes
}

### Sets specific level of a building construction for amount of levels in specified state or province.
## scope = state
alias[effect:set_building_level] = {
	type = <building.provincial>
	level = int_variable_field
	## cardinality = 0..1
	instant_build = yes
	province = enum[provinces]
	province = {
		all_provinces = bool
		## cardinality = 0..1
		limit_to_coastal = bool
		## cardinality = 0..1
		limit_to_naval_base = bool
		## cardinality = 0..1
		limit_to_border = bool
		## cardinality = 0..1
		level = int_variable_field
	}
	province = {
		## cardinality = 1..inf
		id = enum[provinces]
		## cardinality = 0..1
		limit_to_coastal = bool
		## cardinality = 0..1
		limit_to_naval_base = bool
		## cardinality = 0..1
		limit_to_border = bool
		## cardinality = 0..1
		level = int_variable_field
	}
}

### Sets the stability to the country in scope. Example: set_stability = 80.
## scope = country
alias[effect:set_stability] = variable_field[0..1]

### Adds the war support to the country in scope. Example: add_war_support = 5.
## scope = country
alias[effect:add_war_support] = variable_field[-1..1]

### Sets the war support to the country in scope. Example: set_war_support = 80.
## scope = country
alias[effect:set_war_support] = variable_field[0..1]

### Executes children effects on random unit leader that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:random_unit_leader] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on unit leaders that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:every_unit_leader] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on random army leader that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:random_army_leader] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on army leaders that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:every_army_leader] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on random navy leader that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:random_navy_leader] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Executes children effects on navy leaders that fulfills the "limit" trigger.
## scope = country
## push_scope = any
alias[effect:every_navy_leader] = {
	## cardinality = 0..1
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Transfers the entire navy from scope country to target country. Does not support carriers!.
## scope = country
alias[effect:transfer_navy] = {
	target = scope[country]
	target = enum[country_tags]
	### The navy will be tagged as exile if this is yes so that it will return to owner if they return from exile. Default is no.
	## cardinality = 0..1
	is_government_in_exile = yes
}

### Destroys ships of specified country and amount.
## scope = country
alias[effect:destroy_ships] = {
	type = <unit.ship_unit>
	type = <equipment.naval_equip>
	count = int
	count = all
}

### set unit leader flag.
## scope = unit_leader
alias[effect:set_unit_leader_flag] = value_set[leader_flag]
### set unit leader flag.
## scope = unit_leader
alias[effect:set_unit_leader_flag] = {
	flag = value_set[leader_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	days = int
}

### modify unit leader flag. Only modifies if flag already exists.
## scope = unit_leader
alias[effect:modify_unit_leader_flag] = {
	flag = value[leader_flag]
	## cardinality = 0..1
	value = int
	## cardinality = 0..1
	days = int
}

### clear unit leader flag.
## scope = unit_leader
## severity = warning
alias[effect:clr_unit_leader_flag] = value[leader_flag]

### Sets the country that owns current scope general.
## scope = unit_leader
alias[effect:set_nationality] = scope[country]
### Sets the country that owns current scope general.
## scope = unit_leader
alias[effect:set_nationality] = enum[country_tags]

### Demotes field marshal to general.
## scope = unit_leader
alias[effect:demote_leader] = yes

### Retires scope unit leader.
## scope = unit_leader
alias[effect:retire] = bool

### add command power to country.
## scope = country
alias[effect:add_command_power] = float

### show what decision does.
## scope = country
alias[effect:unlock_decision_tooltip] = <decision>

### show what decision does.
## scope = country
alias[effect:unlock_decision_tooltip] = {
	decision = <decision>
	## cardinality = 0..1
	show_effect_tooltip = yes # default is no
	## cardinality = 0..1
	show_modifiers = yes # default is no
}

### Add buffs to units that are belongs to the army group/navy of this unit leader.
## scope = unit_leader
alias[effect:add_temporary_buff_to_units] = {
	## cardinality = 0..1
	combat_offense = float
	## cardinality = 0..1
	combat_breakthrough = float
	## cardinality = 0..1
	combat_defense = float
	## cardinality = 0..1
	combat_entrenchment = float
	## cardinality = 0..1
	org_damage_multiplier = float
	## cardinality = 0..1
	str_damage_multiplier = float
	## cardinality = 0..1
	war_support_reduction_on_damage = float
	## cardinality = 0..1
	cannot_retreat_while_attacking = float
	## cardinality = 0..1
	cannot_retreat_while_defending = float
	## cardinality = 0..1
	days = int
	## cardinality = 0..1
	tooltip = localisation
}

### Boost planning of units that are belongs to the army group/navy of this unit leader.
alias[effect:boost_planning] = float

#wiki doesn't know and vanilla doesn't show
### add efficiency factor to strategic region for from country.
alias[effect:add_region_efficiency] = replace_me

### Modifies resource output of specific building for this country only.
## scope = country
alias[effect:modify_building_resources] = {
	building = <building>
	resource = <resource>
	amount = int
}

### Executes children effects on army leaders for every country in the world that fulfills the "limit" trigger. Better to use every_army_leader if you know the country.
## scope = any
## push_scope = any
alias[effect:global_every_army_leader] = {
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

### Adds a value or a variable to another one.
## scope = any
alias[effect:add_to_variable] = {
	value_set[variable] = variable_field
}
### Adds a value or a variable to another one.
## scope = any
alias[effect:add_to_variable] = {
	var = value_set[variable]
	value = variable_field
}

### Subtracts a value or a variable to another one.
## scope = any
alias[effect:subtract_from_variable] = {
	value_set[variable] = variable_field
}
### Subtracts a value or a variable to another one.
## scope = any
alias[effect:subtract_from_variable] = {
	var = value_set[variable]
	value = variable_field
}

### Multiplies a variable to a value or another variable.
## scope = any
alias[effect:multiply_variable] = {
	value_set[variable] = variable_field
}
### Multiplies a variable to a value or another variable.
## scope = any
alias[effect:multiply_variable] = {
	var = value_set[variable]
	value = variable_field
}

### Divides a variable to a value or another variable.
## scope = any
alias[effect:divide_variable] = {
	value_set[variable] = variable_field
}
### Divides a variable to a value or another variable.
## scope = any
alias[effect:divide_variable] = {
	var = value_set[variable]
	value = variable_field
}

### Clears a variable.
## scope = any
alias[effect:clear_variable] = variable_field

### Adds attack skill to a unit leader.
## scope = unit_leader
alias[effect:add_attack] = int

### Adds defense skill to a unit leader.
## scope = unit_leader
alias[effect:add_defense] = int

### Adds planning skill to a unit leader.
## scope = unit_leader
alias[effect:add_planning] = int

### localizes name of category and displays tooltip that shows it will be unlocked.
## scope = country
alias[effect:unlock_decision_category_tooltip] = <decision_category>

### shows mission will activate and name. Activation needs to be handled manually, effect is just an easier way to display name of mission.
## scope = country
alias[effect:activate_mission_tooltip] = <decision.mission>

### Sets what focus tree a country uses, retains finished shared focuses.
## scope = country
alias[effect:load_focus_tree] = <focus_tree>

### Sets what focus tree a country uses, retains finished shared focuses.
## scope = country
alias[effect:load_focus_tree] = {
	tree = <focus_tree>
	## cardinality = 0..1
	keep_completed = bool
}

### Adds logistics skill to a unit leader.
## scope = unit_leader
alias[effect:add_logistics] = int

### Add an offsite building to a country.
## scope = country
alias[effect:add_offsite_building] = {
	type = <building>
	level = int_variable_field
}

#wiki doesn't know
### add trait to unit leader.
## scope = unit_leader
alias[effect:replace_unit_leader_trait] = replace_me

### Adds a max assignable trait slot for a general.
## scope = unit_leader
alias[effect:add_max_trait] = int

### Adds a skill level to a unit leader.
## scope = unit_leader
alias[effect:add_skill_level] = int

### Adds a value or a variable to a temp variable.
## scope = any
alias[effect:add_to_temp_variable] = {
	value_set[variable] = variable_field
}
### Adds a value or a variable to a temp variable.
## scope = any
alias[effect:add_to_temp_variable] = {
	var = value_set[variable]
	value = variable_field
}

### Subtracts a value or a variable to a temp variable.
## scope = any
alias[effect:subtract_from_temp_variable] = {
	var = value_set[variable]
	value = variable_field
}
### Subtracts a value or a variable to a temp variable.
## scope = any
alias[effect:subtract_from_temp_variable] = {
	value_set[variable] = variable_field
}

### Multiplies a temp variable to a value or another variable.
## scope = any
alias[effect:multiply_temp_variable] = {
	value_set[variable] = variable_field
}
### Multiplies a temp variable to a value or another variable.
## scope = any
alias[effect:multiply_temp_variable] = {
	var = value_set[variable]
	value = variable_field
}

### Divides a temp variable to a value or another variable.
## scope = any
alias[effect:divide_temp_variable] = {
	value_set[variable] = variable_field
}
### Divides a temp variable to a value or another variable.
## scope = any
alias[effect:divide_temp_variable] = {
	var = value_set[variable]
	value = variable_field
}

### Sets a temp variable to a value or another variable.
## scope = any
alias[effect:set_temp_variable] = {
	value_set[variable] = variable_field
}

### Sets a temp variable to a value or another variable.
## scope = any
alias[effect:set_temp_variable] = {
	var = value_set[variable]
	value = variable_field
}

### add a timed trait to unit leader.
## scope = unit_leader
alias[effect:add_timed_unit_leader_trait] = {
	trait = <unit_leader_trait>
	days = int
}

### Clamps a variable between two a values or another variables.
## scope = any
alias[effect:clamp_variable] = {
	var = value_set[variable]
	min = variable_field
	max = variable_field
}

### Clamps a temp variable between two a values or another variables.
## scope = any
alias[effect:clamp_temp_variable] = {
	var = value_set[variable]
	min = variable_field
	max = variable_field
}

### Clamps a variable between two a values or another variables.
## scope = any
alias[effect:clamp_variable] = {
	var = value_set[variable]
	max = variable_field
}

### Clamps a temp variable between two a values or another variables.
## scope = any
alias[effect:clamp_temp_variable] = {
	var = value_set[variable]
	max = variable_field
}

### Clamps a variable between two a values or another variables.
## scope = any
alias[effect:clamp_variable] = {
	var = value_set[variable]
	min = variable_field
}

### Clamps a temp variable between two a values or another variables.
## scope = any
alias[effect:clamp_temp_variable] = {
	var = value_set[variable]
	min = variable_field
}

### Start a border war between two states.
## scope = { state country }
alias[effect:start_border_war] = {
	change_state_after_war = bool
	attacker = {
		state = scope[state]
		state = <state>
		num_provinces = int[1..100]
		on_win = <event>
		on_lose = <event>
		on_cancel = <event>
	}
	defender = {
		state = scope[state]
		state = <state>
		num_provinces = int[1..100]
		on_win = <event>
		on_lose = <event>
		on_cancel = <event>
	}
}

### Update border war properties.
## scope = { state country }
alias[effect:set_border_war_data] = {
	attacker = scope[state]
	attacker = <state>
	defender = scope[state]
	defender = <state>
	## cardinality = 0..1
	attacker_modifier = float
	## cardinality = 0..1
	defender_modifier = float
	## cardinality = 0..1
	combat_width = int
}

### Cancel border war between two states.
## scope = { state country }
alias[effect:cancel_border_war] = {
	## cardinality = 0..1
	dont_fire_events = bool
	attacker = scope[state]
	attacker = <state>
	defender = scope[state]
	defender = <state>
}

### Set lock status for a division template.
## scope = country
alias[effect:set_division_template_lock] = {
	division_template = localisation
	is_locked = bool
}

### Delete a template and its units.
## scope = country
alias[effect:delete_unit_template_and_units] = {
	division_template = localisation
}

### prints all variables in scope and temp variables to a file.
## scope = any
alias[effect:print_variables] = {
	file = scalar
	## cardinality = 0..1
	text = scalar
	## cardinality = 0..1
	append = bool
	## cardinality = 0..1
	print_global = bool
	## cardinality = 0..1
	var_list = {
		## cardinality = 1..inf
		value[variable]
	}
}

### Activates mission, ignoring its normal trigger conditions. Cannot activate a mission that is already active.
## scope = country
alias[effect:activate_mission] = <decision.mission>

### Removes mission without running complete or timeout effects.
## scope = country
alias[effect:remove_mission] = <decision.mission>

### Scope country recalls attache from target country. Example: GER = { recall_attache = CHI } means Germany recalls attache from China.
## scope = country
alias[effect:recall_attache] = scope[country]
### Scope country recalls attache from target country. Example: GER = { recall_attache = CHI } means Germany recalls attache from China.
## scope = country
alias[effect:recall_attache] = enum[country_tags]

### Activates targeted decisions or mission, ignoring its normal trigger conditions, cooldown and fire only once. Cannot activate if active in interface.
## scope = country
alias[effect:activate_targeted_decision] = {
	target = scope[country]
	target = enum[country_tags]
	decision = <decision>
}

### Removes targeted decisions or mission.
## scope = country
alias[effect:remove_targeted_decision] = <decision>

### Removes targeted decisions or mission.
## scope = country
alias[effect:remove_targeted_decision] = {
	target = scope[country]
	target = enum[country_tags]
	decision = <decision>
}

### Modify amount of days of a timed idea.
## scope = country
alias[effect:modify_timed_idea] = {
	idea = enum[idea_name]
	days = int
}

### Activates specified decision for scope country.
## scope = country
alias[effect:activate_decision] = <decision>

### Sets a truce between scope country and target for days duration.
## scope = country
alias[effect:set_truce] = {
	target = scope[country]
	target = enum[country_tags]
	days = int
}


### Rounds a variable.
## scope = any
alias[effect:round_variable] = variable_field

### fires a unit leader event for owner country.
## scope = unit_leader
alias[effect:unit_leader_event] = {
	id = <event.unit_leader_event>
	## cardinality = 0..1
	enum[hours_days_months] = int
	## cardinality = 0..1
	random = int
}

### fires a unit leader event for owner country.
## scope = unit_leader
alias[effect:unit_leader_event] = <event.unit_leader_event>

### finalizes border war between two states, wins or cancels it.
## scope = { state country }
alias[effect:finalize_border_war] = {
	attacker = scope[state]
	attacker = <state>
	defender = scope[state]
	defender = <state>
	## cardinality = 0..1
	attacker_win = bool
	## cardinality = 0..1
	defender_win = bool
}

### Remove specified active decision for scope country - Does not run the remove_effect or put the decision on cooldown. Ignores fire_only_once.
## scope = country
alias[effect:remove_decision] = <decision>

### swap 2 traits on current ruler.
## scope = country
alias[effect:swap_ruler_traits] = {
	remove = <country_leader_trait>
	add = <country_leader_trait>
}

### add random trait from specified list to unit leader. add_random_trait = { old_guard brilliant_strategist inflexible_strategist }.
## scope = unit_leader
alias[effect:add_random_trait] = {
	## cardinality = 1..inf
	<unit_leader_trait>
}

### remove exile tag from scope unit leader. remove_exile_tag = yes.
## scope = unit_leader
alias[effect:remove_exile_tag] = yes

### set_legitimacy = 10. Sets legitimacy on scope country to specified value. Value has to be 0-100.
## scope = country
alias[effect:set_legitimacy] = int_variable_field

### Become exile in target nation. become_exiled_in = { target = TAG legitimacy = 0-100 (optional) }.
## scope = country
alias[effect:become_exiled_in] = {
	target = scope[country]
	target = enum[country_tags]
	## cardinality = 0..1
	legitimacy = float
}

### set_faction_name = NEW_LOC_KEY. Sets the faction name to whatever the new key localises to.
## scope = { state country }
alias[effect:set_faction_name] = localisation

### Adds maneuver skill to a unit leader.
alias[effect:add_maneuver] = int

### Adds maneuver skill to a unit leader.
alias[effect:add_coordination] = int

### Gives rights to take resources from specified state. give_resource_rights = { receiver = <TAG> state = <id> }.
## scope = country
alias[effect:give_resource_rights] = {
	receiver = enum[country_tags]
	receiver = scope[country]
	state = <state>
}

### Remove resource right to state for scope country. remove_resource_rights = ID.
## scope = country
alias[effect:remove_resource_rights] = <state>

### Copies over technology state from target.
## scope = country
alias[effect:inherit_technology] = enum[country_tags]

### Copies over technology state from target.
## scope = country
alias[effect:inherit_technology] = scope[country]

### Rounds a temporary variable.
## scope = { any }
alias[effect:round_temp_variable] = variable_field

### set current country as leader of its faction.
## scope = country
alias[effect:set_faction_leader] = yes

### Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with the given key) on that country.
## scope = country
alias[effect:set_keyed_oob] = {
	key = scalar
	name = <oob>
}

### Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with no key) on that country.
## scope = country
alias[effect:set_oob] = <oob>

### Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with key "naval") on that country.
## scope = country
alias[effect:set_naval_oob] = <oob>

### Adds an element to an array.
## scope = any
alias[effect:add_to_array] = {
	array = value_set[array]
	array = value_set[variable]
	## cardinality = 0..1
	### optional, if not defined adds scope
	value = variable_field
	## cardinality = 0..1
	### optional, if not defined adds scope
	value = scope_field
	## cardinality = 0..1
	### optional, default is end. otherwise elements are shifted
    index = int_variable_field
}

### Adds an element to an array.
## scope = any
alias[effect:add_to_array] = {
	value_set[array] = variable_field
	value_set[variable] = variable_field
	value_set[array] = scope_field
	value_set[variable] = scope_field
}

### Removes an element from an array using value or index.
## scope = any
alias[effect:remove_from_array] = {
	array = value_set[array]
	array = value_set[variable]
	### optional, use index or this. if neither it removes last element
	value = variable_field
	### optional, use index or this. if neither it removes last element
	value = scope_field
}

### Removes an element from an array using value or index.
## scope = any
alias[effect:remove_from_array] = {
	array = value_set[array]
	array = value_set[variable]
	### optional, use value or this. if neither it removes last element
    index = int_variable_field
}

### Removes an element from an array using value or index.
## scope = any
alias[effect:remove_from_array] = {
	value_set[array] = variable_field
	value_set[variable] = variable_field
	value_set[array] = scope_field
	value_set[variable] = scope_field
}

### Clears the contents of array.
## scope = any
alias[effect:clear_array] = value[array]

### Clears the contents of array.
## scope = any
alias[effect:clear_array] = variable_field

### Resizes array.
## scope = any
alias[effect:resize_array] = {
	array = value_set[array]
	array = value_set[variable]
	## cardinality = 0..1
	### optional, if not specified and array grows the new elements are set to this (default 0)
	value = variable_field
	### if higher than old size, new elements are added to end. otherwise last elements are removed to match to new size
    size = int_variable_field
}

### Resizes array.
## scope = any
alias[effect:resize_array] = {
	value_set[array] = int_variable_field
	value_set[variable] = int_variable_field
}

### Adds an element to a temporary array.
## scope = any
alias[effect:add_to_temp_array] = {
	array = value_set[array]
	array = value_set[variable]
	## cardinality = 0..1
	### optional, if not defined adds scope
	value = variable_field
	## cardinality = 0..1
	### optional, if not defined adds scope
	value = scope_field
	## cardinality = 0..1
	### optional, default is end. otherwise elements are shifted
    index = int_variable_field
}

### Adds an element to a temporary array.
## scope = any
alias[effect:add_to_temp_array] = {
	value_set[array] = variable_field
	value_set[variable] = variable_field
	value_set[array] = scope_field
	value_set[variable] = scope_field
}

### Removes an element from a temporary array using value or index.
## scope = any
alias[effect:remove_from_temp_array] = {
	array = value_set[array]
	array = value_set[variable]
	### optional, use index or this. if neither it removes last element
	value = variable_field
	### optional, use index or this. if neither it removes last element
	value = scope_field
}

### Removes an element from a temporary array using value or index.
## scope = any
alias[effect:remove_from_temp_array] = {
	array = value_set[array]
	array = value_set[variable]
	### optional, use value or this. if neither it removes last element
    index = int_variable_field
}

### Removes an element from a temporary array using value or index.
## scope = any
alias[effect:remove_from_temp_array] = {
	value_set[array] = variable_field
	value_set[variable] = variable_field
	value_set[array] = scope_field
	value_set[variable] = scope_field
}

### Clears the contents of a temporary array.
## scope = any
alias[effect:clear_temp_array] = value[array]
### Clears the contents of a temporary array.
## scope = any
alias[effect:clear_temp_array] = variable_field

### Resizes a temp array.
## scope = any
alias[effect:resize_temp_array] = {
	array = value_set[array]
	array = value_set[variable]
	## cardinality = 0..1
	### optional, if not specified and array grows the new elements are set to this (default 0)
	value = variable_field
	### if higher than old size, new elements are added to end. otherwise last elements are removed to match to new size
    size = int_variable_field
}

### Resizes a temp array.
## scope = any
alias[effect:resize_temp_array] = {
	value_set[array] = int_variable_field
	value_set[variable] = int_variable_field
}

### Runs a loop on for each element of an array.
## scope = any
alias[effect:for_each_loop] = {
	array = value[array]
	array = variable_field
	## cardinality = 0..1
	### optional (default 'v') current value in array will be stored in this temp variable
	value = value_set[variable]
	## cardinality = 0..1
	### optional (default 'i') current index in array will be stored in this temp variable
	index = value_set[variable]
	## cardinality = 0..1
	### optional (default 'break') set this temp variable to non zero to break the loop
    break = value_set[variable]

    alias_name[effect] = alias_match_left[effect]
}

### add fuel to the country.
## scope = country
alias[effect:add_fuel] = int_variable_field

### set fuel for country.
## scope = country
alias[effect:set_fuel] = int_variable_field

### Runs a loop on for each element of an array and changes scope to current element in each iteration.
## scope = any
## push_scope = any
alias[effect:for_each_scope_loop] = {
	array = value[array]
	array = variable_field
	## cardinality = 0..1
	### optional (default 'break') set this temp variable to non zero to break the loop
    break = scalar

    alias_name[effect] = alias_match_left[effect]
}

### Runs the effect for a random element in array.
## scope = any
alias[effect:random_scope_in_array] = {
	array = value[array]
	array = variable_field
	## cardinality = 0..1
	### optional (default 'break') set this temp variable to non zero to break the loop
	break = scalar
	## cardinality = 0..1
	### a trigger to limit scopes
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}


### Updates the modifiers in current scope (use if you don't want to wait for daily update to update them).
## scope = { state country }
alias[effect:force_update_dynamic_modifier] = yes

### Removes a dynamic modifier from country/state/unit leader.
## scope = { state country }
alias[effect:remove_dynamic_modifier] = {
	modifier = <dynamic_modifier>

	## cardinality = 0..1
	### Optional, state or country tag or a variable contains that. if specified the dynamic variable will target that scope.
	scope = enum[country_tags]

	## cardinality = 0..1
	### Optional, state or country tag or a variable contains that. if specified the dynamic variable will target that scope.
	scope = scope[country]
}

### Adds a dynamic modifier to country/state/unit leader.
## scope = { state country }
alias[effect:add_dynamic_modifier] = {
	modifier = <dynamic_modifier>

	## cardinality = 0..1
	### Optional, state or country tag or a variable contains that. if specified the dynamic variable will target that scope.
	scope = enum[country_tags]

	## cardinality = 0..1
	### Optional, state or country tag or a variable contains that. if specified the dynamic variable will target that scope.
	scope = scope[country]
}

### Runs a same effects through a loop. example will run the effects for value_name = -3, 0, 3, 6, 9 and then terminate.
## scope = any
alias[effect:for_loop_effect] = {
	## cardinality = 0..1
	### (default 0) start value of loop
	start = int_variable_field
	## cardinality = 0..1
	### (default 0) end value of loop
	end = int_variable_field
	## cardinality = 0..1
	### less_than_or_equals (default less_than) comparison type between start and end val
	compare_type = enum[var_compares]
	## cardinality = 0..1
	### (default 1) value to add to current value after each iteration
	add = int_variable_type
	## cardinality = 0..1
	### optional (default 'v') current value of iteration will be stored in this temp variable
	value = scalar
	## cardinality = 0..1
	### optional (default 'break') set this temp variable to non zero to break the loop
	break = scalar

	alias_name[effect] = alias_match_left[effect]
}

### Runs the effect as long as a trigger is true.
## scope = any
alias[effect:while_loop_effect] = {
	## cardinality = 0..1
	### #optional (default 'break') set this temp variable to non zero to break the loop
	break = scalar

	### a trigger to test before each iteration
	limit = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	alias_name[effect] = alias_match_left[effect]
}

### meta effects can be used for building effects from strings and running them. following example will give Germany 42 pp.
## scope = any
alias[effect:meta_effect] = {
	text = {
		## cardinality = 0..inf
		scalar
		## cardinality = 0..inf
		scalar = scalar
	}
	## cardinality = 1..inf
	scalar = scalar
}

### launch nuke at a state. usage .
## scope = country
alias[effect:launch_nuke] = {
	## cardinality = 0..1
	province = enum[provinces]
	## cardinality = 0..1
	state = scope[state]
	## cardinality = 0..1
	state = <state>
	controller = scope[country]
	controller = enum[country_tags]
	## cardinality = 0..1
    use_nuke = bool
}

### Plays sound effect only on in current scope's player.
## scope = country
alias[effect:scoped_sound_effect] = replace_me

### Runs a loop on for each element of an array, finds the lowest value and stores result in temp variables.
## scope = any
alias[effect:find_lowest_in_array] = {
	array = value[array]
	array = variable_field

	## cardinality = 0..1
	### optional (default 'v') lowest value in array will be stored in this temp variable
	value = value_set[variable]

	## cardinality = 0..1
	### optional (default 'i') index of the lowest value in array will be stored in this temp variable
	index = value_set[variable]
}

### Runs a loop on for each element of an array, finds the highest value and stores result in temp variables.
## scope = any
alias[effect:find_highest_in_array] = {
	array = value[array]
	array = variable_field

	## cardinality = 0..1
	### optional (default 'v') highest value in array will be stored in this temp variable
	value = value_set[variable]

	## cardinality = 0..1
	### optional (default 'i') index of the highest value in array will be stored in this temp variable
	index = value_set[variable]
}

### Add mines to a strategic region for scoped country.
## scope = country
alias[effect:add_mines] = { region = <strategic_region> mines = int_variable_field }

### Set country's current fuel ratio relative to its capacity.
## scope = country
alias[effect:set_fuel_ratio] = float

### Ends the exile of of the current scope's country.
## scope = country
alias[effect:end_exile] = enum[country_tags]

### Ends the exile of of the current scope's country.
## scope = country
alias[effect:end_exile] = scope[country]

### Give supply to units being controlled by this leader.
## scope = unit_leader
alias[effect:supply_units] = int

### Sets the number of convoys.
## scope = country
alias[effect:set_convoys] = int

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = enum[ai_role_strats]
	id = value[ai_roles]
	value = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = enum[unit_strats]
	id = <unit>
	id = enum[unit_types]
	value = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = enum[equipment_strats]
	id = <equipment>
	value = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = enum[pp_strats]
	id = enum[pp_targets]
	value = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = area_priority
	id = <ai_area>
	value = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = enum[ai_diplo_strats]
	id = enum[country_tags]
	id = scope[country]
	value = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = dont_join_wars_with
	id = enum[country_tags]
	id = scope[country]
	target_country = enum[country_tags]
	target_country = scope[country]
	value = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = naval_avoid_region
	id = <strategic_region>
	value = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = enum[no_id_strats]
	value = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = enum[state_strats]
	target = int
	value = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = enum[state_strats_with_id]
	id = <building>
	target = int
	value = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = enum[state_strats_without_value]
	id = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = enum[naval_mission_strats]
	id = enum[naval_missions]
	value = int
}

### Adds strategy entry to country AI.
## scope = country
alias[effect:add_ai_strategy] = {
	type = enum[building_strats]
	id = <building>
	value = int
}

# ### Effect not shown in tooltips.
# ## scope = any
# alias[effect:hidden_effect] = {
# 	alias_name[effect] = alias_match_left[effect]
# }

### Adds legitimacy to scope country. Value has to be 0-100.
## scope = country
alias[effect:add_legitimacy] = int[-100..100]
