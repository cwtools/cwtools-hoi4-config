{
	"script_concepts":	{
		"Formatted Localization":	"![MD]\nFormatted localization is a concept for generating texts based on a specific token. It can for example, be used to\ngenerate a description of an idea from the ideas token. A formatted localization entry also accepts standard localization keys\nand raw localization strings giving the following allowed options:\n* A localization tag.\n* A string (can for example be used to inject things based on the [Localization Scope Object](#localization_scope_object) if one exists).\n* A formatter and it's associated tag.\n\nDocumentation for the existing formatters can be found at [Localization formatter](localization_formatter.md).\n\n### Example\n```\n# Using a  formatter\ncustom_effect_tooltip = idea_desc|canadian_pacific_railway\n\n# Using a standard loc key\ncustom_effect_tooltip = WHILE_FOCUSING\n\n# Using a loc string with a localization scope object\ncustom_effect_tooltip = \"[ROOT.GetName]\"\n```\n",
		"Bindable Localization":	"![MD]\nBindable localization is a modular way of binding localization parameters in script for the specified localization key.\nAny variable that accepts a bindable localization accepts the following:\n* A [formatted localization](#formatted_localization).\n* A bound localization object.\n\nThe bound localization object has the following members:\n* `localization_key = KEY`: The localization key that is used for the object.\n* `PARAMETER = BINDABLE_LOC`: A parameter to the localization key that is replaced with the localized version `BINDABLE_LOC`,\n   where `BINDABLE_LOC` is a bound localization object itself.\n\n#### Examples\nThe following are example usages where the `tooltip` is a bindable localization:\n```\ntooltip = MY_TOOLTIP # Simple loc key tooltip\n\n### Loc entries\nMY_TOOLTIP = \"This is a tooltip\"\n\n### Localized result\nThis is a tooltip\n```\n\n```\ntooltip = {\n\tlocalization_key = MY_TOOLTIP # Root look key\n\tIMPORTANT_QUESTION = { # ID IMPORTANT_QUESTION in MY_TOOLTIP will get value:\n\t\tlocalization_key = MEANING_OF_LIFE # Root loc key in IMPORTANT_QUESTION\n\t\tANSWER = \"42\" # ID ANSWER in IMPORTANT_QUESTION will get value 42\n\t}\n\tTHE_REST_IS = UNIMPORTANT\n}\n\n### Loc entries\nMY_TOOLTIP = \"The thing everyone wonders is if $IMPORTANT_QUESTION$. The rest is $THE_REST_IS$.\"\nMEANING_OF_LIFE = \"the meaning of life is $ANSWER$\"\nUNIMPORTANT = \"unimportant\"\n\n### Result\nThe thing everyone wonders is if the meaning of life is 42. The rest is unimportant.\n```\n\n```\n# Using a formatter\ncustom_effect_tooltip = idea_desc|canadian_pacific_railway\n```\n",
		"Script Constants":	"![MD]\nScript constants are a way to define constants in scripts that can be reused in any script file (except for other script constants files).\nIn general, script constants can be used instead of the script macro operator `@` that is file local.\nNote that the script constants has a negligible load time impact and no runtime performance cost.\nLike many other concepts, the script constant is only supported where explicitly stated that it is supported. However, all scoped variables\naccepts script constants that are pointing to a single fixed point value, by using the prefix `constant:`.\n\n#### Reloading\nA script constant is a bit specific when it comes to reloading the database.\nIt's not enough to reload the script constant database itself since script constants are injected into the script on load.\nInstead one have to first reload the script constant database, and then reload the database that uses the script constant.\n\n#### Example\nIn the script constant file, the following constant file definition is made:\n```\nnumeric_constants = {\n    schema = {\n        any_key = yes\n        data = fixed_point # floating point\n    }\n\tpi = 3.14159\n\te = 2.71828\n}\n```\n\nThese can then be used in a script file like this:\n```\nsome_scoped_variable = constant:numeric_constants.pi\nsome_fixed_point_supporting_constants = numeric_constants.e\n```\n\n",
		"Contextual Localization":	"![MD]\nContextual localization is a way to access data from Localization Objects when localizing a string.\nThe concept differs slightly from standard values ($VAL$) that can be injected into the localization string by allowing the localization string\nto select which properties to add to the resulting string and where.\nWhen a string is contextually localized with a localization object, then there's one root object (either a [Scope](loc_objects_documentation.md#scope) or [Localization Environment(loc_objects_documentation.md#localization_environment)].\nIn general this object can only be used for two purposes: Accessing other objects and getting the current date.\n\nThe documentation for the different localization objects can be found at [Localization Objects](loc_objects_documentation.md).\n\n### Using a localization object\nThe localization objects are used with the following syntax: `[(Object.)+Property]`.\n`(Object.)+` refers to a sequence of at least one object accessor and `Property` is the property\nthat is accessed by the last object in the sequence. For example, if the localization string is localized with an [Character](loc_objects_documentation.md#character) object\nthe following queries would get the character's name and the name of the country that the character belongs to `[Character.GetName]`\nand `[Character.Owner.GetName]`, respectively.\n\n### Condition in contextual localization\nConditions in contextual localization can be used to check if objects are null or not. The basic syntax for the condition is `[(OBJECT ? TRUE_CASE : FALSE_CASE)]`.\nWhere:\n* `OBJECT` is any object you can use to access a property from (for example, `Character` and `Character.Owner` are valid objects).\n* `TRUE_CASE` and `FALSE_CASE` are what is to be localized if `OBJECT` is not null and null, respectively. These can hold one of the following values:\n   1. `'LOC_KEY` - A localization key (`LOC_KEY`, note the prepending `'` that means that it's a localization key) that will be localized using the same context as the root contextual localization.\n   2. `(OBJECT.)+Property` - Standard access of a property from an object (discards the object before the `?`). `(OBJECT.)+` stands for a sequence of at least one object, with dots as separators.\n   3. (true case only) `.(OBJECT.)*Property` - Continue that object sequence from the object before the `?`. `(OBJECT.)*` stands for a potentially empty sequence of objects with dots as separators. This is more efficient than the second option since it will not redo the object getters before the `?`.\n\n### Relation to Event Scopes\nWhen a localization string is localized from a scoped context (for example effects or triggers), then the root [Scope](loc_objects_documentation.md#scope) is created\nfrom the event scope of that context. For example, an effect that creates a trade route between two countries `FROM` and `THIS`\ncould be localized with: `LOC_KEY: \"Creates a trade route between [FROM.GetName] and [THIS.GetName]\"`. For more information on\nhow the scope accessors `FROM`, `THIS`, `PREV` and `ROOT` works on `Scope` see TODO: Add link.\n\n### Documentation of localized objects\nIn general a scoped context (for example, effects and triggers) are localized using a [Scope](loc_objects_documentation.md#scope) object based on the scope of that context.\nHowever, there are legacy systems where this may not hold. For other places where localization keys are provided, please see the documentation\nfor which localization objects that are defined for that context."
	},
	"loc_formatter":	{
		"character_name":	"![MD]\nThe character_name formatter gets the name of the character.\n\n### Example:\n```\ncustom_effect_tooltip = character_name|hjalmar_schacht\n```\n",
		"country_culture":	"![MD]\nThe country_culture formatter formats the string using the country's cultural override (`TAG_token`) if it exists,\notherwise the generic version (`token`).\n\n### Localization Scope Object\nThe formatter requires the following Localization Scope Objets to be defined:\n* `Country` - The country that the idea is associated with.\n\n### Example\n```\ncustom_effect_tooltip = country_culture|generic_tank_organisation\n```\n",
		"idea_name":	"![MD]\nThe idea_name formatter formats gets the name for the idea.\n\n### Localization Scope Object\nThe formatter requires the following Localization Scope Objects to be defined:\n* `Country` - The country that the idea is associated with.\n\n### Example\n```\ncustom_effect_tooltip = idea_name|canadian_pacific_railway\n```\n",
		"advisor_desc":	"![MD]\nThe advisor_desc formatter gets the description for the advisor.\n\n### Localization Scope Object\nThe formatter requires the following Localization Scope Objects to be defined:\n* `Country` - The country that the idea is associated with.\n\n### Example\n```\ncustom_effect_tooltip = advisor_desc|hjalmar_schacht\n```\n",
		"country_leader_desc":	"![MD]\nThe country_leader_desc formatter gets the description for a possible country leader.\n\n### Localization Scope Object\nNo scope needed - This formatter searches in the database for the character with given ideology.\n\n### Parameters\nThe formatter supports two additional parameters, INDENT and IDEOLOGY\n- IDEOLOGY: (Mandatory) Select the characters ideology leader role to use, use the ideology group token prefixed with 'token:'.\n- INDENT: (Optional) The indent to be added to all lines of the country leader trait description (including header line).\n\n### Example\n```\ncustom_effect_tooltip = country_leader_desc|hjalmar_schacht\n\ncustom_effect_tooltip = {\n\tlocalization_key = country_leader_desc|hjalmar_schacht\n\tIDEOLOGY = token:fascism\n\tINDENT = 2_SPACES\n```\n",
		"tech_effect":	"![MD]\nThe tech_effect formatter gets the effect of finishing a technology.\n\n### Localization Scope Object\nThe formatter requires the following Localization Scope Objects to be defined:\n* `Country` - The country that the tech is associated with.\n\n### Example\n```\ncustom_effect_tooltip = tech_effect|early_transport_plane\n```\n",
		"idea_desc":	"![MD]\nThe idea_desc formatter gets the description for the idea.\n\n### Localization Scope Object\nThe formatter requires the following Localization Scope Objects to be defined:\n* `Country` - The country that the idea is associated with.\n\n### Example\n```\ncustom_effect_tooltip = idea_desc|canadian_pacific_railway\n```\n",
		"building_state_modifier":	"![MD]\nThe building_state_modifier gets the state modifiers for the provided building template and the provided scope.\n\nThe formatter takes special care of the following parameters:\n- INDENT: The indent to be added to all lines of the state modifier description (including header line).\n\n### Example:\n```\ncustom_effect_tooltip = building_state_modifier|dam\n```\n",
		"equipment_directories_that_can_use_module":	"![MD]\nThe equipment_directories_that_can_use_module gets a list of the different directories (e.g. tank, ship, planes)).\n\nThe formatter takes special care of the following parameters:\n- INDENT: The indent to be added to all lines of the state modifier description (including header line).\n\n### Example:\n```\ncustom_effect_tooltip = equipment_directories_that_can_use_module|tank_gas_turbine_engine\n```\n"
	},
	"loc_objects":	{
		"IndustrialOrg":	{
			"promotions":	[{
					"doc":	"![MD]\nGets the owner country of the industrial organisation",
					"name":	"Owner"
				}],
			"properties":	[{
					"doc":	"![MD]\nGets the name of the industrial organisation",
					"name":	"GetName"
				}]
		},
		"Character":	{
			"promotions":	[{
					"doc":	"![MD]\nGets the owner country of the character.",
					"name":	"Owner"
				}],
			"properties":	[{
					"doc":	"![MD]\nGets the pronoun for the character.",
					"name":	"GetHerHis"
				}, {
					"doc":	"![MD]\nGets the pronoun for the character.",
					"name":	"GetSheHe"
				}, {
					"doc":	"![MD]\nGets the ideology group of the character.",
					"name":	"GetIdeologyGroup"
				}, {
					"doc":	"![MD]\nGets the name of the character.",
					"name":	"GetName"
				}, {
					"doc":	"![MD]\nGets the pronoun for the character with an initial capital letter.",
					"name":	"GetHersHisCap"
				}, {
					"doc":	"![MD]\nGets the ideology of the character.",
					"name":	"GetIdeology"
				}, {
					"doc":	"![MD]\nGets the pronoun for the character with an initial capital letter.",
					"name":	"GetHerHisCap"
				}, {
					"doc":	"![MD]\nGets the pronoun for the character with an initial capital letter.",
					"name":	"GetSheHeCap"
				}, {
					"doc":	"![MD]\nGets the pronoun for the character.",
					"name":	"GetHersHis"
				}, {
					"doc":	"![MD]\nGets the pronoun for the character.",
					"name":	"GetHerHim"
				}, {
					"doc":	"![MD]\nGets the pronoun for the character with an initial capital letter.",
					"name":	"GetHerHimCap"
				}, {
					"doc":	"![MD]\nGets the pronoun for the character.",
					"name":	"GetHerselfHimself"
				}, {
					"doc":	"![MD]\nGets the pronoun for the character with an initial capital letter.",
					"name":	"GetHerselfHimselfCap"
				}]
		},
		"UnitLeader":	{
			"promotions":	[{
					"doc":	"![MD]\nGets the owner country of the unit leader.",
					"name":	"Owner"
				}],
			"properties":	[{
					"doc":	"![MD]\nGets her if the unit leader is a female, otherwise his.",
					"name":	"GetHerHis"
				}, {
					"doc":	"![MD]\nGets the rank of the unit leader.",
					"name":	"GetRank"
				}, {
					"doc":	"![MD]\nGets the codename of the operative leader.",
					"name":	"GetCodeName"
				}, {
					"doc":	"![MD]\nGets she if the unit leader is a female, otherwise he.",
					"name":	"GetSheHe"
				}, {
					"doc":	"![MD]\nGets the name of the unit leader.",
					"name":	"GetName"
				}, {
					"doc":	"![MD]\nGets the skill level of the unit leader.",
					"name":	"GetLeaderSkill"
				}, {
					"doc":	"![MD]\nGets Her if the unit leader is a female, otherwise His.",
					"name":	"GetHerHisCap"
				}, {
					"doc":	"![MD]\nGets She if the unit leader is a female, otherwise He.",
					"name":	"GetSheHeCap"
				}, {
					"doc":	"![MD]\nGets her if the unit leader is a female, otherwise him.",
					"name":	"GetHerHim"
				}, {
					"doc":	"![MD]\nGets Her if the unit leader is a female, otherwise Him.",
					"name":	"GetHerHimCap"
				}, {
					"doc":	"![MD]\nGets herself if the unit leader is a female, otherwise himself.",
					"name":	"GetHerselfHimself"
				}, {
					"doc":	"![MD]\nGets Herself if the unit leader is a female, otherwise Himself.",
					"name":	"GetHerselfHimselfCap"
				}]
		},
		"Country":	{
			"promotions":	[{
					"doc":	"![MD]\nGets the faction leader country of the current country.",
					"name":	"FactionLeader"
				}, {
					"doc":	"![MD]\nGets the original capital state of the current country.",
					"name":	"OriginalCapital"
				}, {
					"doc":	"![MD]\nGets the overlord country of the current country.",
					"name":	"Overlord"
				}, {
					"doc":	"![MD]\nGets the capital state of the current country.",
					"name":	"Capital"
				}],
			"properties":	[{
					"doc":	"![MD]\nGets the capitalized definite old name of the current country.",
					"name":	"GetOldNameDefCap"
				}, {
					"doc":	"![MD]\nGets the change rate description of the current country's power balance.",
					"name":	"GetChangeRateDesc"
				}, {
					"doc":	"![MD]\nGets Hers if the current country's leader is female, otherwise His.",
					"name":	"GetHersHisCap"
				}, {
					"doc":	"![MD]\nGets the name of the leader of the facist party of the current country.",
					"name":	"GetFascistLeader"
				}, {
					"doc":	"![MD]\nGets the communist party of the current country.",
					"name":	"GetCommunistParty"
				}, {
					"doc":	"![MD]\nGets the capitalized adjective of the current country without considering ideology.",
					"name":	"GetNonIdeologyAdjectiveCap"
				}, {
					"doc":	"![MD]\nGets the rule description of the active range of the current country's power balance.",
					"name":	"GetActiveRangeRuleDesc"
				}, {
					"doc":	"![MD]\nGets She if the current country's leader is female, otherwise He.",
					"name":	"GetSheHeCap"
				}, {
					"doc":	"![MD]\nGets the name of the current country's faction.",
					"name":	"GetFactionName"
				}, {
					"doc":	"![MD]\nGets hers if the current country's leader is female, otherwise his.",
					"name":	"GetHersHis"
				}, {
					"doc":	"![MD]\nGets herself if the current country's leader is female, otherwise himself.",
					"name":	"GetHerselfHimself"
				}, {
					"doc":	"![MD]\nGets Herself if the current country's leader is female, otherwise Himself.",
					"name":	"GetHerselfHimselfCap"
				}, {
					"doc":	"![MD]\nGets the name of the leader of the neutral party of the current country.",
					"name":	"GetNeutralLeader"
				}, {
					"doc":	"![MD]\nGets the adjective of the current country without considering ideology.",
					"name":	"GetNonIdeologyAdjective"
				}, {
					"doc":	"![MD]\nGets the modifier description of the current country's power balance.",
					"name":	"GetPowerBalanceModDesc"
				}, {
					"doc":	"![MD]\nGets the name of the active range of the current country's power balance.",
					"name":	"GetActiveRangeName"
				}, {
					"doc":	"![MD]\nGets Her if the current country's leader is female, otherwise His.",
					"name":	"GetHerHisCap"
				}, {
					"doc":	"![MD]\nGets the capitalized old adjective of the current country.",
					"name":	"GetOldAdjectiveCap"
				}, {
					"doc":	"![MD]\nGets the name of the right side of the current country's power balance.",
					"name":	"GetRightSideName"
				}, {
					"doc":	"![MD]\nGets the name of the trending side of the current country's power balance.",
					"name":	"GetTrendingSideName"
				}, {
					"doc":	"![MD]\nGets her if the current country's leader is female, otherwise him.",
					"name":	"GetHerHim"
				}, {
					"doc":	"![MD]\nGets Her if the current country's leader is female, otherwise Him.",
					"name":	"GetHerHimCap"
				}, {
					"doc":	"![MD]\nGets her if the current country's leader is female, otherwise his.",
					"name":	"GetHerHis"
				}, {
					"doc":	"![MD]\nGets the flag of the current country.",
					"name":	"GetFlag"
				}, {
					"doc":	"![MD]\nGets the modifier description of the active range of the current country's power balance.",
					"name":	"GetActiveRangeModDesc"
				}, {
					"doc":	"![MD]\nGets the adjective of the current country.",
					"name":	"GetAdjective"
				}, {
					"doc":	"![MD]\nGets the name of the current country without considering ideology.",
					"name":	"GetNonIdeologyName"
				}, {
					"doc":	"![MD]\nGets the name of the leader of the democratic party of the current country.",
					"name":	"GetDemocraticLeader"
				}, {
					"doc":	"![MD]\nGets the capitalized definite name of the current country without considering ideology.",
					"name":	"GetNonIdeologyNameDefCap"
				}, {
					"doc":	"![MD]\nGets the capitalized adjective of the current country.",
					"name":	"GetAdjectiveCap"
				}, {
					"doc":	"![MD]\nGets the ideology of the current country's ruling party as a noun.",
					"name":	"GetRulingIdeologyNoun"
				}, {
					"doc":	"![MD]\nGets the tag of the current country.",
					"name":	"GetTag"
				}, {
					"doc":	"![MD]\nGets the old name of the current country.",
					"name":	"GetOldName"
				}, {
					"doc":	"![MD]\nGets the ideology of the current country's ruling party.",
					"name":	"GetRulingIdeology"
				}, {
					"doc":	"![MD]\nGets the name of the current country with its flag.",
					"name":	"GetNameWithFlag"
				}, {
					"doc":	"![MD]\nGets the name of the leader of the communistic party of the current country.",
					"name":	"GetCommunistLeader"
				}, {
					"doc":	"![MD]\nGets she if the current country's leader is female, otherwise he.",
					"name":	"GetSheHe"
				}, {
					"doc":	"![MD]\nGets the manpower of the current country.",
					"name":	"GetManpower"
				}, {
					"doc":	"![MD]\nGets the name of the left side of the current country's power balance.",
					"name":	"GetLeftSideName"
				}, {
					"doc":	"![MD]\nGets the fascist party of the current country.",
					"name":	"GetFascistParty"
				}, {
					"doc":	"![MD]\nGets the old adjective of the current country.",
					"name":	"GetOldAdjective"
				}, {
					"doc":	"![MD]\nGets the democratic party of the current country.",
					"name":	"GetDemocraticParty"
				}, {
					"doc":	"![MD]\nGets the name of the current country's intelligence agency.",
					"name":	"GetAgency"
				}, {
					"doc":	"![MD]\nGets the deactivation effect description of the active range of the current country's power balance.",
					"name":	"GetActiveRangeDeactivationEffect"
				}, {
					"doc":	"![MD]\nGets the definite name of the current country.",
					"name":	"GetNameDef"
				}, {
					"doc":	"![MD]\nGets the name of the current country's ruling party.",
					"name":	"GetRulingParty"
				}, {
					"doc":	"![MD]\nGets the date of the last election in the current country.",
					"name":	"GetLastElection"
				}, {
					"doc":	"![MD]\nGets the name of the current country.",
					"name":	"GetName"
				}, {
					"doc":	"![MD]\nGets the capitalized definite name of the current country.",
					"name":	"GetNameDefCap"
				}, {
					"doc":	"![MD]\nGets the long name of the current country's ruling party.",
					"name":	"GetRulingPartyLong"
				}, {
					"doc":	"![MD]\nGets the neutral party of the current country.",
					"name":	"GetNeutralParty"
				}, {
					"doc":	"![MD]\nGets the name of the active side of the current country's power balance.",
					"name":	"GetActiveSideName"
				}, {
					"doc":	"![MD]\nGets the support of the current country's ruling party.",
					"name":	"GetPartySupport"
				}, {
					"doc":	"![MD]\nGets the definite old name of the current country.",
					"name":	"GetOldNameDef"
				}, {
					"doc":	"![MD]\nGets the name of the current country's leader.",
					"name":	"GetLeader"
				}, {
					"doc":	"![MD]\nGets the activation effect description of the active range of the current country's power balance.",
					"name":	"GetActiveRangeActivationEffect"
				}, {
					"doc":	"![MD]\nGets the icon of the current country's balance of power trend.",
					"name":	"GetBopTrendTextIcon"
				}, {
					"doc":	"![MD]\nGets the definite name of the current country without considering ideology.",
					"name":	"GetNonIdeologyNameDef"
				}, {
					"doc":	"![MD]\nGets the name of the current country's power balance.",
					"name":	"GetPowerBalanceName"
				}]
		},
		"PurchaseContract":	{
			"promotions":	[{
					"doc":	"![MD]\nGets the seller country of the purchase contract.",
					"name":	"Seller"
				}, {
					"doc":	"![MD]\nGets the buyer country of the purchase contract.",
					"name":	"Buyer"
				}],
			"properties":	[{
					"doc":	"![MD]\nGets the delivered payment of the purchase contract.",
					"name":	"GetDeliveredPayment"
				}]
		},
		"Terrain":	{
			"promotions":	[],
			"properties":	[{
					"doc":	"![MD]\nGets the name of the terrain.",
					"name":	"GetName"
				}]
		},
		"Building":	{
			"promotions":	[],
			"properties":	[{
					"doc":	"![MD]\nGets the name of the building.",
					"name":	"GetName"
				}]
		},
		"Scope":	{
			"promotions":	[{
					"doc":	"![MD]\nGets the combatant of the current scope.",
					"name":	"Combatant"
				}, {
					"doc":	"![MD] Gets the from scope.",
					"name":	"From"
				}, {
					"doc":	"![MD]\nGets the character of the current scope.",
					"name":	"Character"
				}, {
					"doc":	"![MD]\nGets the country of the current scope.",
					"name":	"Country"
				}, {
					"doc":	"![MD]\nDoes nothing.",
					"name":	"This"
				}, {
					"doc":	"![MD] Does nothing.",
					"name":	"THIS"
				}, {
					"doc":	"![MD]\nGets the purchase contract of the current scope.",
					"name":	"PurchaseContract"
				}, {
					"doc":	"![MD] Gets the player country.",
					"name":	"Player"
				}, {
					"doc":	"![MD]\nGets the industrial organisation of the current scope.",
					"name":	"IndustrialOrganisation"
				}, {
					"doc":	"![MD]\nGets the unit of the current scope.",
					"name":	"Unit"
				}, {
					"doc":	"![MD]\nGets the state of the current scope.",
					"name":	"State"
				}, {
					"doc":	"![MD] Gets the root scope.",
					"name":	"Root"
				}, {
					"doc":	"![MD]\nGets the operation of the current scope.",
					"name":	"Operation"
				}, {
					"doc":	"![MD]\nGets the special project of the current scope.",
					"name":	"SpecialProject"
				}, {
					"doc":	"![MD] Gets the previous scope.",
					"name":	"Prev"
				}, {
					"doc":	"![MD]\nGets the ace of the current scope.",
					"name":	"Ace"
				}],
			"properties":	[{
					"doc":	"![MD]\nGets the current game year.",
					"name":	"GetYear"
				}, {
					"doc":	"![MD]\nGets the current game date as a long string.",
					"name":	"GetDateText"
				}, {
					"doc":	"![MD]\nGets the current game month.",
					"name":	"GetMonth"
				}, {
					"doc":	"![MD]\nGets the current game date.",
					"name":	"GetDate"
				}]
		},
		"State":	{
			"promotions":	[{
					"doc":	"![MD]\nGets the controller country of the state.",
					"name":	"Controller"
				}, {
					"doc":	"![MD]\nGets the occupied country of the state.",
					"name":	"Occupied"
				}, {
					"doc":	"![MD]\nGets the owner country of the state.",
					"name":	"Owner"
				}],
			"properties":	[{
					"doc":	"![MD]\nGets the name of the capital victory point of the state.",
					"name":	"GetCapitalVictoryPointName"
				}, {
					"doc":	"![MD]\nGets the ID of the state.",
					"name":	"GetID"
				}, {
					"doc":	"![MD]\nGets the name of the state.",
					"name":	"GetName"
				}]
		},
		"LocalizationEnvironment":	{
			"promotions":	[{
					"doc":	"![MD]\nGets the terrain in the localization environment.",
					"name":	"Terrain"
				}, {
					"doc":	"![MD]\nGets the building in the localization environment.",
					"name":	"Building"
				}, {
					"doc":	"![MD]\nGets the province in the localization environment.",
					"name":	"Province"
				}],
			"properties":	[]
		},
		"Province":	{
			"promotions":	[{
					"doc":	"![MD]\nGets the terrain of the province.",
					"name":	"Terrain"
				}, {
					"doc":	"![MD]\nGets the controlling country of the province",
					"name":	"Controller"
				}],
			"properties":	[{
					"doc":	"![MD]\nGets the name of the province.",
					"name":	"GetName"
				}]
		},
		"Operation":	{
			"promotions":	[{
					"doc":	"![MD]\nGets the first operative of the operation.",
					"name":	"Operative0"
				}, {
					"doc":	"![MD]\nGets the second operative of the operation.",
					"name":	"Operative1"
				}, {
					"doc":	"![MD]\nGets the third operative of the operation.",
					"name":	"Operative2"
				}, {
					"doc":	"![MD]\nGets the fourth operative of the operation.",
					"name":	"Operative3"
				}, {
					"doc":	"![MD]\nGets the initiator country of the operation.",
					"name":	"Initiator"
				}, {
					"doc":	"![MD]\nGets the target country of the operation.",
					"name":	"Target"
				}],
			"properties":	[{
					"doc":	"![MD]\nGets the name of the operation.",
					"name":	"GetName"
				}]
		},
		"SpecialProject":	{
			"promotions":	[{
					"doc":	"![MD]\nGets the owner country of the special project.",
					"name":	"Owner"
				}],
			"properties":	[{
					"doc":	"![MD]\nGets the name of the special project",
					"name":	"GetName"
				}]
		},
		"Ace":	{
			"promotions":	[{
					"doc":	"![MD]\nGets the owner country of the ace.",
					"name":	"Owner"
				}],
			"properties":	[{
					"doc":	"![MD]\nGets the short name of the wing the ace is in.",
					"name":	"GetWingShort"
				}, {
					"doc":	"![MD]\nGets the name of the ace.",
					"name":	"GetName"
				}, {
					"doc":	"![MD]\nGets the surname of the ace.",
					"name":	"GetSurname"
				}, {
					"doc":	"![MD]\nGets Hers if the ace is a female, otherwise His.",
					"name":	"GetHersHisCap"
				}, {
					"doc":	"![MD]\nGets Her if the ace is a female, otherwise His.",
					"name":	"GetHerHisCap"
				}, {
					"doc":	"![MD]\nGets her if the ace is a female, otherwise him.",
					"name":	"GetHerHim"
				}, {
					"doc":	"![MD]\nGets Her if the ace is a female, otherwise Him.",
					"name":	"GetHerHimCap"
				}, {
					"doc":	"![MD]\nGets her if the ace is a female, otherwise his.",
					"name":	"GetHerHis"
				}, {
					"doc":	"![MD]\nGets the full name of the ace.",
					"name":	"GetFullName"
				}, {
					"doc":	"![MD]\nGets she if the ace is a female, otherwise he.",
					"name":	"GetSheHe"
				}, {
					"doc":	"![MD]\nGets the name of the wing the ace is in.",
					"name":	"GetWing"
				}, {
					"doc":	"![MD]\nGets the callsign of the ace.",
					"name":	"GetCallsign"
				}, {
					"doc":	"![MD]\nGets the name of the region of the mission the ace is on.",
					"name":	"GetMissionRegion"
				}, {
					"doc":	"![MD]\n\t\t\t\t\t\t\t\t   Gets She if the ace is a female, otherwise He.",
					"name":	"GetSheHeCap"
				}, {
					"doc":	"![MD]\nGets the type of the ace.",
					"name":	"GetAceType"
				}, {
					"doc":	"![MD]\nGets hers if the ace is a female, otherwise his.",
					"name":	"GetHersHis"
				}, {
					"doc":	"![MD]\nGets herself if the ace is a female, otherwise himself.",
					"name":	"GetHerselfHimself"
				}, {
					"doc":	"![MD]\nGets Herself if the ace is a female, otherwise Himself.",
					"name":	"GetHerselfHimselfCap"
				}]
		}
	},
	"effects":	{
		"add_legitimacy":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add_legitimacy = 10. Adds legitimacy to Scope country. Value has to be 0-100."
		},
		"add_stability":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Adds the stability to the country in scope. Example: add_stability = 5"
		},
		"add_manpower":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["none"],
			"description":	"Adds manpower to the country in scope or locally on a state if in state scope"
		},
		"custom_effect_tooltip":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"![MD]\nAppend an extra tooltip to the effect. The tooltip is a [bindable localization](script_concept_documentation.md#bindable-localization).\n\n### Examples\n```\ncustom_effect_tooltip = MY_TOOLTIP # Simple loc key tooltip\n```\n```\ncustom_effect_tooltip = {\n\tlocalization_key = MY_TOOLTIP # Root look key\n\tIMPORTANT_QUESTION = { # ID IMPORTANT_QUESTION in MY_TOOLTIP will get value:\n\t\tlocalization_key = MEANING_OF_LIFE # Root loc key in IMPORTANT_QUESTION\n\t\tANSWER = \"42\" # ID ANSWER in IMPORTANT_QUESTION will get value 42\n\t}\n\tJUST_AS_IMPORTANT = OR_NOT # ID JUST_AS_IMPORTANT in MY_TOOLTIP will get value OR_NOT\n}\n```\n"
		},
		"set_capital":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"move capital to state\nExample:\nset_capital = {\n\tstate = 1234\n\tremember_old_capital = no #default = yes\n}"
		},
		"add_state_core":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add core on state"
		},
		"remove_state_core":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"remove core on state"
		},
		"add_breakthrough_points":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Add breakthrough points to one specialization or all for a country scope.\n\tex:\n    add_breakthrough_points = {\n\t  specialization = <sp_specialization_id>\n      value = 3\n\t}\n    add_breakthrough_points = {\n\t  specialization = all\n      value = -1\n\t}\n\""
		},
		"raid_reduce_project_progress_ratio":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Reduce progress to the special project in state. Root scope is raid instance scope.\nThe input value is a ratio of the total needed progress to complete the special project, i.e. a decimal number between 0 and 1.\nex:\n# Root scope is raid\nstate = {\n  raid_reduce_project_progress_ratio = 0.1 # Reduces the project progress by 10%\n}\""
		},
		"change_tag_from":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Changes player to other country"
		},
		"add_province_modifier":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Adds static modifiers to specified province.\nadd_province_modifier = {\n\tstatic_modifiers = { mod_1 mod_2 }\n\tdays = 42 # will be temporary if specified, can be variable\nSelect 1 province:\n\tprovince = 500\nOr use:\n\tprovince = {\n\t\tid = 500 id = 501 id = 502 (evaluate for specified provinces)\n\t\tall_provinces (includes all in current state)\n\t\tlimit_to_coastal (only coastal provinces)\n\t\tlimit_to_border (only provinces bordering different country)\n\t\tlimit_to_naval_base (only provinces with a naval base)\n\t\tlimit_to_victory_point (only provinces with a VP)\n\t}\n}"
		},
		"set_country_flag":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"set country flag"
		},
		"clr_country_flag":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"clear country flag"
		},
		"set_global_flag":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"set global flag"
		},
		"clr_global_flag":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"clear global flag"
		},
		"random_scientist":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random scientists that fulfills the \"limit\" trigger. tooltip=key can be added to override tooltip title"
		},
		"every_scientist":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every scientist (or \\\"random_select_amount\\\" of random character if specified) of the country in scope, that fulfills the \\\"limit\\\" trigger.\n\ttooltip=key can be added to override tooltip title.\n\tBy default the effects are only displayed once, you may display them for each matching character with display_individual_scopes.\n\tex: GER = {\n\t  every_scientist = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tinclude_invisible = yes # Optional - default = no\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... character scope effects ...\n\t  }\n\t}\""
		},
		"create_colonial_division_template":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Create a colonial division template for overlord/owner. Available parameters are subject and division_template, where the subject parameter is the country tag for an overlords subject. And the division_template is the regular effect to create a division template.\nExample.\nIn country scope of overlord, E.g. ROOT = ENG\ncreate_colonial_division_template = {\n    subject = RAJ # Country tag\n    division_template = {\n        name = \"Infantry Division\"\n        division_names_group = RAJ_INF_01\n        ...\n        regiments = {\n            infantry = { x = 0 y = 0 }\n            infantry = { x = 0 y = 1 }\n            }\n        }\n    }\n}"
		},
		"add_scientist_level":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"\"![MD]\nAdd levels to a special project specialization for a scientist character in scope.\nThe `level` parameter is a scoped variable\n\n#### Example\n```\nmy_character = {\n\tadd_scientist_level = {\n\t\tlevel = 2 # accepts variables\n\t\tspecialization = specialization_nuclear\n\t}\n}\n```\""
		},
		"add_scientist_xp":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"\"![MD]\nAdd experience to a special project specialization for a scientist character in scope.\nThe `experience` parameter is a scoped variable.\n\n#### Example\n```\nex: my_character = {\n\tadd_scientist_xp = {\n\t\texperience = 2 # accepts variables\n\t\tspecialization = specialization_nuclear\n\t}\n}\n```\""
		},
		"add_scientist_trait":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"\"Add a trait to a scientist character in scope.\n\tex: my_character = {\n\t  add_scientist_trait = my_trait_token\n\t}\""
		},
		"remove_building":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Removes a building in a targeted state or province.\nExample:\n\nremove_building = {\n\ttype = air_base\n\tlevel = 1 # how many levels to remove\n\tstate = 32 # or a variable like var:target_state\n}\n\nThe building can also be specified through tags.\nExample:\nremove_building = {\n\ttags = facility # can be a single tag or a { }-wrapped list of tags\n\tlevel = 1 # how many levels to remove\n\tprovince = 500 # or a variable like var:target_province\n}\n\nYou can manually specify either a state or province as per the examples above. Both values and variables are supported.\nThe effect can also be called without specifying province or state if used within a state scope:\n\nremove_building = {\n\ttype = air_base\n\tlevel = 1 # how many levels to remove\n}\n\nIn this case, the building type must be a state building.\n\nNote that this effect will NOT recursively find province buildings from a state when no province has been specified.\n\""
		},
		"set_project_flag":	{
			"supported_scope":	["SPECIAL_PROJECT"],
			"supported_target":	["none"],
			"description":	"set project flag"
		},
		"modify_project_flag":	{
			"supported_scope":	["SPECIAL_PROJECT"],
			"supported_target":	["none"],
			"description":	"modify project flag. Only modifies if flag already exists.\nExample: modify_facility_flag = { flag = <name> value = <number> }"
		},
		"clr_project_flag":	{
			"supported_scope":	["SPECIAL_PROJECT"],
			"supported_target":	["none"],
			"description":	"clear project flag"
		},
		"every_active_scientist":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every active scientist (or \\\"random_select_amount\\\" of random character if specified) of the country in scope, that fulfills the \\\"limit\\\" trigger.\n\ttooltip=key can be added to override tooltip title.\n\tBy default the effects are only displayed once, you may display them for each matching character with display_individual_scopes.\n\tex: GER = {\n\t  every_active_scientist = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tinclude_invisible = yes # Optional - default = no\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... character scope effects ...\n\t  }\n\t}\""
		},
		"random_active_scientist":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random scientists that fulfills the \"limit\" trigger. tooltip=key can be added to override tooltip title"
		},
		"release":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"releases specified country as a puppet using your owned states"
		},
		"every_country":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every Country (or \\\"random_select_amount\\\" of random country if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.\nex:\nevery_country = {\n\ttooltip = my_loc_key # Optional\n\trandom_select_amount = 3 # Optional\n\tdisplay_individual_scopes = yes # Optional - default = no\n\t... country scope effects ...\n}\""
		},
		"random_country":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random country that fulfills the \"limit\" trigger."
		},
		"every_neighbor_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every neighbor Country of the country in scope (or \\\"random_select_amount\\\" of random country if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.\nex:\nSOV = {\n\tevery_neighbor_country = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... country scope effects ...\n\t}\n}\""
		},
		"random_neighbor_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random neighbor country that fulfills the \"limit\" trigger."
		},
		"add_relation_rule_override":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS"],
			"description":	"Adds an override rule to the country's relation to other countries. If there are multiple applicable overrides for a rule, then they are combined using AND logic for positive rules (e.g. can_access_market) and OR logic for negative rules (e.g. can_not_declare_war). \nThe description of the effect is based on the trigger or the target country.The description when using the rule override is based: on the target country; the trigger at the time of effect evaluation; or the provided usage_desc.\nThe following rules are currently supported: can_send_volunteer, can_access_market\nAlternative 1:\nadd_relation_rule_override = { \n target = GER # [Required] Target country usage_desc = REASON_DESCRIPTION # [Optional] usage description can_not_declare_war = yes # [Required] \n}\nAlternative 2:\nadd_relation_rule_override = { \n trigger = is_democratic_country # [Required] Named trigger usage_desc = DEMOCRATIC_COUNTRY # [Optional] usage description can_not_declare_war = yes # [Required] \n}\n"
		},
		"remove_relation_rule_override":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS"],
			"description":	"Removes an override rule to the country's relation to other countries.The desc key can be used to supply a custom description for the effect when a named trigger is used as key\nAlternative 1:\nremove_relation_rule_override = { \n target = GER # [Required] Target country can_not_declare_war = yes \n}\nAlternative 2:\nremove_relation_rule_override = { \n trigger = is_democratic_country # [Required] Named trigger can_not_declare_war = yes \n}\n"
		},
		"every_enemy_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every enemy Country of the country in scope (or \\\"random_select_amount\\\" of random country if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.\nex:\nSOV = {\n\tevery_enemy_country = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... country scope effects ...\n\t}\n}\""
		},
		"random_enemy_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random enemy country that fulfills the \"limit\" trigger."
		},
		"injure_scientist_for_days":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"\"Injure a scientist for x amount of days to a scientist character in scope.\n\tex: my_character = {\n\t  injure_scientist_for_days = 12\n\t}\""
		},
		"add_breakthrough_progress":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"![MD]\nAdd breakthrough progress to one specialization or all for a country scope.\nThe value can either be an absolute value or a script constant.\n\n#### Example\nAdding 3 breakthrough points to land specialization:\n```\nadd_breakthrough_progress = {\n\tspecialization = specialization_land\n    value = 3\n}\n```\nAdding -1 breakthrough points to all specializations:\n```\nadd_breakthrough_progress = {\n\tspecialization = all\n    value = -1\n}\n```\nAdding the value of the script constant `sp_breakthrough_progress.medium` to all specializations:\n```\nadd_breakthrough_progress = {\n\tspecialization = all\n\tvalue = sp_breakthrough_progress.medium\n}\n```\n\""
		},
		"country_event":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Fires a country event.\nExample:\ncountry_event = {\n\tid = germany.75 # The event to fire.\n\t# Optional Fields:\n\thours = 12 # The number of hours to wait before firing the event.\n\tdays = 5 # The number of days to wait before firing the event.\n\tmonths = 1 # The number of months to wait before firing the event, where a month is treated as 30 days.\n\t# Note:  hours, days, and months can all be used and will simply be added together.\n\trandom_hours = 18 # A random amount of hours to be added to the delay before firing, from 0 up to but not including random_hours.\n\trandom_days = 2 # A random amount of days to be added to the delay before firing, from 0 up to but one hour less than random_days.\n\t# Note:  random_hours and random_days can both be used and will simply be added together.\n\trandom = 6 # Equivalent to random_hours; preserverd for backwards compatibility.\n\trandom = { chance = 50 ... } # Specify a set of child effects to execute as part of this effect, with a percentage chance of randomly happening or not (as a group, not individually).\n\ttooltip = germany.75.t # Manually specify which tooltip to use for this effect.\n}\n"
		},
		"state_event":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["none"],
			"description":	"Fires a state event.\nExample:\nstate_event = {\n\tid = usa.61 # The event to fire.\n\t# Optional Fields:\n\thours = 12 # The number of hours to wait before firing the event.\n\tdays = 5 # The number of days to wait before firing the event.\n\tmonths = 1 # The number of months to wait before firing the event, where a month is treated as 30 days.\n\t\t# Note:  hours, days, and months can all be used and will simply be added together.\n\trandom_hours = 18 # A random amount of hours to be added to the delay before firing, from 0 up to but not including random_hours.\n\trandom_days = 2 # A random amount of days to be added to the delay before firing, from 0 up to but one hour less than random_days.\n\t\t# Note:  random_hours and random_days can both be used and will simply be added together.\n\trandom = 6 # Equivalent to random_hours; preserverd for backwards compatibility.\n\trandom = { chance = 50 ... } # Specify a set of child effects to execute as part of this effect, with a percentage chance of randomly happening or not (as a group, not individually).\n\ttooltip = usa.61.t # Manually specify which tooltip to use for this effect.\n\ttrigger_for = GER # Indicate which country this state effect applies to. Value can be any of the following:\n\t\t# controller - The country that currently controls the state.\n\t\t# owner - The country that currently owns the state.\n\t\t# occupied - The country that has been occupied in the state by the current controller.\n\t\t# from - The country of the from scope.\n\t\t# prev - The country of the prev scope.\n\t\t# root - The country of the root scope.\n\t\t# TAG - A hard-coded country tag such as GER or ENG.\n}\n"
		},
		"remove_province_modifier":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Removes a static modifiers to specified province\nremove_province_modifier = {\n\tstatic_modifiers = { mod_1 mod_2 }\nSelect 1 province:\n\tprovince = 500\nOr use:\n\tprovince = {\n\t\tid = 500 id = 501 id = 502 (evaluate for specified provinces)\n\t\tall_provinces (includes all in current state)\n\t\tlimit_to_coastal (only coastal provinces)\n\t\tlimit_to_border (only provinces bordering different country)\n\t\tlimit_to_naval_base (only provinces with a naval base)\n\t\tlimit_to_victory_point (only provinces with a VP)\n\t}\n}"
		},
		"mark_technology_tree_layout_dirty":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Forces the refresh of the hidden technologies for the scoped country\nmark_technology_tree_layout_dirty = yes\n"
		},
		"add_design_template_bonus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"![MD]\nAdd free bonus design discount to given types with a set of uses.\nThe value for uses and cost_factor can either be an absolute value or a script constant.\nCan use several equipment types, where 1 is mandatory\n\n#### Example\nAdding 40% discount to an equipment type:\n```\nadd_design_template_bonus = {\n\tuses = 1\n    cost_factor = 0.4\n\tequipment = light_tank_flame_chassis_0\n\tname = light_flame_chassis_loc\n}\n```\nAdding 40% discount to an equipment type and archetype with scripted constant:\n```\nadd_design_template_bonus = {\n\tuses = 2\n    cost_factor = cost.high\n\tequipment = light_tank_flame_chassis_0\n\tequipment = light_tank_chassis\n}\n```\n\""
		},
		"construct_building_in_random_province":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"\"Set facility level in a random province of state and country scope.\n\tex:\n    GER = {\n        65 = {\n\t\t\tconstruct_building_in_random_province = {\n\t\t\t\tland_facility = 1\n\t\t\t}\n\t\t}\n\t}\n\""
		},
		"add_raid_history_entry":	{
			"supported_scope":	["RAID_INSTANCE"],
			"supported_target":	["none"],
			"description":	"Add history entry to a raid.\nExample:\nadd_raid_history_entry = yes/no\n"
		},
		"set_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Sets a variable to a value or another variable\nExample: set_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values\n}"
		},
		"add_ai_strategy":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Adds strategy entry to country AI"
		},
		"random":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"a random effect"
		},
		"random_list":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Picks a random effect from the list based on the weight associated.\nThe weight can be a variable valid in the current scope.\nExample:\nrandom_list = {\n\t# enable logging the dice role in game.log\n\tlog = yes\n\tseed = var_name/const/random #if specified, it will use this seed instead of scope seed for picking a random\n\t# some effect with an associated weight\n\t10 = { add_political_power=10 }\n\t10 = { add_political_power=100 }\n\tsome_var = { add_political_power=1000 }\n}"
		},
		"white_peace":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Makes a white peace between the two countries if at war. ROOT is considered the winner while the target tag is considered the loser (which affects things like name of the PC as well as PC related on-actions).\nExample:\nSOV = {\n  white_peace = {\n    tag = FIN\n    message = FIN_agree_peace\n  }\n}"
		},
		"hidden_effect":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Effect not shown in tooltips"
		},
		"if":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"a conditional effect"
		},
		"add_state_claim":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add claim on state"
		},
		"remove_state_claim":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"remove claim on state"
		},
		"add_opinion_modifier":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Add opinion modifier(s) to target(s)"
		},
		"teleport_railway_guns_to_deploy_province":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Teleport the target country's railway guns to the province to which railway guns are deployed."
		},
		"remove_opinion_modifier":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Remove opinion modifier from target"
		},
		"add_equipment_bonus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	" Adds the specified equipment bonuses to the country. As description the given loc key or the name of given special project will be used. Same usage as in Ideas/National spirits.\nExample:\nadd_equipment_bonus = {\n\tproject = FROM # Optional special project scope for using special project name. If not set, the name will be used.\n\tbonus = {\n\t\tarmor = { # Type of equipment\n\t\t\t\t\tarmor_value = 3 # Bonus to apply to the stats of the equipment type\n\t\t\t\t\tsoft_attack = 3\n\t\t\t\t\tinstant = yes # Optional. Default no. If true, the bonus will be applied immediately. Otherwise it will be applied only on new equipment variant creation.\n\t\t}\n\t\tsmall_plane_naval_bomber_airframe = {\n\t\t\t\t\tair_range = 0.1 naval_strike_attack = 0.1\n\t\t}\n\t}\n}\n\nadd_equipment_bonus = {\n\tname = SUPER_BONUS_NAME # Optional loc key to use as name.\n\tbonus = {\n\t\tsmall_plane_naval_bomber_airframe = {\n\t\t\t\t\tair_range = 0.1 naval_strike_attack = 0.1\n\t\t}\n\t}\n}"
		},
		"create_railway_gun":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Create railway gun effect, just like in OOB, example:\ncreate_railway_gun = {\n\tequipment = railway_gun_equipment_1\n\tname = \"Created Railway Gun\" #optional\n\tlocation = 12406 #optional, created in capital otherwise\n}"
		},
		"clear_rule":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Cleares rule added by set_rule. In the example it will clear can_not_declare_war = yes set by set_rule : \nclear_rule = { \n can_not_declare_war = yes \n}"
		},
		"create_country_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"creates a leader and adds it to proper party in country\nif a character with the same token, or the same name already exists, then just add the country leader role.\n\nExample:\ncreate_country_leader = {\n\tname = \"Leader Name\"\n\tname = XXX_leader_name # optional, faster to find an already existing character\n\tdesc = \"LEADER_DESC_LOCALIZATION_TAG\"\n\tpicture = \"Portrait_leader_name.dds\" # picture = \"....\" also supported for backwards compatibility\n\texpire = \"1965.1.1\"\n\tideology = despotism\n\ttraits = {\n\t\tthe_director\n\t}\n}"
		},
		"random_subject_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Executes child effects on random subject country that fulfills the limit."
		},
		"every_subject_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every subject Country of the country in scope (or \\\"random_select_amount\\\" of random country if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.\nex:\nSOV = {\n\tevery_subject_country = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... country scope effects ...\n\t}\n}\""
		},
		"log":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Print message to game.log, console (if visible) and history logger (if running. you can use category|log to specify a category), Can be localized"
		},
		"create_unit":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Create unit effect, just like in OOB, example: \ncreate_unit = { \n\t# unit detauls \n\tdivision = \"name = \\\"1. Northern Redemption Army\\\" division_template = \\\"Redemption Army\\\" start_experience_factor = 0.5\" \n\t# country to spawn unit for \n\towner = MAN \n\t \n\t \n\t# a prov id can be specified \n\tprioritize_location = 12406 \n\t \n\t# can be set to yes to be able to spawn units on enemy provs. \n\tallow_spawning_on_enemy_provs = no \n\t# province controllers can be scored using this scorer. otherwise it will prio your owned provs first, friendly provs second.  \n\t# it will also prio provs with scores and less units firstl \n\tcountry_score = { \n\t\tbase = 100 \n\t\t \n\t\tmodifier = { \n\t\t\ttag = MAN \n\t\t\tadd = 100 \n\t\t} \n\t} \n   count = 1 # can be specified to spawn more than one units \n   id = 42 # an id can be given to delete units later on   divisional_commander_xp = 4 # give the division commander experience on unit creation }"
		},
		"activate_advisor":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Place an advisor in their respective role slot\n\nExample:\nactivate_advisor = GER_character_token_air_chief\n"
		},
		"deactivate_advisor":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Dismiss an advisor from their currently occupied role slot\n\nExample:\ndeactivate_advisor = GER_character_token_air_chief\n"
		},
		"sound_effect":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Plays sound effect"
		},
		"add_equipment_subsidy":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Adds an equipment subsidy to the country in scope.\nExample:\nGER = {\n\tadd_equipment_subsidy = \n\t{\n\t\tcic = 100 # Amount of CIC for the subsidy.\n\t\tequipment_type = support_equipment # The target archetype of the subsidy\n\t\tseller_tags = {RAJ AST} # The possible sellers that this subsidy can apply to. [Mutually exclusive with seller_trigger]\n\t\tseller_trigger = scripted_trigger_name # The name of a scripted trigger to check whether to apply the subsidy or not. [Mutually exclusive with seller_tags]\n\t}\n}\""
		},
		"remove_civil_war_target":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Removes a country as a civil war target (removed from both sides)\n\nExample:\nremove_civil_war_target = TAG"
		},
		"add_trait":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"add trait from specified list to character.\nadd_trait = {\n\tcharacter = GER_character_token # optional if inside character scope\n\ttrait = brilliant_strategist\n\tslot = political_advisor #Only required for updating advisor\n\tideology = fascism_ideology #Only required for updating country leader\n}"
		},
		"remove_trait":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"remove trait from specified list to character.\nremove_trait = {\n\tcharacter = GER_character_token # optional if inside character scope\n\ttrait = brilliant_strategist\n\tslot = political_advisor #Only required for updating advisor\n\tideology = fascism_ideology #Only required for updating country leader\n}"
		},
		"promote_leader":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"promotes general to field marshal"
		},
		"randomize_weather":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Randomize weather effect"
		},
		"break_embargo":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"breaks an existing embargo from ROOT to the specified tag. Note this will only work if used on the sending country"
		},
		"division_template":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add a division template to country"
		},
		"destroy_unit":	{
			"supported_scope":	[],
			"supported_target":	["none"],
			"description":	"destroy currently scoped unit"
		},
		"random_state_division":	{
			"supported_scope":	["STATE"],
			"supported_target":	["CAPITAL"],
			"description":	"Executes children effects on a random division that fulfill the \"limit\" trigger on a state. tooltip=key can be added to override tooltip title"
		},
		"every_state_division":	{
			"supported_scope":	["STATE"],
			"supported_target":	["CAPITAL"],
			"description":	"\"Executes children effects on every Division currently in the state in scope (or \\\"random_select_amount\\\" of random divisions if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching division with display_individual_scopes.\nex:\nSOV = {\n\tevery_state_division = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... division scope effects ...\n\t}\n}\""
		},
		"add_history_entry":	{
			"supported_scope":	[],
			"supported_target":	["none"],
			"description":	"add_history_entry = {\nkey = custom_localized_key\nsubject = \"Custom String (not localized)\"\nallow = yes/no (allow medal award)\n}"
		},
		"set_air_oob":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with key \"air\") on that country.\nOnly intended to be used within history files.\n\nExample:\nset_air_oob = \"ENG_1936_Air\""
		},
		"send_embargo":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"embargos specified tag"
		},
		"set_occupation_law":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Sets the occupation law for an occupied country, occupied state, or the default occupation law of an occupying country.\n\n- If THIS is a country and it's the same as the PREV country, then THIS's default law is set.\n- If THIS is a country and it's different from the PREV country, then PREV's country law override for THIS is set.\n- If THIS is a state, then PREV's state law override for THIS is set.\n\nThe token default_law is used to remove a country or state override, or to set a country's default law to the law defined with starting_law=yes.\n\nExample:\nGER = { set_occupation_law = foreign_civilian_oversight }\nGER = { POL = { set_occupation_law = default_law } }\nGER = { 123 = { set_occupation_law = military_governor_occupation } }\""
		},
		"change_division_template":	{
			"supported_scope":	[],
			"supported_target":	["none"],
			"description":	"change_division_template = \"My Template Name\""
		},
		"set_occupation_law_where_available":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"See set_occupation_law for basic functionality. What differentiates this effect is that if the law is not available on the given level it will attempt to set it on a level below. I.e. if the law can't be set as the default law it will try to set it on each country, and if that fails it will try to set it on each state. Any existing law overrides below a level at which a law is successfully set will be cleared.\n\nExample:\nITA = { set_occupation_law_where_available = colonial_police } # Set law in all countries/states where it's available.\nITA = { every_occupied_country = { set_occupation_law_where_available = default_law } } # Remove all country and state overrides.\""
		},
		"set_country_leader_ideology":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"change the ideology of active leader"
		},
		"add_country_leader_trait":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"Add country leader trait to the scoped character or scoped country's leader.\nIn scoped character, will need to give the ideology if the character has several country leader roles.\nExample 1: SOV_joseph_stalin = { add_country_leader_trait = underage_monarch }\nExample 2: HUN_miklos_horthy = { add_country_leader_trait = { ideology = oligarchism trait = anti_communist } }\nExample 3: SOV = { add_country_leader_trait = underage_monarch }"
		},
		"remove_country_leader_trait":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"Remove country leader trait from the scoped character or scoped country's leader.\nIn scoped character, will need to give the ideology if the character has several country leader roles.\nExample 1: SOV_joseph_stalin = { remove_country_leader_trait = underage_monarch }\nExample 2: HUN_miklos_horthy = { remove_country_leader_trait = { ideology = oligarchism trait = anti_communist } }\nExample 3: SOV = { remove_country_leader_trait = underage_monarch }"
		},
		"set_political_party":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"set popularity of a political party\n\nExample:\nset_political_party = {\n\tideology = neutrality\n\tpopularity = 50\n}"
		},
		"set_politics":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"set_politics: \nruling_party = key of new ruling ideology\nelections_allowed = yes/no\noptional (renames the ruling party and displays correct loc):\nlong_name = loc_key\nname = loc_key"
		},
		"add_ideas":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add idea(s) to country"
		},
		"remove_ideas":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"remove idea(s) from country"
		},
		"add_political_power":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add political power to country"
		},
		"set_political_power":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"set political power for country"
		},
		"set_division_force_allow_recruiting":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Force allows division recruiting for a division template\nExample: set_division_force_allow_recruiting = { division_template = <name> force_allow_recruiting = <bool (default:yes)> }"
		},
		"set_technology":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"sets technology level(s) on country. example : set_technology = { \n\tinfantry_weapons = 1 \n\tinfantry_weapons1 = 1 \n\tinfantry_weapons2 = 1 \n\timproved_infantry_weapons = 1 \n\tpopup = no # default is yes. if set to no, no pop up will display for player \n}"
		},
		"gain_xp":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["any"],
			"description":	"Grant experience to the scoped in unit leader. Cannot be used to remove experience.\nThe unit leader is promoted to the next skill level if applicable.\nExample:\ngain_xp = 5\n"
		},
		"create_navy_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"create navy leader for country"
		},
		"remove_unit_leader_trait":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Remove trait from unit leader\nExample: SOV_konstantin_rokossovsky = { remove_unit_leader_trait = media_personality }"
		},
		"add_unit_leader_trait":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Add trait to unit leader.\nExample: SOV_konstantin_rokossovsky = { add_unit_leader_trait = media_personality }"
		},
		"set_state_owner":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"set owner for state"
		},
		"delete_unit":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"delete units of a country. no tooltip is generated. example: \n\nExample:\ndelete_unit = { \n\tdivision_template = template_name # can be filtered a specific template \n\tid = 42 # can be filtered to a given id in create unit effect \n\tstate = 64 # can be filtered by a given state \n\tdisband = yes # default is no. if set to yes the game will refund equipment/manpower\n}"
		},
		"puppet":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Puppets specified country. By default, cancels the puppets existing war relations.\nExample 1:\nENG = {\n  puppet = ITA\n}\nExample 2:\nENG = {\n  puppet = {\n    target = ITA\n    end_wars = yes  # Optional, default yes. Will not cancel non-civil wars if set to no.\n    end_civil_wars = yes  # Optional, default yes. Will not cancel civil wars if set to no.\n  }\n}\n"
		},
		"set_state_controller":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"set controller for state"
		},
		"add_random_valid_trait_from_unit":	{
			"supported_scope":	[],
			"supported_target":	["none"],
			"description":	"for use ONLY with root scope unit, target scope: character add_random_valid_trait_from_unit = FROM"
		},
		"add_unit_medal_to_latest_entry":	{
			"supported_scope":	[],
			"supported_target":	["none"],
			"description":	"add_unit_medal_to_latest_entry = { unit_medals = key }"
		},
		"add_divisional_commander_xp":	{
			"supported_scope":	[],
			"supported_target":	["none"],
			"description":	"add divisional commander xp to unit: add_divisional_commander_xp = 10"
		},
		"transfer_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"set owner and controller for state"
		},
		"set_state_flag":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"set state flag"
		},
		"clr_state_flag":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"clear state flag"
		},
		"set_party_rule":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Adds rule to the country's party.\nset_party_rule = { \n ideologly = communism # [Required] selection criteria for the party desc = desc_key # a description can be given to rule (you can get original tooltip using DESC key) \n can_not_declare_war = yes \n}"
		},
		"create_faction":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"create faction of specified name"
		},
		"add_nuclear_bombs":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add nukes to country"
		},
		"annex_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	""
		},
		"add_building_construction":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"Starts building construction for amount of levels in specified state or province"
		},
		"dismantle_faction":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"dismantle faction led by the current country"
		},
		"add_to_faction":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"adds specified country to faction"
		},
		"remove_from_faction":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"removes specified country from faction"
		},
		"give_guarantee":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"guarantees specified country"
		},
		"give_military_access":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"gives military access to the specified country"
		},
		"random_state":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Executes children effects on a random state that fulfills the \"limit\" trigger.\nState ids can be specified with the \"prioritize\" attribute and they will be\npicked first if they fulfill the trigger.\n"
		},
		"random_owned_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random owned state that fulfills the \"limit\" trigger. \nprioritize = { <stateID> <stateID> } to pick those states first if they fulfull the limit"
		},
		"random_neighbor_state":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random neighbor state that fulfills the \"limit\" trigger."
		},
		"every_state":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every State (or \\\"random_select_amount\\\" of random state if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching state with display_individual_scopes.\nex:\nevery_state = {\n\ttooltip = my_loc_key # Optional\n\trandom_select_amount = 3 # Optional\n\tdisplay_individual_scopes = yes # Optional - default = no\n\t... state scope effects ...\n}\""
		},
		"every_owned_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every State owned by the country in scope (or \\\"random_select_amount\\\" of random state if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching state with display_individual_scopes.\nex:\nSOV = {\n\tevery_owned_state = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... state scope effects ...\n\t}\n}\""
		},
		"every_neighbor_state":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every State neighboring the state in scope (or \\\"random_select_amount\\\" of random state if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching state with display_individual_scopes.\nex:\n42 = {\n\tevery_neighbor_state = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... state scope effects ...\n\t}\n}\""
		},
		"add_contested_owner":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"![MD]\nAdds a contested owner to a state.\nThe effect can be used either from a country or a state scope and accepts the other as parameter.\nThe effect is localized with a localization environment containing `Country` and `State`.\n\n### Example\nThe following example has the same end result and localization.\n```\n42 = {\n\tadd_contested_owner = GER\n}\nGER = {\n\tadd_contested_owner = 42\n}\n```\nStandard scope accessors can also be used:\n```\n### Assuming current scope is a state and FROM is a country scope\nadd_contested_owner = FROM\n```\n"
		},
		"news_event":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Fires a news event.\nExample:\nnews_event = {\n\tid = news.251 # The event to fire.\n\t# Optional Fields:\n\thours = 12 # The number of hours to wait before firing the event.\n\tdays = 5 # The number of days to wait before firing the event.\n\tmonths = 1 # The number of months to wait before firing the event, where a month is treated as 30 days.\n\t\t# Note:  hours, days, and months can all be used and will simply be added together.\n\trandom_hours = 18 # A random amount of hours to be added to the delay before firing, from 0 up to but not including random_hours.\n\trandom_days = 2 # A random amount of days to be added to the delay before firing, from 0 up to but one hour less than random_days.\n\t\t# Note:  random_hours and random_days can both be used and will simply be added together.\n\trandom = 6 # Equivalent to random_hours; preserverd for backwards compatibility.\n\trandom = { chance = 50 ... } # Specify a set of child effects to execute as part of this effect, with a percentage chance of randomly happening or not (as a group, not individually).\n\ttooltip = news.251.t # Manually specify which tooltip to use for this effect.\n}\n"
		},
		"declare_war_on":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"declares war on specified country"
		},
		"set_relation_rule":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS"],
			"description":	"DEPRECATED: See add_relation_rule_override"
		},
		"add_scaled_political_power":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add political power to country scaled by the difference in IC between the receiver and another country"
		},
		"hold_election":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Immediately holds an election in the target country"
		},
		"add_popularity":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add popularity to an ideology in a country\n\nExample:\nadd_popularity = {\n\tideology = neutrality\n\tpopularity = 0.05\n}"
		},
		"remove_ideas_with_trait":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Remove all ideas with specified trait from country"
		},
		"start_civil_war":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"![MD] Given ideology starts a civil war in the country.\n\nFor 'keep triggers', the scope is :\nTHIS = Character\nFROM = Target country\n\nExample :\n```\nstart_civil_war = {\n\tideology = revolting ideology\n\truling_party = ruling party for country\n\tsize = 0-1 Size modifier of the revolt. Affects stockpile, army, air and navy as well\n\tarmy_ratio = 0-1 Overrides size modifier for army\n\tnavy_ratio = 0-1 Overrides size modifier for navy\n\tair_ratio = 0-1 Overrides size modifier for air\n\tstates = {...} States that go to the revolter. Use \\\"all\\\" to include all states.\n\tstates_filter = {...} States that go to the revolter. Filtering trigger on the states scripted to go to the revolter.\n\tkeep_all_characters = yes - keep all characters on target country side - will ignore all following keep_ parameters - default value = no\n\tkeep_unit_leaders = {...} specify ID of unit leaders that remain with the original country\n\tkeep_unit_leaders_trigger = {...} Trigger for unit leaders to remain with the original country\n\tkeep_scientists_trigger = {...} Trigger for scientist to remain with the original country\n\tkeep_political_leader = yes/no # optional, default is no; If yes, the party leader of the revolting ideology will not join the revolter as its leader.\n\tkeep_political_party_members = yes/no # optional, default is no; If yes, it will keep the non main leaders of the party leaders in original country\n\t ... effect list ... # you can list effects that will run on civil war country\n}\n```\n"
		},
		"set_unit_organization":	{
			"supported_scope":	[],
			"supported_target":	["none"],
			"description":	"set unit organization to current * value: set_unit_organization = 0.5, values between 0 and 1"
		},
		"retire_country_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"retires a country leader and removes him as leader of his party, making the next in line the new party and country leader"
		},
		"kill_country_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"kills a country leader and removes him completely, making the next in line the new party and country leader"
		},
		"release_puppet":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"releases specified country as puppet using states you own"
		},
		"create_wargoal":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"creates wargoal for country in scope"
		},
		"add_claim_by":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Add state claim by country."
		},
		"remove_claim_by":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Removes state claim by country."
		},
		"add_core_of":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Add state as core of country"
		},
		"remove_core_of":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Removes state as core of country"
		},
		"army_experience":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add army experience for country"
		},
		"navy_experience":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add naval experience for country"
		},
		"air_experience":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add air experience for country"
		},
		"save_event_target_as":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"save an event target"
		},
		"save_global_event_target_as":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"save a global event target"
		},
		"clear_global_event_target":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"clear a global event target"
		},
		"clear_global_event_targets":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"clear all global event targets"
		},
		"unlock_national_focus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"unlocks a focus for a country"
		},
		"add_tech_bonus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"adds a limited use tech bonus"
		},
		"set_demilitarized_zone":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"sets the demilitarized status for currently scoped state"
		},
		"add_research_slot":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Adds a research slot (negative values subtracts)"
		},
		"set_research_slots":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Sets the number of research slots"
		},
		"set_border_war":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"starts a border war in a state with neighbouring state that also has border war"
		},
		"set_equipment_fraction":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Modify all equipments by factor"
		},
		"add_threat":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Adds country threat"
		},
		"send_equipment":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Sends to target scope specified amount of equipment."
		},
		"set_rule":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Adds rule to country. This one overrides all other rules on country \nset_rule = { \n desc = desc_key # A description of why the rule is set (you can get original tooltip using DESC key) \n can_not_declare_war = yes \n}"
		},
		"diplomatic_relation":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Set up a diplomatic relation between two nations. Example: \ndiplomatic_relation = { \n\tcountry = POR #target country\n\trelation = military_access #type of relation\n\tactive = yes #yes to add relation, no to cancel existing one\n}"
		},
		"effect_tooltip":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Shows just tooltip of effects"
		},
		"add_resource":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["none"],
			"description":	"Adds/removes resource production to state\n\nExample:\nadd_resource = {\n  type = steel #resource type to add/destroy  amount = 5 #amount to add\n  state = 42 #can be also read from scope\n  days = 60 #a resource can be added/removed temporarily\n  show_state_in_tooltip = no #Should we show in which state we add the resource(default = yes)?\n}\n"
		},
		"remove_unit_leader":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"remove a unit leader ( remove_unit_leader=ID )"
		},
		"add_timed_idea":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Add a time-limited idea to country in scope\nex:\nSOV = {\n\tadd_timed_idea = {\n\t\tidea = my_idea_id\n\t\tdays = 5\n\t}\n\tadd_timed_idea = {\n\t\tidea = my_idea_id\n\t\tyears = 1\n\t\tmonths = 2\n\t\tdays = 5\n\t\t# NB: at least 1 of year/month/days is mandatory\n\t\t# NB: accept positive integer or variables\n\t\t# NB: tooltip will use the same year/month/day format as input\n\t}\n}\""
		},
		"end_puppet":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Stops specefied country being a puppet of current country"
		},
		"load_oob":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Immediately loads an Order of Battle (OOB) file.\n\nExample:\nload_oob = \"ENG_1936\""
		},
		"create_import":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Creates trade between two countries"
		},
		"add_named_threat":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Adds country threat"
		},
		"set_province_controller":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"set controller for province"
		},
		"set_major":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Sets mandatory major country flag. A country can still become a major if their industry is strong enough and they are not a subject.\nExample:\nDEN = { set_major = yes }"
		},
		"create_field_marshal":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"create field marshal for country"
		},
		"create_corps_commander":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"create corps commander for country"
		},
		"goto_province":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Goes to stated province."
		},
		"goto_state":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Goes to stated state."
		},
		"leave_faction":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Country leaves the faction"
		},
		"complete_national_focus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"completes a focus for a country"
		},
		"set_party_name":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"change partyname for an ideology in a country"
		},
		"add_extra_state_shared_building_slots":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"add extra shared building slot to state"
		},
		"reverse_add_opinion_modifier":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Add opinion modifier(s) to target(s)"
		},
		"add_to_war":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"adds country to the specified war:\nENG = {\n\tadd_to_war = {\n\t  targeted_alliance = SOV # Country to which side we want to join\n\t  enemy = PER # Which country we want to declare war on\n\t  hostility_reason = asked_to_join # The reason for joining the war\n\t  single_target_only = yes # yes if we want to target only the given country and not all enemies of targeted_alliance\n  }\n}"
		},
		"show_ideas_tooltip":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"show what idea does"
		},
		"create_equipment_variant":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Creates a new equipment variant.\nExample:\ncreate_equipment_variant = {\n\tname = \"Yorktown Class\" # Optional.\n\tname_group = USA_CV_HISTORICAL # Optional. If not set, parent's name group will be inherited.\n\ttype = ship_hull_carrier_1 # Must be a type and not an archetype.\n\tallow_without_tech = yes # Optional. Default no. If yes, create the variant even if the type hasn't been unlocked yet. Otherwise created the variant once the type research completes.\n\tparent_version = 3 # Default 0. If not found the default variant will be used (or created).\n\tobsolete = yes # Optional. Default no.\n\tmark_older_equipment_obsolete = yes # Optional. Default no. Marks all older (non-chassis) equipment variants as obsolete as long as the following matches: Archetype, niche, mission set (for planes).\n\trole_icon_index = 3 # Optional. Default 'auto', leverage AI design logic.\n\tupgrades = { # Optional. The level on each upgrade is inherited from the parent.\n\t\tship_deckspace_upgrade = 1\n\t\tcarrier_armor_upgrade = 2\n\t}\n\tmodules = { # Optional. The module installed in each slot is inherit from the parent.\n\t\tfixed_ship_engine_slot = carrier_ship_engine_2\n\t\tfixed_ship_secondaries_slot = empty # Clears the slot if the parent has any module installed.\n\t}\n\tmodel = \"GER_light_armor_2_entity\" # Optional.\n\ticon = \"gfx/interface/technologies/ger_basic_light_tank.dds\" # Optional. GFX names are also supported e.g. \"GFX_GER_basic_light_tank_medium\".\n    design_team = mio:my_mio_token # Optional. accepts mio:token, variable or keyword\n}"
		},
		"add_equipment_production":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Creates a new production line for the input equipment.\nex:\nGER = {\n\tadd_equipment_production = {\n\t\t\tequipment = {\n\t\t\t\t\ttype = ship_hull_cruiser_submarine\n\t\t\t\t\tcreator = \"ITA\"\n\t\t\t\t\tversion_name = \"Cagni Class\"\n\t\t\t}\n\t\t\tname = \"Ammiraglio Millo\"\n\t\t\trequested_factories = 1 #Optional\n\t\t\tprogress = 0.35 # Optional\n\t\t\tefficiency = 0.1 # Optional\n\t\t\tamount = 2 # Optional, accepts value or variable\n\t\t\tindustrial_manufacturer = mio:generic_mio_organization_ship_submarine # Optional, accepts mio:token, variable or keyword\n\t}\n}\n}\""
		},
		"add_ace":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"adds an air ace"
		},
		"random_owned_controlled_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random owned and controlled state that fulfills the \"limit\" trigger.\nprioritize = { <stateID> <stateID> } to pick those states first if they fulfull the limit"
		},
		"ai_message":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"ai message... ?"
		},
		"every_other_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every Country different from the one in scope (or \\\"random_select_amount\\\" of random country if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.\nex:\nSOV = {\n\tevery_other_country = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... country scope effects ...\n\t}\n}\""
		},
		"random_other_country":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random country that fulfills the \"limit\" trigger. Excludes current country"
		},
		"add_equipment_to_stockpile":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Add or remove equipment from country stockpiles.\nExample:\nadd_equipment_to_stockpile = {\n\ttype = strat_bomber_equipment_2\n\tamount = 100 # May be a variable. Equipment will be removed if the value is negative.\n\tproducer = USA # Optional. If not specified the effect will be applied to all creators.\n}"
		},
		"swap_ideas":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"swap 2 ideas. \n Syntax: swap_idea = {\n  remove_idea = <idea>\n  add_idea = <idea>\n  add_days = 10 #optional, will add/subtract duration for new idea that replaces the old one with duration\n  days = 25 #optional, will set the duration for the new idea\n}"
		},
		"damage_building":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Damages a building in a targeted state or province.\nExample:\ndamage_building = {\n\ttype = industrial_complex\n\tdamage = 2.4\n\trepair_speed_modifier = -0.5 # repair will be 50% slower until building is fully repaired\n}\n\nThe building can also be specified through tags.\nExample: damage_building = {\n\ttags = facility # can be a single tag or a { }-wrapped list of tags\n\tdamage = 2.4\n\trepair_speed_modifier = -0.5 # repair will be 50% slower until building is fully repaired\n}\n\nThe above examples will only work in state scope where buildings can be found through the scope state,\nand province buildings are recursively found from that state.\n\nYou can also manually specify either a state or province:\n\ndamage_building = {\n\ttype = industrial_complex\n\tprovince = 500 # or a variable like var:target_province\n\tdamage = 2.4\n}\n\ndamage_building = {\n\ttype = industrial_complex\n\tstate = 35 # or a variable like var:target_state\n\tdamage = 2.4\n}\n\nIf the building is a province building but only a state has been specicied, all provinces in that state will be\nsearched to find the first matching province building.\n\""
		},
		"release_autonomy":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"releases specified country with specified level of autonomy.\nExample:\nENG = { \n release_autonomy = { \n  target = RAJ \n  autonomy_state = autonomy_puppet \n  freedom_level = 0.5 \n  release_non_owned_controlled = yes # default no. if yes you will release states you only control as well  force_change_controller_for_non_ally_controlled = yes # default = no. if yes it will change the controller of the states you or your allies don't control (ie if an enemy occupying it, the ownership will change but not controller) }\n}"
		},
		"set_autonomy":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"makes autonomy of specified level and country.\nExample:\nset_autonomy = {\n  target=ENG \n  autonomy_state = autonomy_puppet \n  freedom_level=0.5 \n  end_wars  = yes # default yes. will not cancel non-civil wars if set to no\n  end_civil_wars = yes # default yes. will not cancel civil wars if set to no\n}"
		},
		"add_to_tech_sharing_group":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Adds country to technology sharing group of specified name.\nExample: add_to_tech_sharing_group = commonwealth_research"
		},
		"remove_from_tech_sharing_group":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Removes country from technology sharing group of specified name.\nExample: remove_from_tech_sharing_group = commonwealth_research"
		},
		"add_autonomy_score":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Adds exact freedom score to the autonomy.\nExample:\nadd_autonomy_score={\nvalue=50\nlocalization=\"LOC_KEY\"\n}"
		},
		"modify_tech_sharing_bonus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Modify country bonus for specified technology sharing group.\nExample: modify_tech_sharing_bonus  = { id = commonwealth_research bonus = 0.2 }"
		},
		"add_autonomy_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Adds % freedom score to the autonomy.\nExample:\nadd_autonomy_ratio={\nvalue=0.005\nlocalization=\"LOC_KEY\"\n}"
		},
		"set_cosmetic_tag":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Sets country cosmetic tag.\nExample: INS = { set_cosmetic_tag = IN1 }"
		},
		"drop_cosmetic_tag":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Drops country cosmetic tag.\nExample: INS = { drop_cosmetic_tag }"
		},
		"transfer_ship":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Transfers ship from scope country to target country.\nExample:\nENG={\n  transfer_ship={\n    prefer_name = \"HMS Achilles\"\n    type = light_cruiser\n    target = NZL\n    exclude_refitting = yes #optional, default is no; Exclude ships currently being refitted from the search.\n  }\n}"
		},
		"set_state_category":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"Sets the category of a state\nExample: set_state_category = large_town"
		},
		"modify_global_flag":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"modify global flag. Only modifies if flag already exists.\nExample: modify_global_flag = { flag = <name> value = <number> }"
		},
		"modify_country_flag":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"modify country flag. Only modifies if flag already exists.\nExample: modify_country_flag = { flag = <name> value = <number> }"
		},
		"modify_state_flag":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"modify state flag. Only modifies if flag already exists.\nExample: modify_state_flag = { flag = <name> value = <number> }"
		},
		"add_state_modifier":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"Adds a modifier to the state\nExample: add_state_modifier = { modifier = { local_non_core_manpower = 0.2 } }"
		},
		"set_province_name":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"set_province_name = { id = <province id> name = <string> } - Set name for a province"
		},
		"set_state_name":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"set_state_name = <string> - Set the current states name"
		},
		"reset_province_name":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"reset name of a province back to localization one."
		},
		"reset_state_name":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"reset_state_name = yes - Resets the current states name to the original one"
		},
		"create_production_license":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Creates an equipment production license. If the selection criteria fails to match a variant no license will be created.\nExample:\ncreate_production_license = {\n\ttarget = TAG # Receiver of the license.\n\tcost_factor = 1.0 # Optional. Cost factor for production of the equipment.\n\tnew_prioritised = no # Optional. Default yes. Ignore 'version' (but not 'version_name') below and instead select the latest variant.\n\tequipment = {\n\t\ttype = small_plane_naval_bomber_airframe # The type of the variant to select. Must be specified.\n\t\tversion = 1 # Optional. Default 0. Select the variant with the given version.\n\t\tversion_name = \"Do 22\" # Optional. Select the variant with the given name.\n\t}\n}"
		},
		"add_relation_modifier":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS"],
			"description":	"Adds a static modifier between current scope and target\nExample: add_relation_modifier = {\n\ttarget = TAG # target of the relation\n\tmodifier = static_modifier_name_here #Name of the modifier added\n\t}\n}"
		},
		"remove_relation_modifier":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS"],
			"description":	"Removes a static modifier between current scope and target\nExample: add_relation_modifier = {\n\ttarget = TAG # target of the relation\n\tmodifier = static_modifier_name_here #Name of the modifier added\n\t}\n}"
		},
		"set_building_level":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"Sets specific level of a building construction for amount of levels in specified state or province"
		},
		"set_stability":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Sets the stability to the country in scope. Example: set_stability = 80"
		},
		"add_war_support":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Adds the war support to the country in scope. Example: add_war_support = 5"
		},
		"set_war_support":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Sets the war support to the country in scope. Example: set_war_support = 80"
		},
		"random_unit_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on a random Unit Leader of the country in scope, that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nex: GER = {\n  random_unit_leader = {\n\ttooltip = my_loc_key # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... character scope effects ...\n  }\n}\""
		},
		"every_unit_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every Unit Leader (or \\\"random_select_amount\\\" of random leader if specified) of the country in scope, that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching unit leader with display_individual_scopes.\nex: GER = {\n  every_unit_leader = {\n\ttooltip = my_loc_key # Optional\n\trandom_select_amount = 3 # Optional\n\tinclude_invisible = yes # Optional - default = no\n\tdisplay_individual_scopes = yes # Optional - default = no\n    ... character scope effects ...\n  }\n}\""
		},
		"random_army_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on a random Army Leader of the country in scope, that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nex: GER = {\n  random_army_leader = {\n\ttooltip = my_loc_key # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... character scope effects ...\n  }\n}\""
		},
		"every_army_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every Army Leader (or \\\"random_select_amount\\\" of random leader if specified) of the country in scope, that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nex: GER = {\n  every_army_leader = {\n\ttooltip = my_loc_key # Optional\n\trandom_select_amount = 3 # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... character scope effects ...\n  }\n}\""
		},
		"random_navy_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on a random Navy Leader of the country in scope, that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nex: GER = {\n  random_navy_leader = {\n\ttooltip = my_loc_key # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... character scope effects ...\n  }\n}\""
		},
		"every_navy_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every Navy Leader (or \\\"random_select_amount\\\" of random leader if specified) of the country in scope, that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching unit leader with display_individual_scopes.\nex: GER = {\n  every_navy_leader = {\n\ttooltip = my_loc_key # Optional\n\trandom_select_amount = 3 # Optional\n\tinclude_invisible = yes # Optional - default = no\n\tdisplay_individual_scopes = yes # Optional - default = no\n    ... character scope effects ...\n  }\n}\""
		},
		"transfer_navy":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Transfers the entire navy from scope country to target country. Does not support carriers!\nExample:\nENG={\n\ttarget = NZL\n\tis_government_in_exile = yes #optional, default is no; the navy will be tagged as exile if this is yes so that it will return to owner if they return from exile.\n}"
		},
		"destroy_ships":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Destroys ships of specified country and amount\nExample: \nENG={ \n\tdestroy_ships = {\n\t\ttype=light_cruiser\n\t\tcount=all #or number\n\t}\n}"
		},
		"set_unit_leader_flag":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"set unit leader flag\nThis effect is deprecated in favor of set_character_flag."
		},
		"modify_unit_leader_flag":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"modify unit leader flag. Only modifies if flag already exists.\nExample: _modify_unit_leader_flag_ = { flag = <name> value = <number> }\nThis effect is deprecated in favor of modify_character_flag."
		},
		"clr_unit_leader_flag":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"clear unit leader flag\nThis effect is deprecated in favor of clr_character_flag."
		},
		"set_nationality":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"Transfer from one country to another for the character in scope.\nNote that this is not related to operative nationalities added via add_nationality.\nNote that for operative, this will temporarily lock their slot on the country of origin.\n\nExamples:\nSOV = { # origin country\n\tmy_character = {\n\tset_nationality = POL # target country\n}\nSOV = { # origin country\n\tset_nationality = {\n\t\ttarget_country = POL\n\t\tcharacter = my_character\n\t}\n}\n"
		},
		"demote_leader":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Demotes field marshal to general"
		},
		"retire":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Retires character, use in character scope"
		},
		"add_command_power":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add command power to country"
		},
		"unlock_decision_tooltip":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"show what decision does\nExample: unlock_decision_tooltip = some_decision_here\nExample:\nunlock_decision_tooltip = {\n    decision = <some_decision>\n    show_effect_tooltip = yes # default is no\n    show_modifiers = yes # default is no\n}\n"
		},
		"set_can_be_fired_in_advisor_role":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"\"Set the value (yes/no) to the \"can be fired\" flag in Advisor Role. When set to No, the advisor cannot be fired once hired.\n\nExample:\nsome_country_scope = {\n  set_can_be_fired_in_advisor_role = {\n    character = my_character_token # or keyword, variable...\n    slot = political_advisor # mandatory if the character has several advisor role\n    value = no\n  }\n}\n\nsome_character_scope = {\n  set_can_be_fired_in_advisor_role = {\n    slot = political_advisor # mandatory if the character has several advisor role\n    value = no\n  }\n}\""
		},
		"random_military_industrial_organization":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on a random Military Industrial Organisation of the country in scope, that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nex: GER = {\n  random_military_industrial_organization = {\n\ttooltip = my_loc_key # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... MIO scope effects ...\n  }\n}\""
		},
		"add_temporary_buff_to_units":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Add buffs to units that are belongs to the army group/navy of this unit leader"
		},
		"boost_planning":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Boost planning of units that are belongs to the army group/navy of this unit leader"
		},
		"add_region_efficiency":	{
			"supported_scope":	["STRATEGIC_REGION"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"add efficiency factor to strategic region for from country"
		},
		"modify_building_resources":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Modifies resource output of specific building for this country only\nExample: modify_building_resources = {\n\tbuilding = radar_station\n\tresource = oil\n\tamount = 2\n}"
		},
		"global_every_army_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every Army Leader (or \\\"random_select_amount\\\" of random leader if specified) for EVERY COUNTRY, that fulfills the \\\"limit\\\" trigger.\nBetter to use every_army_leader if you know the country to search in.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching unit leader with display_individual_scopes.\nglobal_every_army_leader = {\n\ttooltip = my_loc_key # Optional\n\trandom_select_amount = 3 # Optional\n\tinclude_invisible = yes # Optional - default = no\n\tdisplay_individual_scopes = yes # Optional - default = no\n\t... character scope effects ...\n}\""
		},
		"add_to_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Adds a value or a variable to another one\nExample: add_to_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values\n}"
		},
		"subtract_from_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Subtracts a value or a variable to another one\nExample: subtract_from_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values\n}"
		},
		"multiply_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Multiplies a variable to a value or another variable\nExample: set_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values\n}"
		},
		"divide_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Divies a variable to a value or another variable\nExample: divide_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values\n}"
		},
		"clear_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Clears a variable\nExample: clear_variable = num_dogs"
		},
		"add_attack":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Adds attack skill to a character\nExample: add_attack = 1"
		},
		"add_defense":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Adds defense skill to a unit leader\nExample: add_defense = 1"
		},
		"add_planning":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Adds planning skill to a unit leader\nExample: add_planning = 1"
		},
		"unlock_decision_category_tooltip":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"localizes name of category and displays tooltip that shows it will be unlocked"
		},
		"activate_mission_tooltip":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"shows mission will activate and name. Activation needs to be handled manually, effect is just an easier way to display name of mission.\nExample: unlock_mission_tooltip = some_mission_here"
		},
		"load_focus_tree":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Sets what focus tree a country uses, retains finished shared focuses."
		},
		"add_logistics":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Adds logistics skill to a unit leader\nExample: add_logistics = 1"
		},
		"add_offsite_building":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Add an offsite building to a country"
		},
		"replace_unit_leader_trait":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"add trait to unit leader"
		},
		"free_operative":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM"],
			"description":	"Free an operative\nCan be used from a scope and a target that is either a country or a unit leader.\nGER = { free_operative = PREV } # where PREV is an operative (unit leader)\nfree_operative = { captured_by = GER } # where the scope is an unit leader\n"
		},
		"free_random_operative":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Free a random captured operative of a certain tag by a certain tag\nCan be used from a country scope of the operative in question.\n`all` is optional, default value is no - if set to yes it will free all operatives captured by the target country\nGER = { free_random_operative = { all = yes captured_by = ENG } }\n"
		},
		"add_max_trait":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Adds a max assignable trait slot for a general\nExample: add_max_trait = 1"
		},
		"add_skill_level":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Adds a skill level to a unit leader\nExample: add_skill_level = 1"
		},
		"add_to_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Adds a value or a variable to a temp variable\nExample: add_to_temp_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values\n}"
		},
		"subtract_from_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Subtracts a value or a variable to a temp variable\nExample: subtract_from_temp_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values\n}"
		},
		"multiply_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Multiplies a temp variable to a value or another variable\nExample: set_temp_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values\n}"
		},
		"divide_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Divies a temp variable to a value or another variable\nExample: divide_temp_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values\n\tif_zero = 0 # the value to assign if the divisor is zero (default is zero)\n}"
		},
		"set_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Sets a temp variable to a value or another variable\nExample: set_temp_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values\n}"
		},
		"add_timed_unit_leader_trait":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"add a timed trait to unit leader"
		},
		"clamp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Clamps a variable between two values or variables.\nNote that either min or max can be omitted.\nThe order in which the operations are applied is Max( Min( var, max ), min ).\nAn error will be logged if max < min as the result will be more often than not undesired (requires the game to run in debug mode).\nExample: clamp_variable = {\n    var = num_dogs\n    min = 0\n    max = num_cats\n}\n"
		},
		"clamp_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Clamps a temp variable a variable bet ween two a values or another variables\nExample: clamp_temp_variable = {\nvar = num_dogs\nmin = 0\nmax = num_cats\n}"
		},
		"start_border_war":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"start a border war between two states. Example:\nstart_border_war = {\n\tchange_state_after_war = no #overrides the transfer of state at the end of war\n\tcombat_width = 80 #combat width for border war\n\tminimum_duration_in_days = 14 #minimum duration for combat\n\tattacker = {\n\t\tstate = 527 # state to start border war\n\t\tnum_provinces = 4 #number of provinces we want border war to be\n\t\ton_win = japan_border_conflict.2 #effect to call if wins\n\t\ton_lose = japan_border_conflict.3 #effect to call if loses\n\t\ton_cancel = japan_border_conflict.4 #effect to call if cancels\n\t\tleader_score = { #score for selecting a leader\n\t\t\tbase = 1\n\t\t\tmodifier = {\n\t\t\t\tcheck_variable = { likes_border_wars = 1 }\n\t\t\t\tadd = 2\n\t\t\t}\n\t\t}\n\t\tmodifier = 0.5 #combat modifier (default value: 0.0)\n\t\tdig_in_factor = 0.5 #dig in modifier factor (default value: 1.0)\n\t\tterrain_factor = 0.5 #terrain modifier factor(default value: 1.0)\n\t}\n\t\n\tdefender = {\n\t\tstate = 408 # state to start border war\n\t\tnum_provinces = 4 #number of provinces we want border war to be\n\t\ton_win = japan_border_conflict.2 #effect to call if wins\n\t\ton_lose = japan_border_conflict.3 #effect to call if loses\n\t\ton_cancel = japan_border_conflict.4 #effect to call if cancels\n\t}\n}\n"
		},
		"set_border_war_data":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"update border war properties"
		},
		"cancel_border_war":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"cancel border war between two states"
		},
		"set_division_template_lock":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Set lock status for a division template\nExample: set_division_template_lock = { division_template = <name> is_locked = <bool (default:true)> }"
		},
		"delete_unit_template_and_units":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Delete a template and its units\nExample: delete_unit_template_and_units = { \ndivision_template = <name> \ndisband = no #if yes, will refund equipment/manpower. default is no\n}"
		},
		"print_variables":	{
			"supported_scope":	["STATE", "COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"prints all variables in scope and temp variables to a file\nExample: print_variables = {\nfile = log_file\ntext = header_text\nappend = yes\nprint_global = yes\nvar_list = { a b c } #optional\n}"
		},
		"activate_mission":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Activates mission, ignoring its normal trigger conditions. Cannot activate a mission that is already active. \nExample: activate_mission = some_mission_here"
		},
		"remove_mission":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Removes mission without running complete or timeout effects. \nExample: remove_mission = some_mission_here"
		},
		"recall_attache":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Scope country recalls attache from target country. Example: GER = { recall_attache = CHI } means Germany recalls attache from China."
		},
		"activate_targeted_decision":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["none"],
			"description":	"Activates targeted decisions or mission, ignoring its normal trigger conditions, cooldown and fire only once. Cannot activate if active in interface. \nExample: activate_targeted_decision = { target = TAG/STATE decision = decision_id_here"
		},
		"remove_targeted_decision":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["none"],
			"description":	"Removes targeted decisions or mission. \nExample: remove_targeted_decision = { target = TAG decision = decision_id_here"
		},
		"modify_timed_idea":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Modify amount of days of a timed idea for the country in scope\nex:\nSOV = {\n\tmodify_timed_idea = {\n\t\tidea = my_idea_id\n\t\tdays = 5\n\t\t# Add 5 days to the my_idea_id time-limit\n\t}\n\tmodify_timed_idea = {\n\t\tidea = my_idea_id\n\t\tdays = -5\n\t\t# Subtract 5 days to the my_idea_id time-limit\n\t}\n\tmodify_timed_idea = {\n\t\tidea = my_idea_id\n\t\tyears = 1\n\t\tmonths = 2\n\t\tdays = variable_name\n\t\t# NB: at least 1 of year/month/days is mandatory\n\t\t# NB: accept integer or variables\n\t\t# NB: tooltip will use the same year/month/day format as input\n\t}\n}\""
		},
		"activate_decision":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Activates specified decision for scope country"
		},
		"set_truce":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Sets a truce between scope country and target for days duration. \nExample set_truce = { target = GER days = 90 }"
		},
		"round_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Rounds a variable\nExample: round_variable = num_dogs"
		},
		"unit_leader_event":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Fires a unit leader event for owner country.\nExample:\nunit_leader_event = {\n\tid = generic.17 # The event to fire.\n\t# Optional Fields:\n\thours = 12 # The number of hours to wait before firing the event.\n\tdays = 5 # The number of days to wait before firing the event.\n\tmonths = 1 # The number of months to wait before firing the event, where a month is treated as 30 days.\n\t\t# Note:  hours, days, and months can all be used and will simply be added together.\n\trandom_hours = 18 # A random amount of hours to be added to the delay before firing, from 0 up to but not including random_hours.\n\trandom_days = 2 # A random amount of days to be added to the delay before firing, from 0 up to but one hour less than random_days.\n\t\t# Note:  random_hours and random_days can both be used and will simply be added together.\n\trandom = 6 # Equivalent to random_hours; preserverd for backwards compatibility.\n\trandom = { chance = 50 ... } # Specify a set of child effects to execute as part of this effect, with a percentage chance of randomly happening or not (as a group, not individually).\n\ttooltip = generic.17.t # Manually specify which tooltip to use for this effect.\n}\n"
		},
		"set_popularities":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"set popularities for all ideologies in a country. If an ideology is not specified its popularity will be set to zero. The popularities specified must add up to exactly 100\n\nExample:\nset_popularities = {\n\tneutrality = 54.5\n\tfascism = 45.5\n}"
		},
		"create_operative_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"create operative for country\ncreate_operative_leader = {\n\tbypass_recruitment = no # whether the operative is directly added to the list of available operatives \n\tavailable_to_spy_master = yes # whether the operative can be recruited by the spy master. Only makes sense if bypass_recruitment is 'no'.\n\tportrait_tag_override = TAG # when selectiong the portrait for the operative, consider that tag instead of the country the operative will operate for gfx = GFX_portrait_alexander_rado # specify the GFX entry that the portrait will be based on, otherwise a random one will be generated.\n\t# Additionally supports the common token to other create_x_leader effects\n gender = male # or female. If not defined in script a random gender will be applied.}\n"
		},
		"capture_operative":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM"],
			"description":	"Capture an operative\nCan be used from a scope and a target that is either a country or a unit leader.\nExamples:\nGER = {\n    capture_operative = PREV  # where PREV is an operative (unit leader)\n    # or    capture_operative = {\n        operative = PREV\n        ignore_death_chance = yes  # optional: whether the death chance on capture should be ignored\n    }\n}\n\ncapture_operative = { captured_by = GER } # where the scope is an unit leader\n"
		},
		"random_operative":	{
			"supported_scope":	["COUNTRY", "OPERATION"],
			"supported_target":	["none"],
			"description":	"Executes children effects on a random operatives that fulfills the \"limit\" trigger."
		},
		"every_operative":	{
			"supported_scope":	["COUNTRY", "OPERATION"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every operative (or \\\"random_select_amount\\\" of random operatives if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching operative with display_individual_scopes.\nex: GER = {\n  every_operative = {\n\ttooltip = my_loc_key # Optional\n\trandom_select_amount = 3 # Optional\n    display_individual_scopes = yes # Optional - default = no\n    ... character scope effects ...\n  }\n}\""
		},
		"send_equipment_fraction":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Sends to target scope specified fraction of equipment.\nExample:\nsend_equipment_fraction = {\n\ttarget = FROM\n\tvalue = 0.3 # Clamped in code to the range [0,1].\n}"
		},
		"transfer_units_fraction":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"![MD] Transfer units (air, army, navy) to another country.\nAlso transfer the stockiled equipment (you can set it to zero if it is undesired) as well as unit leaders.\n\nFor 'keep  triggers', the scope is :\nTHIS = Character\nFROM = Target country\n\nExample:\n```\ntransfer_units_fraction = {\n\ttarget = ROOT          # the recipient\n\tsize = 0.4             # [0,1] Default value for the ratio below if they are not specified\n\tstockpile_ratio = 0.3  # [0,1] Overrides size modifier for the stockpiled equipment and fuel\n\tarmy_ratio = 0.1       # [0,1] Overrides size modifier for army\n\tnavy_ratio = 0.2       # [0,1] Overrides size modifier for navy\n\tair_ratio = 0.4        # [0,1] Overrides size modifier for air\n\tkeep_unit_leaders = {  # specify IDs of unit leaders that remain with the original country\n\t\t700 701\n\t}\n\tkeep_unit_leaders_trigger = {\t# Trigger for unit leaders to remain with the original country\n\t\t\t\t\t\t\t\t\t# THIS is the unit leader being evaluated\"\n\t\t\t\t\t\t\t\t\t# ROOT is the recipient\"\n\t\t\t\t\t\t\t\t\t# FROM is the sender\"\n\t\t\t\t\t\t\t\t\t# PREV is unset\"\n\t\t[... triggers ...]\n\t}\n}\n```\n"
		},
		"finalize_border_war":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"finalizes border war between two states, wins or cancels it"
		},
		"remove_decision":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Remove specified active decision for scope country - Does not run the remove_effect or put the decision on cooldown. Ignores fire_only_once"
		},
		"swap_ruler_traits":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"swap 2 traits on current ruler. \n Syntax: swap_ruler_traits = { remove = <trait> add = <trait> }"
		},
		"add_random_trait":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"add random trait from specified list to unit leader. add_random_trait = { old_guard brilliant_strategist inflexible_strategist }"
		},
		"remove_exile_tag":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"remove exile tag from scope unit leader. remove_exile_tag = yes"
		},
		"set_legitimacy":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"set_legitimacy = 10. Sets legitimacy on scope country to specified value. Value has to be 0-100."
		},
		"become_exiled_in":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Become exile in target nation. become_exiled_in = { target = TAG legitimacy = 0-100 (optional) }"
		},
		"set_faction_name":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"set_faction_name = NEW_LOC_KEY. Sets the faction name to whatever the new key localises to."
		},
		"add_maneuver":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Adds maneuver skill to a unit leader\nExample: add_maneuver = 1"
		},
		"add_coordination":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Adds maneuver skill to a unit leader\nExample: add_coordination = 1"
		},
		"give_resource_rights":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Gives rights to take resources from specified state.\n\tgive_resource_rights = {\n\t\treceiver = <TAG> # accepts keyword or variable\n\t\tstate = <id> # accepts keyword or variable\n\t\tresources = {<Resource Name>} # [optional] If provided, only gives rights to the prodived resources.\n\t\t\t\t\t\t\t\t\t\t\t\t\tIf not provided gives rights to all resources in the states.\n\t}\""
		},
		"remove_resource_rights":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Remove resource right to state for scope country. remove_resource_rights = ID"
		},
		"inherit_technology":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Copies over technology state from target"
		},
		"round_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Rounds a temporary variable\nExample: round_temp_variable = num_dogs"
		},
		"supply_units":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Give [hours] of supply to units being controlled by this leader. \nExample supply_units = 24"
		},
		"set_faction_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"set current country as leader of its faction"
		},
		"set_keyed_oob":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with the given key) on that country.\nOnly intended to be used within history files.\n\nExample:\nset_keyed_oob = {\n\tkey = naval\n\tname = \"ENG_1936_Naval\"\n}"
		},
		"set_oob":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with no key) on that country.\nOnly intended to be used within history files.\n\nExample:\nset_oob = \"ENG_1936\""
		},
		"set_naval_oob":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with key \"naval\") on that country.\nOnly intended to be used within history files.\n\nExample:\nset_naval_oob = \"ENG_1936_Naval\""
		},
		"add_to_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Adds an element to an array\nExample: add_to_array = {\n\tarray = array_name\n\tvalue = 42 #optional, if not defined adds scope\n\tindex = 3 #optional, default is end. otherwise elements are shifted\n}\n#shorter usage: add_to_array = { array_name = 42 }"
		},
		"remove_from_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Removes an element from an array using value or index\nExample: remove_from_array = {\n\tarray = array_name\n\tvalue = 42 #optional, use index or this. if neither it removes last element\n\tindex = 3 #optional, use value or this. if neither it removes last element\n}\n#shorter usage: remove_from_array = { array_name = 42 }"
		},
		"clear_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Clears the contents of array\nExample: clear_array = array_name"
		},
		"resize_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Resizes array\nExample: resize_array = {\n\tarray = array_name\n\tvalue = 42 #optional, if not specified and array grows the new elements are set to this (default 0)\n\tsize = 3 #if higher than old size, new elements are added to end. otherwise last elements are removed to match to new size\n}\n#shorter usage: resize_array = { array_name = 3 }"
		},
		"add_to_temp_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Adds an element to a temporary array\nExample: add_to_temp_array = {\n\tarray = array_name\n\tvalue = 42 #optional, if not defined adds scope\n\tindex = 3 #optional, default is end. otherwise elements are shifted\n}\n#shorter usage: add_to_temp_array = { array_name = 42 }"
		},
		"remove_from_temp_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Removes an element from a temporary array using value or index\nExample: remove_from_temp_array = {\n\tarray = array_name\n\tvalue = 42 #optional, use index or this. if neither it removes last element\n\tindex = 3 #optional, use value or this. if neither it removes last element\n}\n#shorter usage: remove_from_temp_array = { array_name = 42 }"
		},
		"clear_temp_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Clears the contents of a temporary array\nExample: clear_temp_array = array_name"
		},
		"resize_temp_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Resizes a temp array\nExample: resize_temp_array = {\n\tarray = array_name\n\tvalue = 42 #optional, if not specified and array grows the new elements are set to this (default 0)\n\tsize = 3 #if higher than old size, new elements are added to end. otherwise last elements are removed to match to new size\n}\n#shorter usage: resize_temp_array = { array_name = 3 }"
		},
		"for_each_loop":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs a loop on for each element of an array\nExample: for_each_loop = {\n\tarray = array_name\n\tvalue = value_name #optional (default 'v') current value in array will be stored in this temp variable\n\tindex = index_name #optional (default 'i') current index in array will be stored in this temp variable\n\tbreak = break_name #optional (default 'break') set this temp variable to non zero to break the loop\n #effect 1\n #effect 2 ...\n}"
		},
		"add_fuel":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add fuel to the country"
		},
		"set_fuel":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"set fuel for country"
		},
		"for_each_scope_loop":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs a loop on for each element of an array and changes scope to current element in each iteration\nExample: for_each_scope_loop = {\n\tarray = array_name\n\tbreak = break_name #optional (default 'break') set this temp variable to non zero to break the loop\n\ttooltip = loc #if defined, the effect will output a tooltip for sub effects using this localization as title\n #effect 1\n #effect 2 ...\n}"
		},
		"random_scope_in_array":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs the effect for a random element in array\nExample: random_scope_in_array = {\n\tarray = array_name\n\tlimit = { ... trigger ... } a trigger to limit scopes\n\tbreak = break_name #optional (default 'break') set this temp variable to non zero to break the loop\n #effect 1\n #effect 2 ...\n}"
		},
		"force_update_dynamic_modifier":	{
			"supported_scope":	["STATE", "COUNTRY", "CHARACTER", "SPECIAL_PROJECT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"updates the modifiers in current scope (use if you don't want to wait for daily update to update them):\nforce_update_dynamic_modifier = yes\n"
		},
		"remove_dynamic_modifier":	{
			"supported_scope":	["STATE", "COUNTRY", "CHARACTER", "SPECIAL_PROJECT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"removes a dynamic modifier from the containing scope (country / state / unit-leader / special-project).\nexample :\nremove_dynamic_modifier = {\n  modifier = dynamic_modifier_name\n  scope = GER # optional, must match the scope input used in add_dynamic_modifier (if any)\n}\""
		},
		"add_dynamic_modifier":	{
			"supported_scope":	["STATE", "COUNTRY", "CHARACTER", "SPECIAL_PROJECT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"adds a dynamic modifier to the containing scope (country / state / unit-leader / special-project).\nUpdates the cooldown if exists.\nOptionaly you can give a scope that will restrict the dynamic modifier to it.\nexample :\n12 = {\n  add_dynamic_modifier = {\n    modifier = dynamic_modifier_name\n    days = 42 # will be temporary if specified, can be variable\n    scope = GER # optional, state/countrytag or a variable containing that. \n\t\t\t\t# if specified the dynamic variable will target that scope\n\t\t\t\t# in this example : adds the modifier to state 12 but only applies for country GER\n  }\n}\""
		},
		"for_loop_effect":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs a same effects through a loop. example will run the effects for value_name = -3, 0, 3, 6, 9 and then terminate\nExample: for_loop_effect = {\n\tstart = -3 (default 0) start value of loop\n\tend = 10 (default 0) end value of loop\n\tcompare = less_than_or_equals (default less_than) comparison type between start and end val\n\tadd = 3 (default 1) value to add to current value after each iteration\n\tvalue = value_name #optional (default 'v') current value of iteration will be stored in this temp variable\n\tbreak = break_name #optional (default 'break') set this temp variable to non zero to break the loop\n #effect 1\n #effect 2 ...\n}"
		},
		"while_loop_effect":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs the effect as long as a trigger is true\nExample: while_loop_effect = {\n\tlimit = { ... trigger ... } a trigger to test before each iteration\n\tbreak = break_name #optional (default 'break') set this temp variable to non zero to break the loop\n #effect 1\n #effect 2 ...\n}"
		},
		"meta_effect":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"meta effects can be used for building effects from strings and running them. following example will give Germany 42 pp:\nmeta_effect = {\n    text = {\n        [COUNTRY] = {\n            add_political_power = [POW]\n        }\n    }\n    COUNTRY = \"GER\"\n    POW = 42\n    debug = no #set to yes if you want to see what game actually executes\n}\n"
		},
		"add_victory_points":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"adds victory point to province\nadd_victory_points = {\n  province = 42\n  value = 5\n}"
		},
		"set_victory_points":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"sets victory points for a province\nset_victory_points = {\n  province = 42\n  value = 5\n}"
		},
		"launch_nuke":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"launch nuke at a state. usage : \nlaunch_nuke = { \n   provinve = 42 #will nuke this province if specified\n   state = 42 #use either province or state. if state is used it will prefer enemies first while picking a province to nuke. otherwise it will pick one of the neutrals\n   controller = GER #if state and controller is specified, the effect will pick a province that is controlled by this tag\n   use_nuke = yes #will consume nuke if specified\n   nuke_type = nuclear_bomb # type of nuke to use (e.g. nuclear_bomb, thermonuclear_bomb etc.)\n} \n"
		},
		"scoped_sound_effect":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Plays sound effect only on in current scope's player"
		},
		"find_lowest_in_array":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs a loop on for each element of an array, finds the lowest value and stores result in temp variables\nExample: find_lowest_in_array = {\n\tarray = array_name\n\tvalue = value_name #optional (default 'v') lowest value in array will be stored in this temp variable\n\tindex = index_name #optional (default 'i') index of lowest value in array will be stored in this temp variable\n}"
		},
		"find_highest_in_array":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs a loop on for each element of an array, finds the highest value and stores result in temp variables\nExample: find_highest_in_array = {\n\tarray = array_name\n\tvalue = value_name #optional (default 'v') highest value in array will be stored in this temp variable\n\tindex = index_name #optional (default 'i') index of highest value in array will be stored in this temp variable\n}"
		},
		"add_mines":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Add mines to a strategic region for scoped country.\n add_mines = { region = 42 amount = 100 }"
		},
		"set_fuel_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Set country's current fuel ratio relative to its capacity"
		},
		"end_exile":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Ends the exile of of the current scope's country"
		},
		"remove_advisor_role":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"remove advisor role to character\n\nExample:\nremove_advisor_role = {\n\tcharacter = \"GER_Character_Token\" # optional if inside character scope\n\tslot = air_chief}\n"
		},
		"add_power_balance_modifier":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"adds static modifier to power balance\n\nExample:\nadd_power_balance_modifier = {\n\tid = power_balance_id\n\tmodifier = static_modifier_id # this must be defined in the static modifier database\n}"
		},
		"remove_power_balance_modifier":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"removes static modifier from power balance\n\nExample:\nremove_power_balance_modifier = {\n\tid = power_balance_id\n\tmodifier = static_modifier_id # this must be defined in the static modifier database\n}"
		},
		"set_power_balance_gfx":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"sets gfx for power balance side\n\nExample:\nset_power_balance_gfx = {\n\tid = power_balance_id\n\tside = power_balance_side_id\n\tgfx = gfx_name\n}"
		},
		"kill_ideology_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"removes a ideology leader as leader of his party, making the next in line the new party leader"
		},
		"retire_ideology_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"kills a ideology leader and removes him completely, making the next in line the new party leader"
		},
		"add_days_remove":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"adds/removes days to 'days_remove' value of a decision\nExample:\nadd_days_remove  = {\n    decision = <some_decision>\n    days = 30\n}\n"
		},
		"add_days_mission_timeout":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add days to 'mission_timeout' value of a mission\nExample:\nadd_days_mission_timeout  = {\n    mission = <some_mission>\n    days = 30\n}\n"
		},
		"add_resistance":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"add resistance to a state. Example: add_resistance = 30"
		},
		"add_compliance":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"add compliance to a state. Example: add_compliance = 30"
		},
		"start_resistance":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"starts resistance activity for a core country. \nUse along with force_enable_resistance if you are enabling resistance\nin a state that is not possible (ie core).\nExample : start_resistance = POL or start_resistance = yes"
		},
		"cancel_resistance":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"cancels resistance activity for a core country.\nuse along with force_disable_resistance to disable resistance forever\nExample : cancel_resistance = yes"
		},
		"set_resistance":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"set resistance of a state. Example: set_resistance = 30"
		},
		"set_compliance":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"set compliance of a state. Example: set_compliance = 30"
		},
		"career_profile_step_missiolini":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Step completed Mussolini missions by one for the career profile"
		},
		"get_supply_vehicles":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"sets a variable to the number of supply vehicles in stockpile or that are needed. example \nget_supply_vehicles = { \n\tvar = num_vehicles #variable to set \n\ttype = truck #can be truck or train \n\tneed = yes #default no. If yes, gets the number of needed vehicles \n} \n"
		},
		"get_supply_vehicles_temp":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"sets a temp variable to the number of supply vehicles in stockpile or that are needed. example \nget_supply_vehicles_temp = { \n\tvar = num_vehicles #variable to set \n\ttype = truck #can be truck or train \n\tneed = yes #default no. If yes, gets the number of needed vehicles \n} \n"
		},
		"every_military_industrial_organization":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every Military Industrial Organisation (or \\\"random_select_amount\\\" of random MIOs if specified) of the country in scope, that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching MIO with display_individual_scopes.\nex: GER = {\n  every_military_industrial_organization = {\n\ttooltip = my_loc_key # Optional\n\trandom_select_amount = 3 # Optional\n\tinclude_invisible = yes # Optional - default = no\n\tdisplay_individual_scopes = yes # Optional - default = no\n    ... MIO scope effects ...\n  }\n}\""
		},
		"add_mio_funds":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Add funds to the military industrial organization in scope.\nValue can be negative to substract funds.\nIf the new total funds go over the Size Up limit, the MIO will gain size(s).\nIf the new total funds is negative, it will be capped at 0 without retracting size.\nex:\nvar:my_mio_var = {\n  add_mio_funds = 200\n  add_mio_funds = -100\n}\""
		},
		"set_mio_funds":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Set the amount of funds for the military industrial organization in scope.\nInput value cannot be negative.\nIf the new total funds go over the Size Up limit, the MIO will gain size(s).\nex:\nvar:my_mio_var = {\n  set_mio_funds = 100\n  set_mio_funds = var:my_number_var\n}\""
		},
		"add_mio_size":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Add size levels to the military industrial organization in scope.\nInput value cannot be negative.\nThe MIO will keep the same amount of funds it had before the effect.\nex:\nvar:my_mio_var = {\n  add_mio_size = 2\n  add_mio_size = var:my_number_var\n}\""
		},
		"complete_mio_trait":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Complete a trait in the military industrial organization in scope.\nThis effect will not take into account the current state of the trait tree and will allow you to unlock a trait even if the one before is not unlocked.\nWill also add 1 size to the MIO so that size and numbers of unlocked traits are always aligned.\nex:\nvar:my_mio_var = {\n  complete_mio_trait = my_trait_token\n  complete_mio_trait = {\n\ttrait = my_trait_token\n\tshow_modifiers = no # Optional, default = yes\n  }\n}\""
		},
		"set_mio_flag":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Set flag in the military industrial organization in scope.\nex:\nvar:my_mio_var = {\n  set_mio_flag = my_flag\n  set_mio_flag = {\n    flag = my_flag (mandatory)\n\tvalue = 3 (optional, default = 1)\n    days = 12 (optional, default = 0. if > 0, the flag will be deleted after this number of days)\n  }\n}\""
		},
		"clr_mio_flag":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Clear the matching flag in the military industrial organization in scope.\nex:\nvar:my_mio_var = {\n  clr_mio_flag = my_flag\n}\""
		},
		"modify_mio_flag":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Modify the matching flag in the military industrial organization in scope. Happens only if the flag already exists.\nex:\nvar:my_mio_var = {\n  modify_mio_flag = {\n    flag = my_flag\n    value = 5 (optional, default = 0. Will be added to the current value)\n    days = 13 (optional, default = 0. if > 0, the flag will be deleted after this number of days)\n  }\n}\""
		},
		"set_mio_task_capacity":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Set the maximum task capacity in the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nInput value cannot be negative.\nIf the capacity is reduced and the MIO becomes over-assigned, the current tasks will be allowed.\nIt's only later that the player will feel the new restrictions.\nex:\nmio:my_mio = {\n  set_mio_task_capacity = 3\n  set_mio_task_capacity = var:my_number_var\n}\""
		},
		"add_mio_task_capacity":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Add to the maximum task capacity in the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nValue can be negative to reduce capacity, but final capacity cannot be negative (capped at 0, no error raised)\nIf the capacity is reduced and the MIO becomes over-assigned, the current tasks will be allowed.\nIt's only later that the player will feel the new restrictions.\nex:\nmio:my_mio = {\n  add_mio_task_capacity = 1\n  add_mio_task_capacity = -1\n  add_mio_task_capacity = var:my_number_var\n}\""
		},
		"add_mio_research_bonus":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Add to the research bonus in the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nValue can be negative to reduce research bonus but final research bonus cannot be negative (capped at 0, no error raised)\nex:\nmio:my_mio = {\n  add_mio_research_bonus = 0.2\n  add_mio_research_bonus = -0.1\n  add_mio_research_bonus = var:my_number_var\n}\""
		},
		"set_mio_research_bonus":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Set the research bonus in the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nInput value cannot be negative.\nex:\nmio:my_mio = {\n  set_mio_research_bonus = 0.3\n  set_research_bonus = var:my_number_var\n}\""
		},
		"set_mio_name_key":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Set the localisation key used to generate the name of the military industrial organization in scope.\nThe localisation key may be a scripted localisation (triggers evaluated in MIO scope).\nex:\nmio:my_mio = {\n  set_mio_name_key = MY_NEW_MIO_NAME_KEY\n}\""
		},
		"add_mio_design_team_assign_cost":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Add percentage to the daily PP cost to assign to research in the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nValue can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised)\nex:\nmio:my_mio = {\n  add_mio_design_team_assign_cost = 0.2 # increase by 20%\n  add_mio_design_team_assign_cost = -0.1 # reduce by 10%\n  add_mio_design_team_assign_cost = var:my_number_var\n}\""
		},
		"set_mio_design_team_assign_cost":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Set the daily PP cost to assign to research in the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nInput value cannot be negative.\nex:\nmio:my_mio = {\n  set_mio_design_team_assign_cost = 0.3\n  set_mio_design_team_assign_cost = var:my_number_var\n}\""
		},
		"add_mio_industrial_manufacturer_assign_cost":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Add percentage to the daily PP cost to assign to production line in the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nValue can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised)\nex:\nmio:my_mio = {\n  add_mio_industrial_manufacturer_assign_cost = 0.2 # increase by 20%\n  add_mio_industrial_manufacturer_assign_cost = -0.1 # reduce by 10%\n  add_mio_industrial_manufacturer_assign_cost = var:my_number_var\n}\""
		},
		"set_mio_industrial_manufacturer_assign_cost":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Set the daily PP cost to assign to production line in the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nInput value cannot be negative.\nex:\nmio:my_mio = {\n  set_mio_industrial_manufacturer_assign_cost = 0.3\n  set_mio_industrial_manufacturer_assign_cost = var:my_number_var\n}\""
		},
		"add_mio_design_team_change_cost":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Add percentage to the XP cost to change MIO in equipment designer for the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nValue can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised).\n!!! NOTE that the result is rounded down so that i.e. 5 + 10% is still 5 = 5.5 rounded down !!!\nex:\nmio:my_mio = {\n  add_mio_design_team_change_cost = 0.2 # increase by 20%\n  add_mio_design_team_change_cost = -0.1 # reduce by 10%\n  add_mio_design_team_change_cost = var:my_number_var\n}\""
		},
		"set_mio_design_team_change_cost":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Set the XP cost to change MIO in equipment designer for the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nInput value cannot be negative.\nex:\nmio:my_mio = {\n  set_mio_design_team_change_cost = 3\n  set_mio_design_team_change_cost = var:my_number_var\n}\""
		},
		"unlock_mio_trait_tooltip":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Display a tooltip saying the trait is made available (aka unlocked).\nex:\nmio:my_mio = {\n  unlock_mio_trait_tooltip = trait\n  unlock_mio_trait_tooltip = {\n\ttrait = my_trait_token\n\tshow_modifiers = no # Optional, default = yes\n  }\n}\""
		},
		"add_mio_funds_gain_factor":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Add to the factor applied when gaining funds in the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nValue can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised)\nex:\nmio:my_mio = {\n  add_mio_funds_gain_factor = 0.2\n  add_mio_funds_gain_factor = -0.1\n  add_mio_funds_gain_factor = var:my_number_var\n}\""
		},
		"set_mio_funds_gain_factor":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Set the factor applied when gaining funds in the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nInput value cannot be negative.\nex:\nmio:my_mio = {\n  set_mio_funds_gain_factor = 0.9\n  set_mio_funds_gain_factor = var:my_number_var\n}\""
		},
		"add_mio_size_up_requirement_factor":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Add to the factor applied to funds required to size up in the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nValue can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised)\nex:\nmio:my_mio = {\n  add_mio_size_up_requirement_factor = 0.2\n  add_mio_size_up_requirement_factor = -0.1\n  add_mio_size_up_requirement_factor = var:my_number_var\n}\""
		},
		"set_mio_size_up_requirement_factor":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Set to the factor applied to funds required to size up in the military industrial organization in scope.\nThis changes the base value. Modifiers will still apply over it.\nInput value cannot be negative.\nex:\nmio:my_mio = {\n  set_mio_size_up_requirement_factor = 0.9\n  set_mio_size_up_requirement_factor = var:my_number_var\n}\""
		},
		"unlock_military_industrial_organization_tooltip":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Display a tooltip saying the MIO is made available (aka unlocked).\nAccepts MIO token, variables or keywords\nex:\nFIN = {\n\tunlock_military_industrial_organization_tooltip = mio:my_mio_token\n\tunlock_military_industrial_organization_tooltip = var:my_mio_var\n}\n\""
		},
		"unlock_mio_policy_tooltip":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"\"Display a tooltip saying the MIO policy is made available (aka unlocked).\nex:\nunlock_mio_policy_tooltip = my_policy_token\nunlock_mio_policy_tooltip = {\n\tpolicy = my_policy_token\n\tshow_modifiers = no # show bonuses in tooltip - optional, default = yes\n}\n\""
		},
		"add_mio_policy_cost":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Add to the base cost (in PP) for attaching a policy in the MIO policy, found in country in scope with input policy token.\nThis changes the base value. Modifiers will still apply over it.\nValue can be negative to reduce cost, but final cost cannot be negative (capped at 0, no error raised)\nex:\nSOV = {\n  add_mio_policy_cost = {\n\tpolicy = my_policy_token\n\tvalue = 1\n  }\n  add_mio_policy_cost = {\n\tpolicy = my_policy_token\n\tvalue = -1\n  }\n  add_mio_policy_cost = {\n\tpolicy = my_policy_token\n\tvalue = var:my_number_var\n  }\n}\""
		},
		"set_mio_policy_cost":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Set the base cost (in PP) for attaching a policy in the MIO policy, found in country in scope with input policy\ntoken. This changes the base value. Modifiers will still apply over it. \nInput value cannot be negative.\nex: \nSOV = { \n  set_mio_policy_cost = { \n\tpolicy = my_policy_token\n\tvalue = 3\n  }\n  set_mio_policy_cost = {\n\tpolicy = my_policy_token\n\tvalue = var:my_number_var\n  }\n}\""
		},
		"add_mio_policy_cooldown":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Add to the base cooldown (in days) after attaching a policy in the MIO policy, found in country in scope with input policy token.\nThis changes the base value. Modifiers will still apply over it.\nValue can be negative to reduce cost, but final cooldown cannot be negative (capped at 0, no error raised)\nex:\nSOV = {\n  add_mio_policy_cooldown = {\n\tpolicy = my_policy_token\n\tvalue = 1\n  }\n  add_mio_policy_cooldown = {\n\tpolicy = my_policy_token\n\tvalue = -1\n  }\n  add_mio_policy_cooldown = {\n\tpolicy = my_policy_token\n\tvalue = var:my_number_var\n  }\n}\""
		},
		"set_mio_policy_cooldown":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Set the base cooldown (in days) after attaching a policy in the MIO policy, found in country in scope with input policy\ntoken. This changes the base value. Modifiers will still apply over it. \nInput value cannot be negative.\nex:\nSOV = {\n  set_mio_policy_cooldown = {\n\tpolicy = my_policy_token\n\tvalue = 3\n  }\n  set_mio_policy_cooldown = {\n\tpolicy = my_policy_token\n\tvalue = var:my_number_var\n  }\n}\""
		},
		"add_cic":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Add founds to the CIC bank of the country in scope.\nValue can be negative to substract funds.\nIf the new total funds is negative, it will be set to 0.\nex:\nvar:my_country_var = {\n  add_cic = 200\n  add_cic = -100\n}\""
		},
		"activate_shine_on_focus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"![MD]\nActivates the shine effect on the focus with the given id. Focuses that are completed cannot have an activated shine effect.\n\nNote that tooltips are only shown in debug mode.\n\n### Example:\n```\nactivate_shine_on_focus = GER_prioritize_economic_growth\n```\n"
		},
		"deactivate_shine_on_focus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"![MD]\nDeactivate the shine effect on the focus with the given id. The current focus cannot have it's shine effect removed.\n\nNote that tooltips are only shown in debug mode.\n\n### Example:\n```\ndeactivate_shine_on_focus = GER_prioritize_economic_growth\n```\n"
		},
		"event_option_tooltip":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Shows the tooltip text of an event option in other tooltips(root and from scopes are swapped).\nExample:\nevent_option_tooltip = mtg_usa_civil_war_fascists.1.a"
		},
		"show_mio_tooltip":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Show the name of the input MIO with the name of the initial trait (if any)\nex:\nSOV = {\n\tshow_mio_tooltip = my_mio_token\n\tshow_mio_tooltip = var:my_mio_var\n}\""
		},
		"complete_special_project":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Complete a special project for the country in scope.\nThis effect will not take into account the current state of the project tree and will allow you to unlock a project even if the one before is not unlocked.\nSince the project is not completed within a facility, the facility state and scientist effects are NOT applied.\nex:\nSOV = { complete_special_project = sp:my_project }\nSOV = { complete_special_project = var:my_project_var }\nSOV = { complete_special_project = PREV } # accepts variables and keywords\nSOV = {\n\tcomplete_special_project = {\n\t\t# project, scientist, state accepts variables and keywords.\n\t\tproject = sp:my_project\n\t\tscientist = my_scientist # Optional if no iteration_output, default to current scientists on the project if active otherwise to none\n\t\tstate = my_state # Optional if no iteration_output, default to current state of the project if active otherwise to none\n\t\titeration_output = { # Can be a single reward or reward = option, if it contains a multiple option choice but no option specified the default will be used. The reward must be available to the project\n\t\t\tmy_reward\n\t\t\tmy_other_reward # multiple choice, chose the default\n\t\t\tmy_third_reward = my_option_1 # Specified option to use\n\t\t} # Optional amount of iteration rewards\n\t\tshow_modifiers = no # Optional, default = yes\n\t}\n}\""
		},
		"set_mio_icon":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Set the icon GFX for the military industrial organization in scope.\nex:\nmio:my_mio = {\n  set_mio_icon = MY_NEW_MIO_ICON_GFX\n}\""
		},
		"create_purchase_contract":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"\"Creates a purchase contract between the countries.\nExample:\ncreate_purchase_contract = \n{\n\tseller = ENG\n\tbuyer = RAJ\n\tcivilian_factories = 2\n\tequipment = {\n\t\ttype = infantry_equipment\n\t\tamount = 600\n\t}\n\tequipment = {\n\t\ttype = armored_car1\n\t\tamount = 100\n\t}\n}\""
		},
		"generate_scientist_character":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Generate a new character with a scientist role and recruit it in the country in scope.\nExamples:\nSOV = {\n\tgenerate_scientist_character = {\n\t\tportrait = GFX_portrait # optional - random portrait by default\n\t\tportrait_tag_override = CHI # optional - accepts variable and keyword - only relevant if using random portrait - by default use country in scope\n\t\tgender = male / female # optional - by default random gender\n\t\tskills = {\n\t\t\t# optional array\n\t\t\t# same format as in scientist role in character DB\n\t\t\t# by default all skills are at 1\n\t\t\tspecialization_token = 2\n\t\t}\n\t\ttraits = { trait_token } # optional array\n\t}\n}\n\""
		},
		"add_scientist_role":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"\"Add scientist role to a character. The character can come from the scope or from an input parameter.\nThe scientist role format is the same as in the character DB.\nExcept the visible trigger - a scientist role created via effect cannot have triggers.\nExamples:\n# From character scope\nmy_character = {\n\tadd_scientist_role = {\n\t\tscientist = {\n\t\t\tdesc = desc_loc_key # Optional\n\t\t\ttraits = { scientist_trait_token ... } # Optional\n\t\t\tskills = { specialization_token = 2 ... }\n\t\t\t# cf. game/common/characters/_documentation/md for full explanation\n\t\t}\n\t}\n}\n\n# From country scope\nSOV = {\n\tadd_scientist_role = {\n\t\tcharacter = my_character / var:my_char_var / PREV # accepts variables and keywords\n\t\tscientist = { ... }\n\t}\n}\n\""
		},
		"remove_scientist_role":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"\"Remove the scientist role from a character.The character can come from the scope or from an input parameter.\nThe scientist role format is the same as in the character DB.\nExcept the visible trigger - a scientist role created via effect cannot have triggers.\nExamples:\n# From character scope\nmy_character = {\n\tremove_scientist_role = yes\n}\n\n# From country scope\nSOV = {\n\tremove_scientist_role = {\n\t\tcharacter = my_character / var:my_char_var / PREV # accepts variables and keywords\n\t}\n}\""
		},
		"random_purchase_contract":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on a random purchase contract of the country in scope, that fulfills the \\\"limit\\\" trigger.\ntooltip = key need to be added to override the tooltip title.\nex: GER = {\n  random_purchase_contract = {\n\tlimit = { ... contract scope triggers ... }\n\ttooltip = my_loc_key # Optional\n    ... Purchase Contract scope effects ...\n  }\n}\""
		},
		"every_purchase_contract":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every purchase contract (or \\\"random_select_amount\\\" of random purchase contracts if specified) of the country in scope, that fulfills the \\\"limit\\\" trigger.\ntooltip = key need to be added to override the tooltip title.\nBy default the effects are only displayed once, you may display them for each matching purchase contract with display_individual_scopes.\nex: GER = {\n  every_military_industrial_organization = {\n\tlimit = { ... contract scope triggers ... }\n\ttooltip = my_loc_key # Optional\n\trandom_select_amount = 3 # Optional\n\tdisplay_individual_scopes = yes # Optional - default = no\n    ... Purchase Contract scope effects ...\n  }\n}\""
		},
		"random_allied_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"![MD]\nExecutes children effects on a random Allied Country different from the one in scope that fulfills the `limit` trigger.\n`tooltip` can be used to override tooltip title (supports [bindable localization](script_concept_documentation.md#bindable-localization)).\n\n### Example\n```\nENG = {\n\trandom_allied_country = {\n\t\ttooltip = my_loc_key # Optional bindable localization\n\t\tlimit = my_limit_trigger # Optional\n\t\t... country scope effects ...\n\t}\n}\n```\n"
		},
		"every_allied_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"![MD]\nExecutes children effects on every Allied Country different from the one in scope (or `random_select_amount` of random country if specified) that fulfills the `limit` trigger.\n`tooltip` can be added to override tooltip title (supports [bindable localization](script_concept_documentation.md#bindable-localization)).\nBy default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.\n\n### Example\n```\nENG = {\n\tevery_allied_country = {\n\t\ttooltip = my_loc_key # Optional bindable localization\n\t\trandom_select_amount = 3 # Optional\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\tlimit = my_limit_trigger # Optional\n\t\t... country scope effects ...\n\t}\n}\n```\n"
		},
		"raid_damage_units":	{
			"supported_scope":	["RAID_INSTANCE"],
			"supported_target":	["none"],
			"description":	"\"Damage the units performing the raid in scope (the attackers inflict losses).\n\nDamage is applied to ground units while damage to plane is defined as the amount of planes lost.\nIf 'ratio = yes', then all damage / losses are applied as a fraction of the current amount.\nFor units, damage can be defined through one value 'damage' or separately through 'org_damage' and 'str_damage'\n\nex:\n\n# Apply 50% damage to units\nraid_damage_units = {\n\tdamage = 0.5\n\tratio = yes\n}\n\n# Apply 10 strength loss and 20 organization loss to units\nraid_damage_units = {\n\torg_damage = 20\n\tstr_damage = 10\n}\n\n# Lose 40% of all planes\nraid_damage_units = {\n\tplane_loss = 0.4\n\tratio = yes\n}\n\n# Lose 5 planes\nraid_damage_units = {\n\tplane_loss = 5\n}\n\n\""
		},
		"raid_add_unit_experience":	{
			"supported_scope":	["RAID_INSTANCE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Give experience to the units performing the raid (raid instance scope).\n\nWill give experience to any type of unit assigned to the raid, e.g. divisions or air wings.\nThe value defines the progress towards the max level, e.g. 0.2 = gain 20% of the experience needed to reach max level.\n\nCan use either an explicit value or a variable\n\nex.\nraid_add_unit_experience = 0.2\""
		},
		"promote_officer_to_general":	{
			"supported_scope":	[],
			"supported_target":	["none"],
			"description":	"\"Promote the officer of the division to a general.\nExample:\npromote_officer_to_general = yes # yes/no is ignored\n\""
		},
		"cancel_purchase_contract":	{
			"supported_scope":	["PURCHASE_CONTRACT"],
			"supported_target":	["none"],
			"description":	"\"Cancels the scoped purchase contract.\nExample:\ncontract =  {cancel_purchase_contract = yes}\""
		},
		"remove_contested_owner":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"![MD]\nRemoves a contested owner to a state.\nThe effect can be used either from a country or a state scope and accepts the other as parameter.\nThe effect is localized with a localization environment containing `Country` and `State`.\n\n### Example\nThe following example has the same end result and localization.\n```\n42 = {\n\tremove_contested_owner = GER\n}\nGER = {\n\tremove_contested_owner = 42\n}\n```\nStandard scope accessors can also be used:\n```\n### Assuming current scope is a state and FROM is a country scope\nremove_contested_owner = FROM\n```\n"
		},
		"add_project_progress_ratio":	{
			"supported_scope":	["SPECIAL_PROJECT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Add progress to the project's prototype phase.\nThe input value is a ratio of the total needed progress to complete the special project, i.e. a decimal number between -1 and 1.\nex:\nsp:my_project = {\n  add_project_progress_ratio = 0.1\n  add_project_progress_ratio = var:my_var\n}\""
		},
		"custom_override_tooltip":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"![MD]\nExecutes the provided effects but with a custom tooltip surpressing all tooltips from all other effects inside this block.\nThe custom tooltip is a [bindable localization](script_concept_documentation.md#bindable-localization).\n\n### Examples\n```\ncustom_override_tooltip = {\n\ttooltip = MY_TOOLTIP # Simple loc key tooltip\n\t<other effects>\n}\n```\n\n```\ncustom_override_tooltip = {\n\ttooltip = {\n\t\tlocalization_key = MY_TOOLTIP # Root look key\n\t\tIMPORTANT_QUESTION = { # ID IMPORTANT_QUESTION in MY_TOOLTIP will get value:\n\t\t\tlocalization_key = MEANING_OF_LIFE # Root loc key in IMPORTANT_QUESTION\n\t\t\tANSWER = \"42\" # ID ANSWER in IMPORTANT_QUESTION will get value 42\n\t\t}\n\t\tJUST_AS_IMPORTANT = OR_NOT # ID JUST_AS_IMPORTANT in MY_TOOLTIP will get value OR_NOT\n\t}\n\t<other effects>\n}\n```\n"
		},
		"complete_prototype_reward_option":	{
			"supported_scope":	["SPECIAL_PROJECT"],
			"supported_target":	["none"],
			"description":	"Complete a prototype reward option for the project in scope \nThe effect will respect the fire only once and allowed property of prototype rewards.\nex:\ncomplete_prototype_reward_option = \n{\n\tprototype_reward = my_reward\n\tprototyp_reward_option = my_option # Optional, if multiple choice use default one if not set\n\tshow_modifiers = yes # Yes if the effects of the prototype reward should be shown (default no)\n}"
		},
		"add_unit_bonus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Adds permanent subunit and subunit category bonuses for country.\n\nExample:\nadd_unit_bonus = {\n  category_light_infantry = { # Subunit category bonuses\n\t   soft_attack = 0.05\n\t}\n  \n  cavalry = { # Subunit bonuses\n\t   soft_attack = 0.05\n       hard_attack = 0.05\n\t}\n}\""
		},
		"add_operation_token":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Adds a specific token against against another country\nadd_operation_token = {\n\ttag = GER\n\ttoken = some_token_id\n}"
		},
		"remove_operation_token":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Remove a specific token against against another country\nremove_operation_token = {\n\ttag = GER\n\ttoken = some_token_id\n}"
		},
		"steal_random_tech_bonus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"adds a random limited use tech bonus from country of categories that is it ahead in compared to you.\nit must have atleast one category or folder. But it can contain any number of them in any combination\nNote: if a country does not have a tech to be stolen a random tech bonus will be applied based on base_bonus \nExample: steal_random_tech_bonus = {\n\tcategory = air_equipment\n\tfolder = naval_folder\n\tahead_reduction = ???\n\tbonus = ???\n\tbase_bonus = 0.05\n\tinstant = yes # instant unlock instead of bonus\n\tdynamic = yes # swaps bonus types from instant to category dependig on type as well as uses weights on tech progress\n\tname = ???\n\ttarget = ???\n\tuses = 1\n}\n"
		},
		"teleport_armies":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"teleport armies in state to another state or province. example :\nteleport_armies = { \n  #only define one. if neither is defined will teleport to unit to their capital  to_state = 123 #id of the state to teleport\n  to_state_array = array_name #an array of states to teleport (will be randomly picked)\n  to_province = 123 #id of the province to teleport\n\n  limit = { \n     # trigger will be checked for owner of armies and will only teleport if true. scope if the owner of the army and prev is the scope that calls teleport_armies\n  } \n}"
		},
		"every_controlled_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every State controlled by the country in scope (or \\\"random_select_amount\\\" of random state if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching state with display_individual_scopes.\nex:\nSOV = {\n\tevery_controlled_state = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... state scope effects ...\n\t}\n}\""
		},
		"set_state_province_controller":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"sets the controller of provinces belong to a state and fullfils a condition. no tooltip is built\nset_state_province_controller = { \n controller = ITA\n  limit = { \n     # will be checked old controller of each province. will only update controller if true\n  } \n}"
		},
		"reserve_dynamic_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"reserves a dynamic country so it won't be recycled for civil wars. A dynamic country with no owned states must be reserved after it is created and unreserved once it is no longer going to be used. example :\nreserve_dynamic_country = yes\nreserve_dynamic_country = no\n"
		},
		"get_highest_scored_country_temp":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"calculates the highest scored country that is defined in a country scorer and sets it to a variable. Example: \nget_highest_scored_country_temp = { \n  scorer = scorer_id \n  var = var_name # variable name that the result will be stored. default is highest_scored_country \n}"
		},
		"create_dynamic_country":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"creates a dynamic country and runs child effects on it. example :\ncreate_dynamic_country = { \n  original_tag = ITA #original tag of new country\n  copy_tag = ITA # if set, it will copy stuff from copy tag instead of original_tag\n #...effects to run on new country}"
		},
		"get_sorted_scored_countries_temp":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"calculates & sorts all countries in a country scorer and stores them and their scores in temp arrays. Example: \nget_sorted_scored_countries_temp = { \n  scorer = scorer_id # id that is used in country scorer  array = array_name # a name to store sorted countries as a temp array (default to sorted_country_list) \n  scores = array_name # corresponding score temp array for countries stored in array (default to country_list_scores) \n}"
		},
		"random_occupied_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random occupied country that fulfills the \"limit\" trigger."
		},
		"every_occupied_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every occupied Country by the country in scope (or \\\"random_select_amount\\\" of random country if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.\nex:\nSOV = {\n\tevery_occupied_country = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... country scope effects ...\n\t}\n}\""
		},
		"add_resistance_target":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"adds resistance target to the scoped state :\nadd_resistance_target = 10\nadd_resistance_target = { \n  id = 123 #if set, id can be used for removing an added resistance target using remove_resistance_target effect  amount = 10 #original tag of new country\n  occupied = GER #if set, the resistance target will only apply if the occupied country is GER\n  occupier = ENG #if set, the resistance target will only apply if the occupier country is ENG\n  days = 42 #if set the newly added resistance target will be only active for this many days\n  tooltip = \"BLABLA\" #tooltip loc key to display in resistance target tooltips\n}"
		},
		"remove_resistance_target":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"removes a previously added resistance target using its id. No tooltips are generated.:\nremove_resistance_target = 42\n"
		},
		"get_highest_scored_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"calculates the highest scored country that is defined in a country scorer and sets it to a temp variable. Example: \nget_highest_scored_country = { \n  scorer = scorer_id \n  var = var_name # temp variable name that the result will be stored. default is highest_scored_country \n}"
		},
		"get_sorted_scored_countries":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"calculates & sorts all countries in a country scorer and stores them and their scores in arrays. Example: \nget_sorted_scored_countries = { \n  scorer = scorer_id # id that is used in country scorer  array = array_name # a name to store sorted countries as an array (default to sorted_country_list) \n  scores = array_name # corresponding score array for countries stored in array (default to country_list_scores) \n}"
		},
		"random_country_with_original_tag":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Executes children effects on a random country with original tag. Example:\nrandom_country_with_original_tag = { \n  original_tag_to_check = ENG # the effect will only run on countries that has this original tag \n  limit = { always = yes } # a limit can be defined to limit scopes\n  # ... effects to execute \n}"
		},
		"every_country_with_original_tag":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on a all countries with original tag (or \\\"random_select_amount\\\" of random country if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.\nex:\nevery_country_with_original_tag = {\n\toriginal_tag_to_check = ENG # the effect will only run on countries that has this original tag\n\ttooltip = my_loc_key # Optional\n\trandom_select_amount = 3 # Optional\n\tdisplay_individual_scopes = yes # Optional - default = no\n\t... country scope effects ...\n}\""
		},
		"add_decryption":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add decryption against a target country. Example:\nadd_decryption = { \n target = GER \n # pick one amount = 1000 # a flat amount to be added\n ratio = 0.3 # a ratio of crypto defense of target to be added\n"
		},
		"delete_units":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"deletes units that uses a specific template :\ndelete_units = { \n  division_template = \"Template Name\"\n  disband = no # if yes, equipment will be returned to country equipment. default is no\n}"
		},
		"force_enable_resistance":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"force enables resistance for scoped state. the resistance will be active even if other conditions doesn't satisfy (even if it is core or resistance check trigger is false)  :\nforce_enable_resistance = GER # same as occupier = GER \nforce_enable_resistance = { \n  clear = no #if yes, will clear previously set resistance\n  occupier = GER #if set, the resistance will be enabled when the occupier is GER\n  occupied = ENG #if set, the resistance will be enabled if the occupier country is target\n}"
		},
		"force_disable_resistance":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"force disables resistance for scoped state.  :\nforce_disable_resistance = GER # same as occupier = GER \nforce_disable_resistance = { \n  clear = no #if yes, will clear previously disabled resistance\n  occupier = GER #if set, the resistance will be disabled when the occupier is GER\n  occupied = ENG #if set, the resistance will be disabled if the occupier country is target\n}"
		},
		"create_intelligence_agency":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"create an Intelligence Agency for the country, if it is not already done. Example: \ncreate_intelligence_agency = yes # creates with historical ones, if exists. \ncreate_intelligence_agency = { \n  name = \"M.I.B.\" \n  icon = \"GFX_intelligence_agency_logo_ita\" \n}"
		},
		"upgrade_intelligence_agency":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"add an upgrade to the Intelligence Agency (must be created):\nupgrade_intelligence_agency = upgrade_army_department"
		},
		"create_ship":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"create a ship from another country and assign it to the reserve fleet.\n'creator' is optional. If not set, it will be the scoped country.\n'name' is optional.\nFRA = {\n  create_ship = {\n    type = ship_hull_submarine_1\n    equipment_variant = \"S Class\"\n    creator = ENG\n    name = \"My ship name\"\n    amount = 5 #amount to add\n  }\n}\n"
		},
		"set_faction_spymaster":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"set current country as spy master of its faction"
		},
		"country_lock_all_division_template":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Lock all the division template at the country level. Note that you need to unlock them in the same way Can also supply the reason it is locked with localization key(You can't use 'set_division_template_lock' individually, because the lock at the country level will not be removed)Ex:country_lock_all_division_template = yescountry_lock_all_division_template = {  is_locked = yes  desc = LOC_KEY}"
		},
		"remove_all_power_balance_modifiers":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"removes all static modifiers from power balance\n\nExample:\nremove_all_power_balance_modifiers = {\n\tid = power_balance_id\n}"
		},
		"randomize_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Randomize a temporary variable\nrandomize_temp_variable = num_dogs\n# which is equivalient to\nrandomize_temp_variable = {\n  var = num_dogs\n  distribution = uniform\n}\n# which is equivalent to\nrandomize_temp_variable = {\n  var = num_dogs\n  distribution = uniform\n  min = 0\n  max = 1\n}\n# also allow for binomial distribution (with N=2)randomize_temp_variable = {\n  var = num_dogs\n  distribution = binomial\n  min = 0               # optional\n  max = 10              # required if min is specified\n}\n# also allow for the poisson distributionrandomize_temp_variable = {\n  var = num_dogs\n  distribution = poisson\n  lambda = 10           # required\n  min = 10              # optional\n}\n"
		},
		"randomize_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"refer to randomize_temp_variable"
		},
		"harm_operative_leader":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Harm an operative. The specified value is subject to modifiers.\nharm_operative_leader = 12\n"
		},
		"force_operative_leader_into_hiding":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Force an operative into hiding, preventing him from performing mission. The specified values is subject to modifiers\nforce_operative_leader_into_hiding = 12\n"
		},
		"add_intel":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Add the specified amount of intel over a specified country\nGER = {\n  add_intel = {\n    target = POL\n    civilian_intel = 3\n    army_intel = 1\n    # zero field can be omitted\n    # navy_intel = 0\n    # airforce_intel = 0\n  }\n}\n"
		},
		"operative_leader_event":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Fires a operative leader event for owner country.\nExample:\noperative_leader_event = {\n\tid = generic.17 # The event to fire.\n\t# Optional Fields:\n\toriginator = TAG # The originator of the event (default to the owner of the operative)\n\trecipient = TAG # The recipient of the event (default to the owner of the operative)\n\thours = 12 # The number of hours to wait before firing the event.\n\tdays = 5 # The number of days to wait before firing the event.\n\tmonths = 1 # The number of months to wait before firing the event, where a month is treated as 30 days.\n\t\t# Note:  hours, days, and months can all be used and will simply be added together.\n\trandom_hours = 18 # A random amount of hours to be added to the delay before firing, from 0 up to but not including random_hours.\n\trandom_days = 2 # A random amount of days to be added to the delay before firing, from 0 up to but one hour less than random_days.\n\t\t# Note:  random_hours and random_days can both be used and will simply be added together.\n\trandom = 6 # Equivalent to random_hours; preserverd for backwards compatibility.\n\trandom = { chance = 50 ... } # Specify a set of child effects to execute as part of this effect, with a percentage chance of randomly happening or not (as a group, not individually).\n\ttooltip = generic.17.t # Manually specify which tooltip to use for this effect.\n\tset_from = TAG # Set the scope of the From in the scripted localization\n\tset_from_from = TAG # Set the scope of the From.From in the scripted localization\n\tset_root = TAG # Set the scope of the Root in the scripted localization\n}\n"
		},
		"kill_operative":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM"],
			"description":	"Kills an operative. This will temporarily lock the slot they occupy\nExamples:\nGER = {\n    kill_operative = PREV  # where PREV is an operative (unit leader)\n    # or\n    kill_operative = {\n        operative = PREV\n    }\n}\n\nkill_operative = { killed_by = GER } # where the scope is an unit leader\n"
		},
		"random_controlled_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random controlled state that fulfills the \"limit\" trigger. \nprioritize = { <stateID> <stateID> } to pick those states first if they fulfull the limit"
		},
		"mark_focus_tree_layout_dirty":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Forces the refresh of the tree layout for the scoped country\nmark_focus_tree_layout_dirty = yes\n"
		},
		"add_civil_war_target":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Adds a country as a civil war target (added to both sides)\n\nExample:\nadd_civil_war_target = TAG"
		},
		"modulo_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"modulos a temp variable with another. Example: \nmodulo_temp_variable = { \n  var = variable_to_modulo \n  value = divisior \n}"
		},
		"modulo_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"modulos a variable with another. Example: \nmodulo_variable = { \n  var = variable_to_modulo \n  value = divisior \n}"
		},
		"set_country_leader_name":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"changes the name of country leader. no tooltip is generated\nset_country_leader_name = {\n  ideology = neutrality # can be ommitted. if so it will change the name of current ruler\n  name = \"James Boned\"\n}"
		},
		"set_country_leader_portrait":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"changes the portrait of country leader. no tooltip is generated\nset_country_leader_name = {\n  ideology = neutrality # can be ommitted. if so it will change the portrait of current ruler\n  portrait = \"GFX_portrait_italy_emperor_mussolini\"\n}"
		},
		"add_collaboration":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Adds the collaboration in a target country with our currently scoped country\nGER = {\n  add_collaboration = {\n    target = POL\n    value = 0.3\n  }\n}\n"
		},
		"set_collaboration":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Sets the collaboration in a target country with our currently scoped country\nGER = {\n  set_collaboration = {\n    target = POL\n    value = 0.3\n  }\n}\n"
		},
		"set_temp_variable_to_random":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"sets a temp variable to a random value. example \nset_temp_variable_to_random = num_dogs #sets num_dogs a random value between [0, 1) \nset_temp_variable_to_random = { \n\tvar = num_dogs #variable to set \n\tmin = 5 #default 0. value will be set in between [min, max) \n\tmax = 10 #default 1. value will be set in between [min, max) \n\tinteger = yes #default no. if yes the number value will be an integer \n} \n"
		},
		"set_variable_to_random":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"sets a variable to a random value. example \nset_variable_to_random = num_dogs #sets num_dogs a random value between [0, 1) \nset_variable_to_random = { \n\tvar = num_dogs #variable to set \n\tmin = 5 #default 0. value will be set in between [min, max) \n\tmax = 10 #default 1. value will be set in between [min, max) \n\tinteger = yes #default no. if yes the number value will be an integer \n} \n"
		},
		"set_leader_name":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["any"],
			"description":	"changes the name of unit leader. no tooltip is generated\nset_leader_name = \"James Boned\"\n"
		},
		"set_leader_portrait":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["any"],
			"description":	"changes the portrait of unit leader. no tooltip is generated\nset_leader_portrait = \"GFX_portrait_italy_emperor_mussolini\"\n"
		},
		"set_country_leader_description":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"changes the description of country leader. no tooltip is generated\nset_country_leader_name = {\n  ideology = neutrality # can be ommitted. if so it will change the portrait of current ruler\n  desc = \"DESC_KEY\"\n}"
		},
		"set_leader_description":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["any"],
			"description":	"changes the description of unit leader. no tooltip is generated\nset_leader_description = \"DESC_KEY\"\n"
		},
		"execute_operation_coordinated_strike":	{
			"supported_scope":	["OPERATION"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Special effect for executing the Coordinated Strike Operation. amount determines how often the simulation is run"
		},
		"add_nationality":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Add the specified nationalty to the scoped-in operative. Examples:\nadd_nationality = ROOT\nadd_nationality = FRA\n"
		},
		"recall_volunteers_from":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"The scoped in country recall the volunteers sent to the target country.\nExample:\n# FRA recalls the volunteers it sent to SPR\nFRA = { recall_volunteers_from = SPR }\n"
		},
		"turn_operative":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM"],
			"description":	"An operative is turned by the specified country.\nThis transfers the operative to the target country and make it appear as killed to the country of origin (increases the death counter and lock the slot).\nThis fires the on_action on_operative_death with as killer the target country.\nIf the target country is the owner of the operative, this has no effect and an error is logged.\n\nWARN: the on_action might execute immediatly, before any effect listed after the occurence of turn_operative.\n\nExamples:\nGER = {\n    turn_operative = PREV  # where PREV is an operative (unit leader)\n    # or\n    turn_operative = {\n        operative = PREV\n    }\n}\n\nturn_operative = { turned_by = GER } # where the scope is an unit leader\n"
		},
		"every_character":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every Character (or \\\"random_select_amount\\\" of random character if specified) of the country in scope, that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching character with display_individual_scopes.\nex: GER = {\n  every_unit_leader = {\n\ttooltip = my_loc_key # Optional\n\trandom_select_amount = 3 # Optional\n\tinclude_invisible = yes # Optional - default = no\n    display_individual_scopes = yes # Optional - default = no\n    ... character scope effects ...\n  }\n}\""
		},
		"random_character":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random characters that fulfills the \"limit\" trigger. tooltip=key can be added to override tooltip title"
		},
		"set_equipment_version_number":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"![MD]\nChanges current version number for a given equipment type to N.\nThe next equipment variant created from that type will have version number N+1.\n\n#### Example\n```\nset_equipment_version_number = {\n\ttype = small_plane_airframe_1\n\tversion = 4\n}\n```\n\""
		},
		"add_doctrine_cost_reduction":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"adds a limited use cost reduction for doctrines"
		},
		"set_garrison_strength":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"set initial garrison strength. Example: set_garrison_strength = 0.5"
		},
		"add_corps_commander_role":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"add corps commander role to character\n\nExample:\nadd_corps_commander_role = {\n\tcharacter = GER_Character_token # optional if inside character scope\n\ttraits = {  }\n\tskill = 4\n\tattack_skill = 2\n\tdefense_skill = 3\n\tplanning_skill = 3\n\tlogistics_skill = 5\n\t}\n}"
		},
		"add_field_marshal_role":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"add field marshall role to character\n\nExample:\nadd_field_marshal_role = {\n\tcharacter = GER_Character_token # optional if inside character scope\n\ttraits = {  }\n\tskill = 4\n\tattack_skill = 2\n\tdefense_skill = 3\n\tplanning_skill = 3\n\tlogistics_skill = 5\n\t}\n}"
		},
		"add_naval_commander_role":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"Add naval commander to character\n\nExample:\nadd_naval_commander_role = {\n\tcharacter = GER_Character_token # optional if inside character scope\n\ttraits = { spotter }\n\tskill = 4\n\tattack_skill = 3\n\tdefense_skill = 3\n\tmaneuvering_skill = 3\n\tcoordination_skill = 4\n\t}\n}"
		},
		"add_country_leader_role":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"add country leader role to character\n\nExample:\nadd_country_leader_role = {\n\tcharacter = \"GER_Character_Token\" # optional if inside character scope\n\tpromote_leader = yes\n\tcountry_leader = {\n\t\tideology = socialism\n\t\texpire = \"1965.1.1.1\"\n\t\ttraits = {\n\t\t\twar_industrialist\n\t\t}\n\t}\n}\n"
		},
		"add_advisor_role":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"add advisor role to character\nMay directly activate (aka hire) using activate = yes\n\nExample:\nadd_advisor_role = {\n\tcharacter = \"GER_Character_Token\" # optional if inside character scope\n\tadvisor = {\n\t\tslot = air_chief\n\t\tcost = 50\n\t\tidea_token = GER_character_token_air_chief\n\t\ttraits = {\n\t\t\tair_chief_ground_support_2\n\t\t}\n\t\tallowed = {...}\n\t}\n\tactivate = yes\n}\n"
		},
		"retire_character":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Un-assigns a character from a nation and all its corresponding jobs, advisor, unit leader, country leader\n\nExample:\nretire_character = GER_Character_Token\n"
		},
		"recruit_character":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Attach a character to a country. Must be in country scope.\n\nExample:\nGER = { recruit_character = GER_Character_token }\n"
		},
		"promote_character":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"promotes character to the head of their political party.If this is the ruling party, the character becomes country leader.if the character has several country leader role (i.e. several ideologies), then it is mandatory to provide the ideology to promote.\n\nExample in country scope or scripted effects:\npromote_character = GER_erwin_rommel\npromote_character = {\n  character = GER_erwin_rommel\n  ideology = nazism\n}\n\n\nExample in character scope:\npromote_character = yes\npromote_character = nazism\npromote_character = {\n  ideology = nazism\n}"
		},
		"play_song":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Plays song from database"
		},
		"scoped_play_song":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Plays song from database only on in current scope's player"
		},
		"release_on_controlled":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"releases specified country as a puppet using your owned or controlled states"
		},
		"release_puppet_on_controlled":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"releases specified country as puppet using states you own or control"
		},
		"create_entity":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"creates an entity on map\ncreate_entity = {\n  entity = entity_name #gfx entry \n  id = 123 # can be ommitted. if given you can use this id to access entity in later times. will replace existing entity if it exists\n  var = var_name # can be ommitted. if given the id will be stored in this value so the entity can be accessed in later times \n  # position can be set using following. you can specify a province/state or can enter a manual coordinate. you can do both and the coordinate will shift the state/province coordinate \n  x = 42 \n  y = 21 \n  province = 123 \n  state = 42 \n  z = 3 #if wanted you can specify a z to shift height of the entity\n  rotation = 1.2 # angle in radians \n  scale = 10.0 # scale of entity \n  min_zoom = 100.0 # min zoom needed to show entity \n  visible = scripted_trigger_name # a scripted trigger name to show or hide an entity. scope is player country}"
		},
		"destroy_entity":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"destroys an existing entity\ndestroy_entity = 123 #id\n"
		},
		"set_entity_movement":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"sets the position & rotation of an existing entity using two coordinates\nset_entity_movement = {\n  id = 123 # id of entity \n  start = { \n    # position can be set using following \n    x = 42 \n    y = 21 \n    province = 123 \n    state = 42 \n    z = 3 #if wanted you can specify a z to shift height of the entity\n  } \n  target = { \n    # position can be set using following \n    x = 42 \n    y = 21 \n    province = 123 \n    state = 42 \n    z = 3 #if wanted you can specify a z to shift height of the entity\n  } \n  ratio = 0.5 # a ratio in between 0 - 1. the entity is positioned in between start & target position using this ratio \n  rotation = 1.2 # angle in radio, entity is rotated using the direction and this angle is added after that \n}"
		},
		"set_entity_position":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"sets the position of existing entity\nset_entity_position = {\n  id = 123 # id of entity \n  # position can be set using following \n  x = 42 \n  y = 21 \n  province = 123 \n  state = 42 \n  z = 3 #if wanted you can specify a z to shift height of the entity\n}"
		},
		"set_entity_rotation":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"sets the rotation of existing entity\nset_entity_rotation = {\n  id = 123 # id of entity \n  rotation = 0.23 # angle in radians \n}"
		},
		"set_entity_scale":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"sets the scale of existing entity\nset_entity_scale = {\n  id = 123 # id of entity \n  scale = 5.0 \n}"
		},
		"remove_decision_on_cooldown":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Removes decision on cooldown to reactivate or remove. \nExample: remove_decision_on_cooldown = some_decision_here"
		},
		"force_update_map_mode":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"force rebuilds map mode. no tooltip generated.\nforce_update_map_mode = { \n  limit = { always = yes } # limit to check against player\n  mapmode = scripted_map_mode_name\n"
		},
		"damage_units":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"damages units for given conditions. no tooltip generated\ndamage_units = {\n  #specify a location\n  province = 42\n  state = 5\n  region = 5\n  limit = { always = yes } #you can add a trigger for country check\n  damage = 0.5 #if defined will damage both org & str damage with this amount\n  org_damage = 0.5\n  str_damage = 0.5\n  ratio = yes #will damage a ratio damage to total org/str of unit if set\n  template = \"template_name\" #you can limit army templates to damage  army = yes #will damage armies\n  navy = yes #will damage navies\n}"
		},
		"uncomplete_national_focus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"uncompletes a focus for a country. If specified, the 'on_uncomplete' effect will be executed on each uncompleted focus.\nExample: uncomplete_national_focus = {\n\tfocus = GER_oppose_hitler\n\tuncomplete_children = yes # Optional. Default is no. If yes, all proceeding focuses will also be uncompleted if their prerequisite aren't met after the preceeding focuses are uncompleted.\n\trefund_political_power = no # Optional. Default is no. If yes, the country is refunded the political power invested in the current focus if it's canceled as a result of its prerequisites being uncompleted.\n}\n"
		},
		"build_railway":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Builds/adds railway level between two provinces or along a path. Example:\nbuild_railway = {\n  level = 1 # Defaults to 1\n  build_only_on_allied = yes # No by default. If yes and the effect scope is country, it will only build on allied territories for the country\n\n  # You can specify a weight function that will be used in pathing. The scope will be the controller of the province it is trying to path to.\n  # A negative value will make it not to path to that controller.\n  # Non-negative values will be used as a path cost for that province.\n  controller_priority = {\n    base = 1\n\n    modifier = {\n      tag = MAN\n      add = 2\n    }\n  }\n\n  # The following options are used for picking a path. You can specify multiple options and it will pick in following order:\n  fallback = yes # Default no. If yes, each option will try to fallback to next one.\n  # option 1: List of provinces to draw railways. If fallback = yes uses start and end provinces of the path as fallback in option 2.\n  path = { 10 20 30 40 }\n  # option 2: Specify start & end province IDs. It will pick the shortest path. If provinces are not valid and if fallback = yes it will use states of those provs and use in option 3.\n  start_province = 42\n  target_province = 84\n  # option 3: Specify start & end state IDs. It will pick provinces with the best node (capital > nodes > naval )\n  start_state = 50\n  target_state = 100\n}\n"
		},
		"remove_wargoal":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"removes war goal type targetting nation targetExample:\nremove_wargoal = {\n\ttype = take_state\n\ttarget = FRA\n}"
		},
		"set_entity_animation":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"sets the rotation of existing entity\nset_entity_animation = {\n  id = 123 # id of entity \n  animation = \"shoot_lasers\" \n}"
		},
		"start_peace_conference":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Starts a limited peace conference between the two countries if at war. Only the specified loser country and their potential subjects are included as losers in the conference. ROOT is the winner while the target tag is the loser.\nExample:\nSOV = {\n  start_peace_conference = {\n    tag = FIN  # main loser\n    score_factor = 0.2  # 0-1, the fraction of conference score allocated to winners. Can use a variable like eg PREV.surrender_progress. 0.0 implies a white peace.\n    \n    # winner_scope and loser_scope can be ALL (all relevant countries), FACTION (members of main country's faction and overlordship), LIMITED_FACTION (faction members if main country is faction leader, and subjects if main country is overlord), and LIMITED (main country and their subjects)\n    winner_scope = FACTION  # optional, default is LIMITED_FACTION\n    loser_scope = FACTION  # optional, default is LIMITED_FACTION\n    message = FIN_agree_peace  # optional, custom message to display in post-conference popup\n  }\n}"
		},
		"add_units_to_division_template":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Add units to division template for a country. Example:\nadd_units_to_division_template = {\n  template_name = \"Name of template\" # not needed on done on specific division\n  regiments = {\n    infantry = 0 # (Adds infantry to first available slot on first column (x=0))\n    cavalry = 2 # (Adds cavalry to first available slot on third column (x=2))\n  }\n  support = {\n     military_police = 0 # (Adds military_police to first available slot on first (and likely only) column of supports (x=0))\n  }\n}"
		},
		"swap_country_leader_traits":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"swap 2 traits on a country leader. \n Syntax: swap_country_leader_traits = { remove = <trait> add = <trait> [ideology = <ideology>] }"
		},
		"random_country_division":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Executes children effects on a random division that fulfill the \"limit\" trigger. tooltip=key can be added to override tooltip title"
		},
		"every_country_division":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every Division of the country in scope (or \\\"random_select_amount\\\" of random divisions if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching division with display_individual_scopes.\nex:\nSOV = {\n\tevery_country_division = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... division scope effects ...\n\t}\n}\""
		},
		"reseed_division_commander":	{
			"supported_scope":	[],
			"supported_target":	["none"],
			"description":	"reseed_division_commander = 9999 [Debug & Testing Effect]"
		},
		"give_market_access":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Gives market access to the specified country.\nExample:\nFRA =  {\n  give_market_access = BRA  # France and Brazil will now have market access to each other\n}\""
		},
		"set_power_balance":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"sets active power balance for country or sets parameters of the already active power balance\n\nExample:\nset_power_balance = {\n\tid = power_balance_id\n\tleft_side = left_side_id\n\tright_side = right_side_id\n\tset_default = yes/no # default = no\n\tset_value = 0.5 # if used, will set the new value of the power balance\n}"
		},
		"remove_power_balance":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"removes power balance from country\n\nExample:\nremove_power_balance = {\n\tid = power_balance_id\n}"
		},
		"add_power_balance_value":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"adds current value of a power balance\n\nExample:\nadd_power_balance_value = {\n\tid = power_balance_id\n\tvalue = 0.42 # this value is added to the current value of the power balance\n\ttooltip_side = side_id # optional - add this to tell the game to show the name of the specific side in the tooltip\n}"
		},
		"set_division_template_cap":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Set division cap for a division template\nExample: set_division_template_cap = { division_template = <name> division_cap = <int (default:1)> }"
		},
		"clear_division_template_cap":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Clears division cap for a division template\nExample: clear_division_template_cap = { division_template = <name>  }"
		},
		"set_character_flag":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"set character flag"
		},
		"modify_character_flag":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"modify character flag. Only modifies if flag already exists.\nExample: _modify_character_flag_ = { flag = <name> value = <number> }"
		},
		"clr_character_flag":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"clear character flag"
		},
		"every_core_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every core State of the country in scope (or \\\"random_select_amount\\\" of random state if specified) that fulfills the \\\"limit\\\" trigger.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching state with display_individual_scopes.\nex:\nSOV = {\n\tevery_core_state = {\n\t\ttooltip = my_loc_key # Optional\n\t\trandom_select_amount = 3 # Optional\n\t\tdisplay_individual_scopes = yes # Optional - default = no\n\t\t... state scope effects ...\n\t}\n}\""
		},
		"random_core_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random core state that fulfills the \"limit\" trigger. \nprioritize = { <stateID> <stateID> } to pick those states first if they fulfull the limit"
		},
		"transfer_state_to":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS"],
			"description":	"Set owner and controller of a state to a given country\nExample:\\n\"\nUSA {\n\tevery_core_state = {\n\t\ttransfer_state_to = JAM\n\t}\n}\n"
		},
		"set_state_owner_to":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS"],
			"description":	"Set owner of a state to a given country\nExample:\\n\"\nUSA {\n\trandom_core_state = {\n\t\tset_state_owner_to = JAM\n\t}\n}\n"
		},
		"set_state_controller_to":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS"],
			"description":	"Set controller of a state to a given country\nExample:\\n\"\nUSA {\n\trandom_core_state = {\n\t\tset_state_controller_to = JAM\n\t}\n}\n"
		},
		"remove_country_leader_role":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"Remove country leader role from character.\nExample:\nremove_country_leader_role = {\n\tcharacter = \"GER_Character_Token\" # optional if inside character scope\n\tideology = socialism\n}\n"
		},
		"party_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Executes children effects on random characters that fulfills the \"limit\" trigger.\nHas to use has_ideology in limit to determine the party (with ideology group)\ntooltip=key can be added to override tooltip title\n\nparty_leader = {\n\tlimit = { has_ideology = communism }\n\tset_character_flag = whatever_flag\n}"
		},
		"generate_character":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Generates a character. Use in every_country in order to generates one copy of the character per country satisfying the limit conditions.\nevery_country = {\n\tlimit = { OR = { original_tag = KOR original_tag = SER original_tag = ICE } }\n\tgenerate_character = { #create + recruit\n\t\ttoken_base = army_chief_defensive_1 # mandatory, character token will be token_base\n\t\tname = \"Character's Name\" # optional, no name provided means random name for each generated character\n\t\t# then whatever you would put when writing character\n\t\tadvisor = {\n\t\t\tidea_token = ac # full idea token will be token_base_idea_token (to ensure unicity). optional, slot will be used if missing.\n\t\t\tslot = army_chief\n\t\t\tallowed = { original_tag = PREV }\n\t\t\ttraits = { army_chief_defensive_1 }\n\t\t}\n\t}\n}"
		},
		"every_possible_country":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"\"Executes children effects on every Country (or \\\"random_select_amount\\\" of random country if specified) that fulfills the \\\"limit\\\" trigger.\nDifference with every_country is that it includes countries not yet present on the map.\ntooltip=key can be added to override tooltip title.\nBy default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.\nex:\nevery_possible_country = {\n\ttooltip = my_loc_key # Optional\n\trandom_select_amount = 3 # Optional\n\tdisplay_individual_scopes = yes # Optional - default = no\n\t... country scope effects ...\n}\""
		},
		"show_unit_leaders_tooltip":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"show unit leader's name"
		},
		"character_list_tooltip":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Display in tooltip every character  (or \"random_select_amount\" of random characters if specified) that fulfills the \"limit\" trigger."
		},
		"remove_unit_leader_role":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"Remove unit leader role to character\n\nExample:\nremove_corps_commander_role = {\n\tcharacter = GER_Character_token \n}\nremove_corps_commander_role = yes # inside a character scope\n"
		},
		"set_portraits":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"set portraits for the target character. Syntax is similar to character files.\n\nexample:\nset_portraits = {\n\t\tcharacter = my_character # optional, use if not in a character scope\t\tarmy = { small =\"MySmallCharacterGFX\"}\n\t\tcivilian = { large =\"MyLargeCharacterGFX\" }\n}\n"
		},
		"set_character_name":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"\"set name for the target character. Either localization key or direct name.\nexample:\nset_character_name = {\n\tcharacter = my_character # optional, use if not in a character scope\n\tname = my_name # either loc key or direct name\n}\nmy_character = {\n\tset_character_name = my_name # only possible in character scope\n}"
		}
	},
	"triggers":	{
		"state":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "CAPITAL"],
			"description":	"check state id"
		},
		"any_scientist":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Checks if at least one scientist of the Country in scope matches the triggers. \ntooltip=key can be defined to override title.\nex: GER = {\n  any_scientist = {\n\ttooltip = my_loc_key # Optional\n    ... Character scope triggers ...\n  }\n}\""
		},
		"all_scientists":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Checks if all scientists of the Country in scope matches the triggers.\ntooltip=key can be defined to override title.\nex: GER = {\n  all_scientists = {\n\ttooltip = my_loc_key # Optional\n     ... Character scope triggers ...\n  }\n}\""
		},
		"has_scientist_level":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"\"Checks if the scientist of the character in scope matches the skill level condition for a specialization. Supports < > = operators.\nlevel = <int>\nspecialization = <specialization_token>\nex: my_character = {\n\t  has_scientist_level = {\n\t    level > 2\n\t    specialization = specialization_nuclear\n      }\n\t}\n\""
		},
		"is_active_scientist":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["any"],
			"description":	"\"Checks if the scientist of the character in scope is assigned to a project\nis_scientist_active = <bool>\nex: my_character = {\n        is_scientist_active = yes\n        is_scientist_active = no\n\t}\n\""
		},
		"has_project_flag":	{
			"supported_scope":	["SPECIAL_PROJECT"],
			"supported_target":	["any"],
			"description":	"\"Check if flag has been set within the special project in scope.\nMay checks on the value or date/days since last modified date.\nExamples:\nhas_project_flag = my_flag\nhas_project_flag = {\n\tflag = my_flag (mandatory)\n\tvalue < 12 (optional)\n\tdate > 1936.3.25 (optional, compare with the date where the flag was last modified )\n\tdays > 365 (optional, compare with the number of days since the flag was last modified )\n}\""
		},
		"any_active_scientist":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Checks if at least one active scientist of the Country in scope matches the triggers.\nex: GER = {\n  any_active_scientist = {\n\ttooltip = my_loc_key # Optional\n    ... Character scope triggers ...\n  }\n}\""
		},
		"all_active_scientist":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Checks if all active scientists of the Country in scope matches the triggers.\nex: GER = {\n  all_active_scientists = {\n\ttooltip = my_loc_key # Optional\n     ... Character scope triggers ...\n  }\n}\""
		},
		"is_scientist_injured":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["any"],
			"description":	"\"Checks if the scientist of the character in scope is injured\nis_scientist_injured = <bool>\nex: my_character = {\n        is_scientist_active = yes\n\t}\n\""
		},
		"has_breakthrough_points":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Checks if the country in scope has enough breakthroughs within a given specialization.\nspecialization = <specialization_token>\nvalue = <point>\nex: GER = {\n\t  has_breakthrough_points = {\n\t    specialization = specialization_nuclear\n\t\tvalue = 1\n      }\n\t}\n\""
		},
		"has_scientist_specialization":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Checks if the country in scope has a scientist with a skill level of at least 1 in specialization.\nex:\nSOV = {\n\thas_scientist_specialization = specialization_nuclear\n}\""
		},
		"has_facility_specialization":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Checks if the country in scope has a facility with specialization.\nex:\nSOV = {\n\thas_facility_specialization = specialization_nuclear\n}\""
		},
		"can_construct_building":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"\"Checks if the country (as ROOT) and state in scope can build a building in the state.\nex:\nGER = {\n\t65 = {\n\t\tcan_construct_building = land_facility\n\t}\n}\""
		},
		"has_naval_invasion_against_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check if the scoped country has a naval invasion against the specified state.\nExample 1:\nhas_naval_invasion_against_state = <STATE_ID>\nExample 2:\n has_naval_invasion_against_state = {\n   state = <STATE_ID>\n   preparation > 0.0  # (optional: preparation percentage, with a default value of 0.0)\n   activated = no   # (optional: if set, also check if invasion is activated or not)\n}"
		},
		"any_state_in":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any state in the given category meets the trigger.\ntooltip=key can be defined to override title.\nThe trigger takes one of the followings:\n\tarray: an array of states.\n\tcontinent: A continent.\n\tai_area: The id of an area.\n\tstrategic_region: The id of an region.\n\n* Note that no default tooltip is available for array and ai_area.\nExample:\nCheck if the trigger is valid in any state in a continent:\nany_state_in = {\tconteinent = europe\n\tFOO_TRIGGER = BAR\n}"
		},
		"if":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"if_, CIfTrigger, A conditional trigger\nif = { limit = { <triggers> } <trigger> }"
		},
		"is_mio_visible":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Checks if the visible trigger in the Military Industrial Organisation in scope returns true.\nex:\nmio:my_mio = {\n\tis_mio_visible = yes\n\tis_mio_visible = no\n}\""
		},
		"is_mio_available":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Checks if the available AND visible triggers in the Military Industrial Organisation in scope return true.\nex:\nmio:my_mio = {\n\tis_mio_available = yes\n\tis_mio_available = no\n}\""
		},
		"can_build_railway":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Checks if a railway can be built according to specifications. Example:\ncan_build_railway = {\n  build_only_on_allied = yes # No by default. If yes and the effect scope is country, it will only build on allied territories for the country\n\n  # You can specify a weight function that will be used in pathing. The scope will be the controller of the province it is trying to path to.\n  # A negative value will make it not to path to that controller.\n  # Non-negative values will be used as a path cost for that province.\n  controller_priority = {\n    base = 1\n\n    modifier = {\n      tag = MAN\n      add = 2\n    }\n  }\n\n  # The following options are used for picking a path. You can specify multiple options and it will pick in following order:\n  fallback = yes # Default no. If yes, each option will try to fallback to next one.\n  # option 1: List of provinces to draw railways. If fallback = yes uses start and end provinces of the path as fallback in option 2.\n  path = { 10 20 30 40 }\n  # option 2: Specify start & end province IDs. It will pick the shortest path. If provinces are not valid and if fallback = yes it will use states of those provs and use in option 3.\n  start_province = 42\n  target_province = 84\n  # option 3: Specify start & end state IDs. It will pick provinces with the best node (capital > nodes > naval )\n  start_state = 50\n  target_state = 100\n}\n"
		},
		"num_of_supply_nodes":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of supply nodes"
		},
		"date":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"checks for a specific date"
		},
		"has_truce_with":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"has_truce_with = yes/no - Checks if the country has truce with the specified country"
		},
		"skill":	{
			"supported_scope":	["CHARACTER", "COMBATANT"],
			"supported_target":	["none"],
			"description":	"compare leader skill levels"
		},
		"any_subject_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any subject country meets the trigger. tooltip=key can be defined to override title"
		},
		"all_subject_countries":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if all subject countries meet the trigger. tooltip=key can be defined to override title"
		},
		"has_railway_level":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Checks if a state contains a railway at or above the specified level. Example:\nhas_railway_level = {\n  level = 3\n  state = 1234\n}\n"
		},
		"phase":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if we are in this combat phase"
		},
		"has_railway_connection":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Checks for an existing rail connection. Uses same params as can_build_railway. Example:\nhas_railway_connection = {\n  build_only_on_allied = yes # No by default. If yes and the effect scope is country, it will only build on allied territories for the country\n\n  # The following options are used for picking a path. You can specify multiple options and it will pick in following order:\n  fallback = yes # Default no. If yes, each option will try to fallback to next one.\n  # option 1: List of provinces to draw railways. If fallback = yes uses start and end provinces of the path as fallback in option 2.\n  path = { 10 20 30 40 }\n  # option 2: Specify start & end province IDs. It will pick the shortest path. If provinces are not valid and if fallback = yes it will use states of those provs and use in option 3.\n  start_province = 42\n  target_province = 84\n  # option 3: Specify start & end state IDs. It will pick provinces with the best node (capital > nodes > naval )\n  start_state = 50\n  target_state = 100\n}\n\n"
		},
		"num_of_controlled_factories":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check the number of factories in controlled states excluding any gained or lost through trade, relations, modifiers etc."
		},
		"num_of_owned_factories":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check the number of factories in owned states excluding any gained or lost through trade, relations, modifiers etc."
		},
		"and":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"all inside trigger must be true"
		},
		"or":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"at least one entry inside trigger must be true"
		},
		"not":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"negates content of trigger"
		},
		"exists":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Check if the current country exist. The country of the scope you are in. Example: DEN = { exists = yes }"
		},
		"difficulty":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"check if the difficulty is above or below specified value 0-2 (difficulty enum). Example: difficulty > 0 (above easy)"
		},
		"log":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Print message to game.log - Can be localized"
		},
		"any_neighbor_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any neighbor country meets the trigger. tooltip=key can be defined to override title"
		},
		"has_country_flag":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"has country flag been set.Check flag val date set and days since set.\nExample: has_country_flag = test_flag\nhas_country_flag = { \n\tflag = <name> (mandatory)\n\tvalue < <int> (optional)\n\tdate > <date> (optional)\n\tdays > <int> (optional)\n}"
		},
		"reserves":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of reserves"
		},
		"tag":	{
			"supported_scope":	["COUNTRY", "COMBATANT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"country tag trigger"
		},
		"any_country":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any country meets the trigger"
		},
		"check_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"\"Compares a variable to a number or another variable\nex:\ncheck_variable = {\n\tvar = varname\n\tvalue = 12\t# accepts variables\n\tcompare = equals\n\t# possible values for compare :\n\t# less_than, less_than_or_equals\n\t# greater_than, greater_than_or_equals\n\t# equals, not_equals\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and/or RIGHT tokens in it\n}\n# some shorter versions :\ncheck_variable = { varname = 0 }\ncheck_variable = { varname > 12 }\ncheck_variable = { varname < 42 }\ncheck_variable = { varname > another_varname }\n\""
		},
		"region":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"check state's strategic area id"
		},
		"is_subject":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Checks if the country is subject of any other country"
		},
		"area":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"check state's strategic area id"
		},
		"has_war_with_major":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"is country at war with a major"
		},
		"threat":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"check the global threat value (world tension). 0-1 value"
		},
		"always":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"always returns specified value"
		},
		"is_capital":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"Is scope state a capital. 169 = { is_capital = yes }"
		},
		"has_global_flag":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"has global flag been set.Check flag val date set and days since set.\nExample: has_global_flag = test_flag\nhas_global_flag = { \n\tflag = <name> (mandatory)\n\tvalue < <int> (optional)\n\tdate > <date> (optional)\n\tdays > <int> (optional)\n}"
		},
		"impassable":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"checks if a state is impassable"
		},
		"is_attacker":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if attacker side in combat"
		},
		"has_dlc":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Checks if player has a DLC.\nExample: has_dlc = \"name of the dlc\""
		},
		"hidden_trigger":	{
			"supported_scope":	["STATE", "COUNTRY", "CHARACTER", "COMBATANT", "ACE", "STRATEGIC_REGION", "OPERATION", "INDUSTRIAL_ORG", "PURCHASE_CONTRACT", "RAID_INSTANCE", "SPECIAL_PROJECT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"a hidden trigger, anything in it not shown in tooltips"
		},
		"is_female":	{
			"supported_scope":	["COUNTRY", "CHARACTER", "ACE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"checks if scoped unit leader, ace or country is female"
		},
		"has_idea":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country has idea"
		},
		"any_enemy_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any enemy country meets the trigger. tooltip=key can be defined to override title"
		},
		"is_neighbor_of":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if neighbor ( controlled territory ) with specified country"
		},
		"has_opinion":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check what opinion the country has towards a specified country"
		},
		"has_opinion_modifier":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if a country has the opinion modifier"
		},
		"is_subject_of":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if the country is subject of specified country"
		},
		"all_neighbor_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if all neighbor countries meet the trigger. tooltip=key can be defined to override title"
		},
		"all_country":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if all countries meets the trigger. tooltip=key can be defined to override title"
		},
		"all_enemy_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if all enemy countries meet the trigger. tooltip=key can be defined to override title"
		},
		"night":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if combat is at night"
		},
		"dig_in":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if we have digin level (lowest)"
		},
		"temperature":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check combat province temperature"
		},
		"any_state_division":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any division meets the trigger. tooltip=key can be defined to override title"
		},
		"armor":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"Check that average armor level of combatant is over a certain level"
		},
		"unit_strength":	{
			"supported_scope":	[],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check scope unit strength status 0-1: Example unit_strength < 1"
		},
		"unit_organization":	{
			"supported_scope":	[],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check scope unit organization status 0-1: Example unit_organization < 1"
		},
		"division_has_majority_template":	{
			"supported_scope":	[],
			"supported_target":	["none"],
			"description":	"checks if division template has majority of subunit type."
		},
		"any_country_division":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any division meets the trigger. tooltip=key can be defined to override title"
		},
		"is_unit_template_reserves":	{
			"supported_scope":	[],
			"supported_target":	["any"],
			"description":	"returns true if this unit's template has the reserves priority"
		},
		"has_war":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"is country at war"
		},
		"is_controlled_by":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if state is controlled by"
		},
		"is_owned_by":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if state is owned by"
		},
		"is_embargoed_by":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if embargoed by specified country"
		},
		"is_embargoing":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if country is embargoing specified country"
		},
		"skill_advantage":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"compare leader skill levels"
		},
		"owns_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "CAPITAL"],
			"description":	"check owner for state(s)"
		},
		"controls_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "CAPITAL"],
			"description":	"check controller for state(s)"
		},
		"has_government":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"does country government (ruling party) belong to ideology group"
		},
		"has_state_flag":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"has state flag been setCheck flag val date set and days since set.\nExample: has_state_flag = test_flag\nhas_state_flag = { \n\tflag = <name> (mandatory)\n\tvalue < <int> (optional)\n\tdate > <date> (optional)\n\tdays > <int> (optional)\n}"
		},
		"any_country_with_core":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any country with a core on the scoped state meets the trigger. tooltip=key can be defined to override title"
		},
		"has_resources_in_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks for amount of resources in country (the balance by default)\nExample:\nhas_resources_in_country = {\n\tresource = chromium\n\tamount > 10\n\textracted = no # (optional, default: no) checks extracted amount instead of country balance\n\tbuildings = no # (optional, default: no) checks only amount from local buildings instead of country balance"
		},
		"pc_is_state_claimed":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"Check if state is claimed (and uncontested) in conferenceExample:\npc_is_state_claimed = yes/no"
		},
		"division_has_battalion_in_template":	{
			"supported_scope":	[],
			"supported_target":	["none"],
			"description":	"checks if division template has the subunit type."
		},
		"has_war_with":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"is countries at war"
		},
		"has_resources_rights":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks for resources rights in state.Warning! this always returns false if the state has no resource.\nExample:\nhas_resources_rights = {\n\tstate = 60 # optional - can be used in state scope instead\n\treceiver = GER # optional - can be used in country scope instead\n\tresources = {steel oil} # optional - if not provided checks all resources."
		},
		"divisions_in_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks for amount of divisions in specified state owned by current country. \ndivisions_in_state = { \n  state = state_id \n  size > 42 \n  type = unit type eg. infantry, armor (optional) \n  unit = specific unit eg. mountaineers, light_tank (optional) \n}"
		},
		"country_exists":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if the specified country exist"
		},
		"ships_in_area":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks for amount of ships in specified area"
		},
		"has_army_size":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks for amount of divisions, additionally of a specified type"
		},
		"has_navy_size":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks for amount of ships, additionally of a specified type, archetype, or sub unit definition.\n\nExamples:\n\thas_navy_size = { size > 10 type = convoy } # Must have more than 10 convoys.\n\thas_navy_size = { size < 1 archetype = ship_hull_light } # Must not have any ships with light hulls.\n\thas_navy_size = { size > 39 unit = heavy_cruiser } # Must have 40 or more heavy cruisers.\n\thas_navy_size = { size < 100 } # Must have fewer than 100 ships of any type."
		},
		"num_of_military_factories":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of military factories"
		},
		"num_of_civilian_factories":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of civilian factories"
		},
		"num_of_naval_factories":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of naval factories"
		},
		"num_of_nukes":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of nukes"
		},
		"has_manpower":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of manpower"
		},
		"has_political_power":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of political power"
		},
		"num_of_available_military_factories":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of available military factories"
		},
		"num_of_available_naval_factories":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of available naval factories"
		},
		"num_of_available_civilian_factories":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of available civilian factories"
		},
		"is_in_faction_with":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if member of same faction as specified country"
		},
		"is_in_faction":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if member of any faction"
		},
		"is_faction_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country leads a faction"
		},
		"is_guaranteed_by":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if guaranteed by specified country"
		},
		"has_guaranteed":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if country has guaranteed specified country"
		},
		"has_military_access_to":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check country has military access to specified country"
		},
		"gives_military_access_to":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if country gives military access to specified country"
		},
		"scope_exists":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"\"Check if the current scope exist.\nThis differ from for example exists that checks if the country of the scope exists.\nThis checks if the scope for the country exists and the other if the country itself exists in the game.\nNote that variable scopes are always valid scopes.\nExample:\nDEN = { exists = yes } # Should always be true since DEN is always a valid scope\nsp:sp_land_flamethrower_tank = {\n\tcharacter = {\n\t\tscope_exists = yes\n\t}\n} # True if the project has an assigned scientist.\nvar:my_var = {\n\tscope_exists = yes # Always true since variables are always valid scopes\n}\n\""
		},
		"any_state":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any state meets the trigger. tooltip=key can be defined to override title"
		},
		"any_owned_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any owned state meets the trigger. tooltip=key can be defined to override title"
		},
		"any_neighbor_state":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any neighbor state meets the trigger. tooltip=key can be defined to override title"
		},
		"any_allied_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check if any allied country meets the trigger. Does not include the country itself. tooltip=key can be defined to override title"
		},
		"all_state":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if all states meets the trigger. tooltip=key can be defined to override title"
		},
		"all_owned_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if all owned states meets the trigger. tooltip=key can be defined to override title"
		},
		"all_neighbor_state":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if all neighbor states meets the trigger. tooltip=key can be defined to override title"
		},
		"all_allied_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check if all allied countries meet the trigger. Does not include the country itself. tooltip=key can be defined to override title"
		},
		"surrender_progress":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if a country is close to surrendering"
		},
		"political_power_daily":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if daily political power increase is more or less that specified value \n political_power_daily > 1.5"
		},
		"has_bombing_war_support":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check value of bombing malus to war support 0-1: Example has_bombing_war_support < 0.1"
		},
		"has_casualties_war_support":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check value of casualties malus to war support 0-1: Example has_casualties_war_support < 0.1"
		},
		"has_convoys_war_support":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check value of convoys sunk malus to war support 0-1: Example has_convoys_war_support < 0.1"
		},
		"resistance":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"Compares the current resistance level of a state to a value. Example: resistance > 50 "
		},
		"ic_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compares the ratio of total industrial capacity between the scope country and the one set with 'tag'"
		},
		"any_war_score":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"compares the warscore of all wars in a country to see if any fullfills the comparison condition 0-100 - Example: any_war_score > 40"
		},
		"has_idea_with_trait":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country has idea with specified trait"
		},
		"has_deployed_air_force_size":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks for amount of aircrafts, additionally of a specified type"
		},
		"is_fighting_in_terrain":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check what terrain is in combat"
		},
		"is_defender":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if defender side in combat"
		},
		"has_combat_modifier":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if combatant has modifier"
		},
		"is_winning":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if defender side in combat"
		},
		"fastest_unit":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if fastest unit of combatant is over this limit"
		},
		"recon_advantage":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"checks if side has an advantage in recon level"
		},
		"has_tech":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country has technology"
		},
		"land_doctrine_level":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks researched land doctrine level"
		},
		"is_ironman":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Check if current game is ironman."
		},
		"has_start_date":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Compare the initial start date of current game."
		},
		"has_built":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks country has built a set number (at least) of a certain type of building since taking goal \nhas_built = { \n  type = building_type \n  value = 42 \n}"
		},
		"has_available_idea_with_traits":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if country has available ideas with specific traits more than limit. Example: \nhas_available_idea_with_traits = { \n\tidea = head_of_intelligence # trait names. can be a list of traits in { } \n\tlimit = 1 \n\tcharacters = yes/no - only runs this trigger on characters \n\tignore = generic_head_of_intelligence # if specified, these ideas will be ignored. can be a list of ideas in { }\n} \n"
		},
		"is_claimed_by":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if state is claimed by country"
		},
		"is_core_of":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if state is core of country"
		},
		"is_ai":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if country is AI controlled."
		},
		"has_trait":	{
			"supported_scope":	["CHARACTER", "COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if sides leader has trait"
		},
		"has_reserves":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if side has reserves waiting"
		},
		"frontage_full":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if sides front is full or can get more reinforcements"
		},
		"is_lend_leasing":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"is lend-leasing country"
		},
		"free_building_slots":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"checks building for available construction levels \nfree_building_slots = { \n\tbuilding = building_type \n\tsize > 5 \n\tinclude_locked = yes # Optional - only to be used for buildings using Shared Slots. \n\tprovince = 42 #will check province buildings if specified \n}"
		},
		"is_demilitarized_zone":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"checks if a state is a demilitarized zone"
		},
		"is_border_conflict":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"checks if a state is in border conflict"
		},
		"has_completed_focus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"has country completed focus"
		},
		"has_offensive_war_with":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"One country has offensive war against other country."
		},
		"has_defensive_war_with":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"One country has defensive war against other country."
		},
		"has_offensive_war":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"is country at offensive war"
		},
		"has_defensive_war":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"is country at defensive war"
		},
		"is_coastal":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"check if state is coastal"
		},
		"casualties":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Check the amount of casualties a country has suffered in all of it's wars"
		},
		"custom_trigger_tooltip":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"![MD]\nAlias for [custom_override_tooltip](#custom_override_tooltip) trigger (see that trigger for more info). Kept for backward compatibility.\nPrefer [custom_override_tooltip](#custom_override_tooltip) instead."
		},
		"has_equipment":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks for amount of equipment stored"
		},
		"num_of_factories":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check amount of available factories (excluding temporary sources like trade and lend-lease)\nExample:\nGER = { num_of_factories < 50 }"
		},
		"focus_progress":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks focus progress example:\n focus_progress = { focus = id progress > 0.5 }"
		},
		"is_puppet":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Checks if the country is puppet of any other country"
		},
		"is_puppet_of":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if the country is puppet of specified country"
		},
		"ships_in_state_ports":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks for amount of ships in specified state's ports. \nships_in_state_ports = { \n  type = ship_category \n  state = state_id (or scopped variable) \n  size = 42 \n}"
		},
		"is_major":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country is a major"
		},
		"is_on_continent":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"is state located on continent"
		},
		"is_amphibious_invasion":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if combat is at night"
		},
		"strength_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compares the estimated army strength between the scope country and the one set with 'tag'"
		},
		"has_max_planning":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if side has maximal planning bonus"
		},
		"has_civil_war":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if participant in civil war as revolter or target"
		},
		"less_combat_width_than_opponent":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if side has more combat width than their opponent"
		},
		"is_fighting_air_units":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if side is fighting air units"
		},
		"has_carrier_airwings_on_mission":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if side has a career with air wings on a mission"
		},
		"has_flanked_opponent":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if side has flanked their opponent"
		},
		"any_claim":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if there is a claim between a country and all others"
		},
		"has_volunteers_amount_from":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compares number of volunteers from the country. Example: has_volunteers_amount_from = { tag = ITA count > 1 }"
		},
		"num_of_controlled_states":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of controlled stats"
		},
		"original_tag":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"original tag is ( for civil wars checks )"
		},
		"has_added_tension_amount":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Compare if the country has added above or below the specified ammount of tension"
		},
		"has_manpower_for_recruit_change_to":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if manpower is enough to switch recruitment laws not to be negative"
		},
		"ai_liberate_desire":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check what liberation desire the country has towards a specified country"
		},
		"distance_to":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check distance between two states"
		},
		"can_research":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country can research technology"
		},
		"has_annex_war_goal":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks a country has annex war goal on another country"
		},
		"hardness":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check lowest/highest hardness level on combatant"
		},
		"has_template_containing_unit":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country has a division template that contains a specific unit"
		},
		"is_in_home_area":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"Checks if the first province in the state is connected to the capital of its owner"
		},
		"state_population":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"check the population in the state"
		},
		"ai_irrationality":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check the ai irrationality value"
		},
		"has_war_together_with":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Are the countries fighting on the same side of a war"
		},
		"has_capitulated":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks if the country has capitulated"
		},
		"has_army_manpower":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks for amount of manpower of selected type, additionally of a specified type"
		},
		"is_owned_and_controlled_by":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if state is owned by"
		},
		"is_tutorial":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"check if the tutorial is active"
		},
		"is_historical_focus_on":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"check if the historical focus is active"
		},
		"original_research_slots":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check number of research slots at start of game"
		},
		"has_wargoal_against":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if country has a wargoal against the target.\nExample 1:\nENG = { has_wargoal_against = GER }\nExample 2:\nENG = {\n  has_wargoal_against = {\n    target = GER\n    type = take_state  # (optional: if not specified any wargoal will do)\n  }\n}"
		},
		"is_justifying_wargoal_against":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if country is justifying a wargoal against the target. \nExample: ENG = { is_justifying_wargoal_against = GER }"
		},
		"is_owner_neighbor_of":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if neighbor ( owned territory ) with specified country"
		},
		"ai_wants_divisions":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Will compare towards the amount of divisions an ai wants to have."
		},
		"num_owned_neighbour_states":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if a country owns the amount of states neighbouring the scoped state"
		},
		"is_island_state":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"\"return true if the state is composed exclusively of one-province-islands.\nMore precisly, all provinces in the state have no land neighbor.\nOr if they do they are connected by a strait.\n(cf. is_one_state_island for checking if the state itself is an island)\nex: 145 = {\n\tis_island_state = yes\n\tis_island_state = no\n}\""
		},
		"has_elections":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Checks the country's politics on allowing elections. has_elections = yes"
		},
		"alliance_strength_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Compares the estimated army strength between the scope country, his allies and his enemies."
		},
		"civilwar_target":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"civilwar target is ( for civil wars checks )"
		},
		"is_in_peace_conference":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if the country is currently in a peaceconference"
		},
		"has_unit_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country has unit leader with specified ID. Don't localize this. Tooltip only for debug."
		},
		"any_home_area_neighbor_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if any neighbor country in the home area meets the trigger. tooltip=key can be defined to override title"
		},
		"any_other_country":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any other country meets the trigger. Excludes current country. tooltip=key can be defined to override title"
		},
		"all_other_country":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if all other countries meets the trigger. Excludes current country. tooltip=key can be defined to override title"
		},
		"has_non_aggression_pact_with":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check if country has non aggression pact with the specified country"
		},
		"num_faction_members":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compares the number of members in the faction for the current country. \n Example: num_faction_members > 10"
		},
		"enemies_strength_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compares the estimated army strength between the scope country and all its enemies"
		},
		"has_custom_difficulty_setting":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Returns true if the game has the specified custom difficulty on: \nExample: has_custom_difficulty_setting = TheAxisIndustry"
		},
		"has_any_custom_difficulty_setting":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Returns true if the game has any custom difficulty on"
		},
		"has_country_custom_difficulty_setting":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Returns true if the game has any custom difficulty on the scope nation"
		},
		"is_researching_technology":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if the country is currently researching a specific technology.\nExample: is_researching_technology = mechanised_infantry"
		},
		"is_in_tech_sharing_group":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if country is member specified technology sharing group.\nExample: is_in_technology_sharing_group = commonwealth_research"
		},
		"has_autonomy_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country currently has an autonomy state, example:\nhas_autonomy_state = puppet"
		},
		"compare_autonomy_progress_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if autonomy progress ratio is higher than value, example:\ncompare_autonomy_progress_ratio > 0.5"
		},
		"compare_autonomy_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if autonomy state is higher than other one, example:\ncompare_autonomy_state > puppet"
		},
		"has_cosmetic_tag":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if country has specific cosmetic tag set.\nExample: INS = { has_cosmetic_tag = INS1 }"
		},
		"num_subjects":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check the number of subjects of nation"
		},
		"num_tech_sharing_groups":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks how many groups a nation is a member of"
		},
		"has_template":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Check if country has a division template of specific name"
		},
		"has_state_category":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"Check if state has a specific state category"
		},
		"has_cavalry_ratio":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"\"Check that ratio of cavalry battalions in the composition of a side of combating troops are over a certain level.\nFor example:\nhas_cavalry_ratio > 0.5\""
		},
		"num_occupied_states":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check the number of states occupied by nation"
		},
		"has_damaged_buildings":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check for damaged buildings of nation"
		},
		"has_resources_amount":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"checks for amount of resources in state\nExample:\nhas_resources_amount = {\n\tresource = chromium\n\tamount > 10\n\tstate = 31 (optional - can be used in state scope instead)\n\tdelivered = no # (optional, default: no) check the actual delivered amount from the state to its controller, with all modifiers applied"
		},
		"has_tech_bonus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"checks if the country has a bonus for the specified technology or category\nExample:\nhas_tech_bonus = {\n\ttechnology =  <tech>\n\tcategory = <tech cat>\n\t}"
		},
		"has_template_majority_unit":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country has a division template that is majority of specific unit"
		},
		"min_planning":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if side has maximal planning bonus"
		},
		"has_country_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country has leader with specified ID. Don't localize this. Tooltip only for debug.\nhas_country_leader = {\n\truling_only = yes/no (default = yes)\n\tcharacter = <string> # recommended criteria\n\tname = <string> # alternative criteria\n\tid = <ID> # alternative criteria\n}"
		},
		"has_army_experience":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Compares current country's army experience with right side value.\n has_army_experience < <value>"
		},
		"has_air_experience":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Compares current country's air experience with right side value.\n has_air_experience < <value>"
		},
		"has_navy_experience":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Compares current country's navy experience with right side value.\n has_navy_experience < <value>"
		},
		"has_full_control_of_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "CAPITAL"],
			"description":	"check controller for state(s)"
		},
		"num_divisions":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Will compare towards the amount of divisions a country has control over, if strength matters use has_army_size."
		},
		"count_triggers":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Returns true if the specified number of sub-triggers return true\ncount_triggers = { amount = 2 <trigger> <trigger> <trigger> }"
		},
		"is_target_of_coup":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"is_target_of_coup = yes - Returns true if current country is being targeted by a coup from any country."
		},
		"is_staging_coup":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"is_staging_coup = yes - Returns true if current country is staging a coup in another any country."
		},
		"has_focus_tree":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Does current country have the specified focus tree."
		},
		"has_template_ai_majority_unit":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country has a division template that is majority of specific unit using AI's priorities rather than visual"
		},
		"has_any_license":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Country has any active licenses\nExample: has_any_license = yes"
		},
		"has_license":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Country has specific active license\nExample: has_license = {\n\tfrom = TAG # has license from this country, optional\n\t #if archetype is specified equipment should not be specified\n\tarchetype = light_tank_equipment #any armor license\n\tequipment = { # classical equipment reference\n\t\ttype = light_tank_equipment_2\n\t\tversion = 0\n\t}\n}"
		},
		"is_licensing_any_to":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Current country is licensing something to target country\nExample: is_licensing_any_to = ENG"
		},
		"is_licensing_to":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Country is licensing specific equipment to target. License is active\nExample: is_licensing_to = {\n\ttarget = TAG # licensing to this country\n\t #if archetype is specified equipment should not be specified\n\tarchetype = light_tank_equipment #any armor license\n\tequipment = { # classical equipment reference\n\t\ttype = light_tank_equipment_2\n\t\tversion = 0\n\t}\n}"
		},
		"ai_has_role_template":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if the ai controlled country has any template for a specific role"
		},
		"ai_has_role_division":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if the ai controlled country has any fielded divisions for a specific role"
		},
		"has_relation_modifier":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Country has specified relation modifier when dealing with _target_ county\nExample: has_relation_modifier = {\n\ttarget = TAG # has license from this country, optional\n\tmodifier = static_modifier_here\n\t}\n}"
		},
		"any_province_building_level":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"In the current state, checks if any province within the specified limit has a building of the specified level.\nExample:\nany_province_building_level = {\n  province = {\n    id = 421  # Only check specific provinces instead of all in state, can specify multiple provinces on multiple lines.\n    all_provinces = yes  # default: no. Mutually exclusive with 'id = xxx']\n    limit_to_border = yes  # default: no. Only border provinces.\n    limit_to_coastal = yes  # default: no. Only coastal provinces.\n    limit_to_victory_point = yes  # default: no. Only provinces with > 0 victory points.\n    limit_to_naval_base = yes  # default: no. Only provinces with a naval base.\n  }\n  building = bunker  # Building type.\n  level < 3  # Building level to check.\n}"
		},
		"estimated_intel_max_armor":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compares estimated max armor based on intel. Example: estimated_intel_max_armor = { tag = ITA value > 1 }"
		},
		"estimated_intel_max_piercing":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compares estimated max armor based on intel. Example: estimated_intel_max_piercing = { tag = ITA value > 1 }"
		},
		"amount_research_slots":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check number of research current research slots \n amount_research_slots > 2"
		},
		"manpower_per_military_factory":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Number of available manpower per factory the country has. Excluding dockyards.\nmanpower_per_military_factory < 1000"
		},
		"amount_taken_ideas":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"has current country picked specified amount of ideas. Category and slots is optional.\nExcludes national_spirit, hidden, law = yes\namount_taken_ideas = {\n\tamount < <int> (mandatory)\n\tcategories = { military_staff } (optional)\n\tslots = { army_chief political_advisor } (optional)\n}"
		},
		"has_carrier_airwings_in_own_combat":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"Check if carrier has airplanes that are part of the current combat"
		},
		"naval_strength_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compares the estimated navy strength between the scope country and the one set with 'tag' \nnaval_strength_ratio = { \n  tag = GER \n  ratio > 0.5 \n}"
		},
		"enemies_naval_strength_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compares the estimated navy strength between the scope country and all its enemies"
		},
		"alliance_naval_strength_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Compares the estimated naval strength between the scope country, his allies and his enemies."
		},
		"has_stability":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check value of stability 0-1: Example has_stability < 0.6"
		},
		"has_war_support":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check value of war_support 0-1: Example has_war_support < 0.6"
		},
		"all_unit_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Checks if all Unit Leaders of the Country in scope match the triggers.\ntooltip=key can be defined to override title.\nex: GER = {\n  all_unit_leader = {\n\ttooltip = my_loc_key # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... character scope triggers ...\n  }\n}\""
		},
		"any_unit_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Checks if at least one Unit Leader of the Country in scope matches the triggers.\ntooltip=key can be defined to override title.\nex: GER = {\n  any_unit_leader = {\n\ttooltip = my_loc_key # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... character scope triggers ...\n  }\n}\""
		},
		"all_army_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Checks if All Army Leader of the Country in scope match the triggers.\ntooltip=key can be defined to override title.\nex: GER = {\n  all_army_leader = {\n\ttooltip = my_loc_key # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... character scope triggers ...\n  }\n}\""
		},
		"any_army_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Checks if at least one Army Leader of the Country in scope matches the triggers.\ntooltip=key can be defined to override title.\nex: GER = {\n  any_army_leader = {\n\ttooltip = my_loc_key # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... character scope triggers ...\n  }\n}\""
		},
		"all_navy_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Checks if all Navy Leaders of the Country in scope match the triggers.\ntooltip=key can be defined to override title.\nex: GER = {\n  all_navy_leader = {\n\ttooltip = my_loc_key # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... character scope triggers ...\n  }\n}\""
		},
		"any_navy_leader":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Checks if at least one Navy Leader of the Country in scope matches the triggers.\ntooltip=key can be defined to override title.\nex: GER = {\n  any_navy_leader = {\n\ttooltip = my_loc_key # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... character scope triggers ...\n  }\n}\""
		},
		"is_assigned":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_assigned = yes/no - Checks if the current unit leader is assigned to command an army/navy"
		},
		"num_units":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Check number of units commanded by the unit leader \n num_units > 2"
		},
		"is_field_marshal":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_field_marshal = yes/no - Checks if the current unit leader is a field marshall"
		},
		"has_unit_leader_flag":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["any"],
			"description":	"This trigger is deprecated in favor of has_character_flag (which does the same)has a character flag been setCheck flag val date set and days since set.\nExample: has_unit_leader_flag = test_flag\nhas_unit_leader_flag = { \n\tflag = <name> (mandatory)\n\tvalue < <int> (optional)\n\tdate > <date> (optional)\n\tdays > <int> (optional)\n}"
		},
		"has_decision":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country has active selected decision"
		},
		"command_power":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if available command power is more or less that specified value \n command_power > 1.5"
		},
		"command_power_daily":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if daily command power increase is more or less that specified value \n command_power_daily > 1.5"
		},
		"has_completed_custom_achievement":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"\"Return true if the input achievement is found in currently loaded mods, and if this achievement has been completed (either in current game or in a previous one)\n\nExample:\nhas_completed_custom_achievement = {\n\tmod = my_mod_unique_id # set in common/achievements files\n\tachievement = my_achievement_token\n}\""
		},
		"has_advisor_role":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"has_advisor_role = 'character_slot_name' - Checks if the character in scope has an advisor role for the given slot"
		},
		"advisor_can_be_fired":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"\"Return true if the character has an advisor role and they can be fired.\nWarning: will return false if the character has no advisor role or it does not match the input slot. You should use has_advisor_role trigger first to really test the can_be_fired flag.\n\nExamples:\nsome_character_scope = {\n  advisor_can_be_fired = {\n    slot = political_advisor # mandatory if the character has several advisor role\n  }\n}\n\nsome_character_scope = {\n  advisor_can_be_fired = yes # or no\n}\""
		},
		"is_hired_as_advisor":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_hired_as_advisor = yes/no - Checks if the current character has at least one advisor role for which they are hired"
		},
		"all_military_industrial_organization":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Checks if all Military Industrial Organisations of the Country in scope match the triggers.\ntooltip=key can be defined to override title.\nex: GER = {\n  any_military_industrial_organization = {\n\ttooltip = my_loc_key # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... MIO scope triggers ...\n  }\n}\""
		},
		"is_fully_controlled_by":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if state is fully controlled by specified tag"
		},
		"has_military_industrial_organization":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Checks if the Country in scope has a  Military Industrial Organisation matching the input token.\nCan use variable as input.\nex: \nGER = { \n  has_military_industrial_organization = infantry_mio_token\n  has_military_industrial_organization = var:my_mio_var\n}\""
		},
		"any_military_industrial_organization":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Checks if at least one Military Industrial Organisation of the Country in scope matches the triggers.\ntooltip=key can be defined to override title.\nex: GER = {\n  any_military_industrial_organization = {\n\ttooltip = my_loc_key # Optional\n\tinclude_invisible = yes # Optional - default = no\n    ... MIO scope triggers ...\n  }\n}\""
		},
		"has_ability":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["any"],
			"description":	"does unit leader have the abilityCheck if a unit leader has the ability.\nExample: has_ability = force_attack"
		},
		"has_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Checks if a variable exists in a scope"
		},
		"has_id":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"check unit leader has specified ID. Don't localize this. Tooltip only for debug."
		},
		"can_select_trait":	{
			"supported_scope":	["CHARACTER", "COMBATANT"],
			"supported_target":	["none"],
			"description":	"check if leader can select a trait"
		},
		"has_captured_operative":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if a country has a captured an operative ( supports scoped variables )\nhas_captured_operative = GER/yes/no\n"
		},
		"add_to_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Adds a value or a variable to a temporary variable\nExample: add_to_temp_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger\n}"
		},
		"subtract_from_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Subtracts a value or a variable to a temporary variable\nExample: subtract_from_temp_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger\n}"
		},
		"multiply_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Multiplies a temporary variable by a value or another variable\nExample: multiply_temp_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger\n}"
		},
		"divide_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Divies a temporary variable by a value or another variable\nExample: divide_temp_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger\n}"
		},
		"set_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Sets a temporary variable to a value or another variable\nExample: set_temp_variable = {\nvar = num_dogs\n\tvalue = 42\n\ttooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger\n}"
		},
		"clamp_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"clamps a temp variable between two values/variables"
		},
		"num_of_civilian_factories_available_for_projects":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of civilian factories available for a new project to use"
		},
		"has_event_target":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"checks if current scope or global scope has the specified event target saved"
		},
		"political_power_growth":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check the value of political power daily growth.Exacmple: political_power_growth > 0"
		},
		"has_border_war":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["any"],
			"description":	"Checks if a there is any border wars for country/state"
		},
		"is_border_war":	{
			"supported_scope":	["CHARACTER", "COMBATANT"],
			"supported_target":	["any"],
			"description":	"Checks if a the combatant or leader has a border war"
		},
		"has_border_war_between":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Checks if a there is a border war between two states"
		},
		"has_border_war_with":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["any"],
			"description":	"Checks if a there is a border against a state/country"
		},
		"average_stats":	{
			"supported_scope":	["CHARACTER", "COMBATANT"],
			"supported_target":	["none"],
			"description":	"Compares the average stats for a unit leader.\nExample: average_stats > 10"
		},
		"attack_skill_level":	{
			"supported_scope":	["CHARACTER", "COMBATANT"],
			"supported_target":	["none"],
			"description":	"Compares attack skill level of a unit leader.\nExample: attack_skill_level > 5"
		},
		"defense_skill_level":	{
			"supported_scope":	["CHARACTER", "COMBATANT"],
			"supported_target":	["none"],
			"description":	"Compares defense skill level of a unit leader.\nExample: defense_skill_level > 5"
		},
		"logistics_skill_level":	{
			"supported_scope":	["CHARACTER", "COMBATANT"],
			"supported_target":	["none"],
			"description":	"Compares logistics skill level of a unit leader.\nExample: logistics_skill_level > 5"
		},
		"planning_skill_level":	{
			"supported_scope":	["CHARACTER", "COMBATANT"],
			"supported_target":	["none"],
			"description":	"Compares planning skill level of a unit leader.\nExample: planning_skill_level > 5"
		},
		"is_leading_army_group":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_leading_army_group = yes/no - Checks if the current unit leader is leading an army group (not single army)"
		},
		"is_leading_army":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_leading_army = yes/no - Checks if the current unit leader is leading a single army (not army group)"
		},
		"print_variables":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"prints all variables in scope and temp variables to a file\nExample: print_variables = {\nfile = log_file\ntext = header_text\nappend = yes\nprint_global = yes\nvar_list = { a b c } #optional\n}"
		},
		"num_planes_stationed_in_regions":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Will compare the number of planes which have bases in the specified regions. Supports < > =\nExample: num_planes_stationed_in_regions = {\nvalue < 100\nregions = { 18 47 }\n}"
		},
		"has_active_mission":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country has an active mission with specified ID. has_active_mission = my_test_mission"
		},
		"pc_turn":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Checks turn number in PC.\nExample:\npc_turn > 20"
		},
		"has_attache":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Has attaché from any other country"
		},
		"has_attache_from":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Has attaché from specified country"
		},
		"amount_manpower_in_deployment_queue":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks for amount manpower currently in deploymentview. amount_manpower_in_training > 10"
		},
		"army_manpower_in_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks for amount manpower currently the target state with option to specify a type.\nExample:\narmy_manpower_in_state = {\n\tstate = <id> (variables supported)\n\tamount < <int> (variables supported)\n\ttype > <equipment_type> (armor, infantry, etc.)"
		},
		"is_exiled_leader":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Checks if scope leader is from an exiled government. is_exiled_leader = yes"
		},
		"is_exiled_in":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if scope country is a government in exile in target tag. is_exiled_in = ENG"
		},
		"is_hosting_exile":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if scope country is hosting target tag as an exile. is_hosting_exile = FRA"
		},
		"is_exiled_leader_from":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if scope leader is from specified exiled government. is_exiled_leader_from = FRA"
		},
		"is_exile_host":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Checks if scope country is hosting an exile. is_exile_host = yes"
		},
		"is_government_in_exile":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Checks if scope country an exiled government. is_government_in_exile = yes"
		},
		"divisions_in_border_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks for amount of divisions in specified state owned by current country."
		},
		"stockpile_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Compares the ratio of equipment archetype in stockpile vs used. a value of 2 means we have double in stockpile of what is fielded or in training."
		},
		"state_strategic_value":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"Checks for state strategic value"
		},
		"state_and_terrain_strategic_value":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"Checks for state strategic value"
		},
		"round_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Rounds a temporary variable\nExample: round_temp_variable = num_dogs"
		},
		"pc_is_forced_government_to":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if country has had their government force-changed to a certain ideology in the peace conference.\nExample:\nCZE = { pc_is_forced_government_to = communism }"
		},
		"pc_is_state_outside_influence_for_winner":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check if state is outside valid influence range for winner TAG in the current peace conference\nExample:\npc_is_state_outside_influence_for_winner = SOV/ROOT/ROOT.FROM"
		},
		"pc_total_score":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks country's total peace conference score. Only usable if the country is on the winning side.\nExample:\nCZE = { pc_total_score > 400 }"
		},
		"pc_current_score":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks country's total peace conference score. Only usable if the country is on the winning side.\nExample:\nCZE = { pc_current_score > 400 }"
		},
		"pc_is_winner":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if country is a winner in the peace conference.\nExample:\nENG = { pc_is_winner = yes }"
		},
		"pc_is_loser":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if country is a loser in the peace conference.\nExample:\nENG = { pc_is_loser = yes }"
		},
		"pc_is_liberated":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if country has been liberated in the peace conference.\nExample:\nCZE = { pc_is_liberated = yes }"
		},
		"pc_is_puppeted":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if country is a puppet, or has been released as a puppet in the peace conference.\nExample:\nCZE = { pc_is_puppeted = yes }"
		},
		"pc_is_on_winning_side":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if country is on the winning side in the peace conference.\nExample:\nCZE = { pc_is_on_winning_side = yes }"
		},
		"has_subject":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if the country has for subject the given country"
		},
		"has_game_rule":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Checks if a game rule is set to a particular option.\nExample:\nhas_game_rule = {\n\trule = GER_can_remilitarize_rhineland\n\toption = yes\n}"
		},
		"game_rules_allow_achievements":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Returns true if all of the active game rule options allow achievements."
		},
		"is_in_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Checks if an element is in array\nExample: is_in_array = {\n\tarray = array_name\n\tvalue = 42\n}\n#shorter usage: is_in_array = { array_name = 42 }"
		},
		"add_to_temp_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Adds an element to a temporary array\nExample: add_to_temp_array = {\n\tarray = array_name\n\tvalue = 42 #optional, if not defined adds scope\n\tindex = 3 #optional, default is end. otherwise elements are shifted\n}\n#shorter usage: add_to_temp_array = { array_name = 42 }"
		},
		"remove_from_temp_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Removes an element from a temporary array using value or index\nExample: remove_from_temp_array = {\n\tarray = array_name\n\tvalue = 42 #optional, use index or this. if neither it removes last element\n\tindex = 3 #optional, use value or this. if neither it removes last element\n}\n#shorter usage: remove_from_temp_array = { array_name = 42 }"
		},
		"clear_temp_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Clears the contents of a temporary array\nExample: clear_temp_array = array_name"
		},
		"resize_temp_array":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Resizes a temp array\nExample: resize_temp_array = {\n\tarray = array_name\n\tvalue = 42 #optional, if not specified and array grows the new elements are set to this (default 0)\n\tsize = 3 #if higher than old size, new elements are added to end. otherwise last elements are removed to match to new size\n}\n#shorter usage: resize_temp_array = { array_name = 3 }"
		},
		"any_of":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs a loop on an array and check a trigger for each value, if any true returns true. otherwise returns false\nExample: any_of = {\n\tarray = array_name\n\tvalue = value_name #optional (default 'value') current value in array will be stored in this temp variable\n\tindex = index_name #optional (default 'index') current index in array will be stored in this temp variable\n #trigger 1\n #trigger 2 ...\n}"
		},
		"all_of":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs a loop on an array and check a trigger for each value, if any false returns false. otherwise returns true\nExample: all_of = {\n\tarray = array_name\n\tvalue = value_name #optional (default 'v') current value in array will be stored in this temp variable\n\tindex = index_name #optional (default 'i') current index in array will be stored in this temp variable\n #trigger 1\n #trigger 2 ...\n}"
		},
		"has_fuel":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check amount of fuel\nexample:\nhas_fuel > 500"
		},
		"any_of_scopes":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs a loop on an array and check a trigger for each scope in it, if any true returns true. otherwise returns false\nExample: any_of_scopes = {\n\tarray = array_name\n\ttooltip = loc #if defined the trigger will output tooltip using this title. loc_NOT will be used if trigger is inside a NOT\n #trigger 1\n #trigger 2 ...\n}"
		},
		"all_of_scopes":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs a loop on an array and check a trigger for each scope in it, if any false returns false. otherwise returns true\nExample: all_of_scopes = {\n\tarray = array_name\n\ttooltip = loc #if defined the trigger will output tooltip using this title. loc_NOT will be used if trigger is inside a NOT\n #trigger 1\n #trigger 2 ...\n}"
		},
		"has_country_leader_with_trait":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if current country leader has specified trait.\nhas_country_leader_with_trait = big_fat_idiot"
		},
		"has_legitimacy":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check scope country legitimacy 0-100: Example has_legitimacy < 60"
		},
		"has_rule":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Checks if a rule set for a country.\nExample: has_rule = can_puppet"
		},
		"non_damaged_building_level":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"check if a state has enough non damaged buildings\n\n\nExample:\nnon_damaged_building_level = {\n\tbuilding = arms_factory\n\tlevel = 5\n}"
		},
		"state_population_k":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"check the population in the state in thousands (use to avoid variable overflows)"
		},
		"casualties_k":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Check the amount of casualties in thousands a country has suffered in all of it's wars"
		},
		"meta_trigger":	{
			"supported_scope":	["STATE", "COUNTRY", "CHARACTER", "COMBATANT", "ACE", "STRATEGIC_REGION", "OPERATION", "INDUSTRIAL_ORG", "PURCHASE_CONTRACT", "RAID_INSTANCE", "SPECIAL_PROJECT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"meta triggers can be used for building triggers from strings and running them. following example will test if Germany has 42 pp:\nmeta_trigger = {\n    text = {\n        [COUNTRY] = {\n            political_power > [POW]\n        }\n    }\n    COUNTRY = \"GER\"\n    POW = 42\n    debug = no #set to yes if you want to see what game actually executes\n}\n"
		},
		"has_dynamic_modifier":	{
			"supported_scope":	["STATE", "COUNTRY", "CHARACTER"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if scope has a dynamic modifier.\nhas_dynamic_modifier = {\n    modifier = dynamic_modifier_name\n    scope = GER #optional, if the original modifier has been targeted\n}\n"
		},
		"find_lowest_in_array":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs a loop on for each element of an array, finds the lowest value and stores result in temp variables\nExample: find_lowest_in_array = {\n\tarray = array_name\n\tvalue = value_name #optional (default 'v') lowest value in array will be stored in this temp variable\n\tindex = index_name #optional (default 'i') index of lowest value in array will be stored in this temp variable\n}"
		},
		"find_highest_in_array":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Runs a loop on for each element of an array, finds the highest value and stores result in temp variables\nExample: find_highest_in_array = {\n\tarray = array_name\n\tvalue = value_name #optional (default 'v') highest value in array will be stored in this temp variable\n\tindex = index_name #optional (default 'i') index of highest value in array will be stored in this temp variable\n}"
		},
		"has_mines":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if a region has amount of mines.\nhas_mines = {\n    region = region_id\n    amount = amount_of_mines\n}\n"
		},
		"naval_strength_comparison":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compares navies of two sides.\nnaval_strength_comparison = {\n\tother = GER # by default compares to the from scope\n  tooltip = 'key' #tooltip is 'navy strength' by default, the key can be overridden if wanted \n\tratio > 1.5   # default is 1\n\tsub_unit_def_weights = { # if not specified, it will weigh all ships as 1. otherwise only specified sub unit types will be counted\n\t\tcarrier = 1\n\t\tbattleship = 2\n\t}\n}\n"
		},
		"fuel_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compares the fuel ratio to a variable.\nExample: fuel_ratio > 0.5"
		},
		"days_since_last_strategic_bombing":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks the days since last strategic bombing.\ndays_since_last_strategic_bombing < 10\n"
		},
		"days_since_capitulated":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks the number of days since the country last capitulated, even if it is no longer capitulated.\n\tIf it has not ever capitulated, the value is extremely large.\n\tIt is recommended to combine this with has_capitulated = yes when you specifically want to ignore non-active capitulations.\nExamples:\n\tHOL = { has_capitulated = yes days_since_capitulated > 60 } # The Netherlands has been capitulated for more than two months\n\tFRA = { has_capitulated = yes days_since_capitulated < 21 } # France has capitulated sometime within the past three weeks\n\tGER = { OR = { has_capitulated = no days_since_capitulated > 14 } } # Germany is not both actively and recently capitulated\n"
		},
		"is_power_balance_in_range":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"checks if current value power balance is within a certain range\n\nExample:\nis_power_balance_in_range = {\n\tid = power_balance_id\n\trange = power_balance_range_id\n}"
		},
		"has_power_balance":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks if power balance is active for country\n\nExample:\nhas_power_balance = {\n\tid = power_balance_id\n}"
		},
		"has_any_power_balance":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks if country has any active power balance\n\nExample:\nhas_any_power_balance = yes/no"
		},
		"power_balance_value":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"compares current value of a power balance\n\nExample:\npower_balance_value = {\n\tid = power_balance_id\n\tvalue > 0.5 # supported operators are: >, < and =\n}"
		},
		"power_balance_daily_change":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"compares current total daily change of a power balance\n\nExample:\npower_balance_daily_change = {\n\tid = power_balance_id\n\tvalue > 0.5 # supported operators are: >, < and =\n}"
		},
		"is_power_balance_side_active":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"checks if specified side is currently active\n\nExample:\nis_power_balance_side_active = {\n\tid = power_balance_id\n\tside = side_id\n}"
		},
		"has_power_balance_modifier":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"checks if the power balance has a modifier added to it\n\nExample:\nhas_power_balance_modifier = {\n\tid = power_balance_id\n\tmodifier = static_modifier_id\n}"
		},
		"mine_threat":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"A trigger to check how dangerous enemy mines are for a country. Controlled by NAVAL_MINE_DANGER defines. Returns a value between 0 and 1. Example mine_threat > 0.5 "
		},
		"convoy_threat":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"A trigger to check convoy threat for a country. Controlled by NAVAL_CONVOY_DANGER defines. Returns a value between 0 and 1. Example convoy_threat > 0.5 "
		},
		"casualties_inflicted_by":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks the casualties infliced by the speficied country to the scopped country.\nE.g. true if Germany has been inflicted more than 200k casualties by Poland:\nGER = {\n  casualties_inflicted_by = {\n    opponent = POL\n    thousands > 200\n  }\n}"
		},
		"has_mined":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks the mines planted by the country of the parent scope on the coastline of the target countryE.g. true if Germany has more than 1000 mines around Poland coast:\nGER = {\n  has_mined = {\n    target = POL\n    value > 1000\n  }\n}"
		},
		"received_expeditionary_forces":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks that the country in scope has received the specified amount of expeditionary forces from the specified country\nE.g. true if Germany is commaning more than 100 expeditionary forces from Poland:\nGER = {\n  received_expeditionary_forces = {\n    sender = POL\n    value > 100\n  }\n}"
		},
		"is_fighting_in_weather":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks the weather on a combat\nExample:\n# true if weather is artic water\nis_fighting_in_weather = artic_water\n# true if weather is either artic_water or snow\nis_fighting_in_weather = { artic_water snow }\n"
		},
		"controls_province":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check controller for province"
		},
		"compliance":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"Compares the current compliance level of a state to a value. Example: compliance > 50 "
		},
		"compliance_speed":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"Compares the current compliance speed of a state to a value. Example: compliance_speed > 50 "
		},
		"resistance_speed":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"Compares the current resistance speed of a state to a value. Example: resistance_speed > 50 "
		},
		"occupied_country_tag":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"compares occupied country that creates resistance to a tag. Example: occupied_country_tag = ITA"
		},
		"resistance_target":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"Compares the target resistance level of a state to a value. Example: resistance_target > 50 "
		},
		"has_resistance":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"returns true if state has a resistance"
		},
		"has_active_resistance":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"returns true if state has an active resistance (above zero)"
		},
		"has_occupation_modifier":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"compares occupied country that creates resistance to a tag. Example: has_occupation_modifier = modifier_name"
		},
		"has_core_occupation_modifier":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"has an occupation modifier that applies to average resistance/compliance\nExample: \nhas_core_occupation_modifier = { \n occupied_country_tag = ITA \n modifier = token \n}"
		},
		"is_debug":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"returns true if game is in debug mode (launched with -debug argument)"
		},
		"core_compliance":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Compares the core (average of all occupied states) compliance value of occupied_country_tag that is occuppied by the country in current scope.\nExample: \ncore_compliance = { \n occupied_country_tag = ITA \n value > 35 \n}"
		},
		"core_resistance":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Compares the core (average of all occupied states) resistance value of occupied_country_tag that is occuppied by the country in current scope.\nExample:\ncore_resistance = { \n occupied_country_tag = ITA \n value > 35 \n}"
		},
		"pc_is_state_claimed_and_taken_by":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check if state is claimed with a take_states action in conference for TAG\nExample:\npc_is_state_claimed_and_taken_by = SOV/ROOT/ROOT.FROM"
		},
		"power_balance_weekly_change":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"compares current total weekly change of a power balance\n\nExample:\npower_balance_weekly_change = {\n\tid = power_balance_id\n\tvalue > 0.5 # supported operators are: >, < and =\n}"
		},
		"career_profile_check_value":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Compares a career profile value to a number"
		},
		"career_profile_check_ratio":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Compares the ratio (first/second) of two career profile values to a number"
		},
		"career_profile_set_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Sets a temporary variable to a value or another variable\nExample: career_profile_set_temp_variable = {\nvar = num_dogs\n\tvalue = num_dogs_in_career_profile\n}"
		},
		"num_of_career_profile_points":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"check amount of gained career points"
		},
		"career_profile_check_points":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Compares a career points value to a number"
		},
		"career_profile_check_medal":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Checks if the required medal is achieved and collected"
		},
		"career_profile_check_ribbon":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Checks if the required ribbon is achieved and collected"
		},
		"career_profile_has_player_flag":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Checks if the flag is set for the local player"
		},
		"get_supply_vehicles_temp":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"sets a temp variable to the number of supply vehicles in stockpile or that are needed. example \nget_supply_vehicles_temp = { \n\tvar = num_vehicles #variable to set \n\ttype = truck #can be truck or train \n\tneed = yes #default no. If yes, gets the number of needed vehicles \n} \n"
		},
		"career_profile_set_temp_playthrough_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"Sets a temporary variable to a value or another variable\nExample: career_profile_set_temp_playthrough_variable = {\nvar = num_dogs\n\tvalue = num_dogs_in_career_profile\n}"
		},
		"career_profile_check_playthrough_value":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Compares a playthrough value to a number"
		},
		"career_profile_check_playthrough_ratio":	{
			"supported_scope":	["any"],
			"supported_target":	["any"],
			"description":	"Compares the ratio (first/second) of two playthrough values to a number"
		},
		"has_mio_size":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Make comparaison on the size of the military industrial organization in the scope.\nCan use < or > to compare the value with either a fixed value or with a variable.\nex:\nvar:my_mio_var = {\n\thas_mio_size > 5\n\thas_mio_size < 2\n\thas_mio_size > var:my_number_var\n}\""
		},
		"has_mio_number_of_completed_traits":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Make comparaison on the number of unlocked traits of the military industrial organization in the scope.\nCan use < or > to compare the value with either a fixed value or from a variable.\nex:\nvar:my_mio_var = {\n\thas_mio_number_of_completed_traits > 5\n\thas_mio_number_of_completed_traits < 2\n\thas_mio_number_of_completed_traits > var:my_number_var\n}\""
		},
		"has_mio_flag":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["any"],
			"description":	"\"Check if flag has been set within the military industrial organization in scope.\nMay checks on the value or date/days since last modified date.\nExamples:\nhas_mio_flag = my_flag\nhas_mio_flag = {\n\tflag = my_flag (mandatory)\n\tvalue < 12 (optional)\n\tdate > 1936.3.25 (optional, compare with the date where the flag was last modified )\n\tdays > 365 (optional, compare with the number of days since the flag was last modified )\n}\""
		},
		"pc_is_state_claimed_by":	{
			"supported_scope":	["STATE"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check if state is claimed in conference by TAG\nExample:\npc_is_state_claimed_by = SOV/ROOT/ROOT.FROM"
		},
		"is_military_industrial_organization":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Checks if the Military Industrial Organisation in scope matches the input token\nex:\nvar:my_mio_var = {\n  is_military_industrial_organization = my_mio_token\n}\""
		},
		"has_mio_trait":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Checks if the Military Industrial Organisation in scope has a trait matching the input token.\nex:\nmio:my_mio = {\n\thas_mio_trait = my_trait_token\n\thas_mio_trait = {\n\t\ttrait = my_trait_token\n\t}\n}\""
		},
		"is_mio_trait_available":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Checks if the Military Industrial Organisation in scope has a trait matching the input token, which is also available.\nex:\nmio:my_mio = {\n\tis_mio_trait_available = my_trait_token\n\tis_mio_trait_available = {\n\t\ttrait = my_trait_token\n\t\tcheck_mio_parent_completed = no # Optional, yes by default\n        check_mio_mutually_exclusive = no # Optional, yes by default\n\t}\n}\""
		},
		"is_mio_trait_completed":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Checks if the Military Industrial Organisation in scope has a trait matching the input token, which is also completed.\nex:\nmio:my_mio = {\n\tis_mio_trait_completed = my_trait_token\n\tis_mio_trait_completed = {\n\t\ttrait = my_trait_token\n\t}\n}\""
		},
		"is_mio_assigned_to_task":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Checks if the Military Industrial Organisation in scope is assigned to at least 1 task.\nex:\nmio:my_mio = {\n\tis_mio_assigned_to_task = yes\n\tis_mio_assigned_to_task = no\n}\""
		},
		"has_mio_policy_active":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Checks if the Military Industrial Organisation in scope has an allowed matching the input token, which is currently attached to the MIO.\nex:\nmio:my_mio = {\n\thas_mio_policy_active = my_policy_token\n}\""
		},
		"has_mio_research_category":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Checks if the Military Industrial Organisation in scope has the input research category.\nex:\nmio:my_mio = {\n\thas_mio_research_category = my_research_category_token\n}\""
		},
		"has_mio_equipment_type":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Checks if the Military Industrial Organisation in scope has the input equipment type.\n(possible values can be found in script_enum_equipment_bonus_type and in common/equipment_groups)\nex:\nmio:my_mio = {\n\thas_mio_equipment_type = my_equipment_type_token\n}\""
		},
		"has_mio_policy":	{
			"supported_scope":	["INDUSTRIAL_ORG"],
			"supported_target":	["none"],
			"description":	"\"Checks if the Military Industrial Organisation in scope has an allowed policy matching the input token.\nex:\nmio:my_mio = {\n\thas_mio_policy = my_policy_token\n}\""
		},
		"is_one_state_island":	{
			"supported_scope":	["STATE"],
			"supported_target":	["any"],
			"description":	"\"return true if the state is a one-state-island.\nMore precisely, all provinces in the state have no land neighbor.\nOr if they do they are connected by a strait or the neighbor is inside the state.\nex: 145 = {\n\tis_one_state_island = yes\n\tis_one_state_island = no\n}\""
		},
		"is_special_project_completed":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Checks if the country in scope has completed the special project in input.\nex:\nSOV = {\n\tis_special_project_completed = sp:my_project\n\tis_special_project_completed = var:my_project_var\n\tis_special_project_completed = PREV # accepts variables and keywords\n}\""
		},
		"is_special_project_being_researched":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"\"Checks if the country in scope is currently researching the special project in input.\nex:\nSOV = {\n\tis_special_project_being_researched = sp:my_project\n\tis_special_project_being_researched = var:my_project_var\n\tis_special_project_being_researched = PREV # accepts variables and keywords\n}\""
		},
		"any_purchase_contract":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Checks if at least one Purchase contract of the Country in scope matches the triggers. \ntooltip=key can be defined to override title.\nex: GER = {\n  any_purchase_contract = {\n\ttooltip = my_loc_key # Optional\n    ... Purchase Contract scope triggers ...\n  }\n}\""
		},
		"all_purchase_contracts":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"\"Checks if all purchase contracts of the Country in scope matches the triggers.\ntooltip=key can be defined to override title.\nex: GER = {\n  all_purchase_contracts = {\n\ttooltip = my_loc_key # Optional\n     ... Purchase Contract scope triggers ...\n  }\n}\""
		},
		"contract_contains_equipment":	{
			"supported_scope":	["PURCHASE_CONTRACT"],
			"supported_target":	["none"],
			"description":	"\"Check if contract contains equipment category, equipment archetype or equipment.\nExample:\n    contract_contains_equipment = infantry_equipment\""
		},
		"deal_completion":	{
			"supported_scope":	["PURCHASE_CONTRACT"],
			"supported_target":	["none"],
			"description":	"Check value of purchase contract completion. Example: deal_completition < 0.6"
		},
		"has_market_access_with":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check if the country has market access with another country. Example: has_market_access_with = GER"
		},
		"has_officer_name":	{
			"supported_scope":	[],
			"supported_target":	["none"],
			"description":	"\"checks if division has an officer with the provided name key.\nExamples:\n\thas_officer_token = FIN_nikke_parmi\n\""
		},
		"has_artillery_ratio":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"\"Check that ratio of atrillery battalions in the composition of a side of combating troops are over a certain level.\nFor example:\nhas_artillery_ratio > 0.1\""
		},
		"has_unit_type":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"\"Check if the combatant has at least one of the provided unit types.\nFor example:\nhas_unit_type = amphibious_mechanized\n\""
		},
		"province_vp":	{
			"supported_scope":	["COMBATANT"],
			"supported_target":	["none"],
			"description":	"\"Check if the victory points of the combatants province is larger or less than the provinded amount.\nFor example:\nprovince_vp > 2\nprovince_vp < 3\""
		},
		"has_shine_effect_on_focus":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"![MD]\nCheck if country has shine effect on focus (either manually achieved or by being worked on).\n\nNote that tooltips are only shown in debug mode.\n\n### Example\n```\nhas_shine_effect_on_focus = GER_prioritize_economic_growth\n```\n"
		},
		"owns_any_state_of":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Check if the country owns any of the states in the list."
		},
		"custom_override_tooltip":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"![MD]\nAn `AND` trigger that has an overriden custom tooltip.\nA positive tooltip can be set with `tooltip` and the tooltip to be used inside a NOT can be set with `not_tooltip`.\nIf no positive tooltip is provided and the root key is a localization key (not a formatter, see [formatted localization](script_concept_documentation.md#formatted_localization)),\nthen a negative tooltip will be generated by appending `_NOT` to the root localization for the positive tooltip.\nBoth tooltip and `not_tooltip` are [bindable localizations](script_concept_documentation.md#bindable_localization).\n\n### Examples\n```\ncustom_override_tooltip = {\n\ttooltip = MY_TOOLTIP # Simple loc key tooltip\n\tnot_tooltip = MY_TOOLTIP_NOT\n\t<other triggers>\n}\n```\n```\ncustom_override_tooltip = {\n\ttooltip = MY_TOOLTIP\n\t# Implicit:\n\t#not_tooltip = MY_TOOLTIP_NOT\n\t<other triggers>\n}\n```\n```\ncustom_override_tooltip = {\n\ttooltip = {\n\t\tlocalization_key = MY_TOOLTIP # Root look key\n\t\tIMPORTANT_QUESTION = { # ID IMPORTANT_QUESTION in MY_TOOLTIP will get value:\n\t\t\tlocalization_key = MEANING_OF_LIFE # Root loc key in IMPORTANT_QUESTION\n\t\t\tANSWER = \"42\" # ID ANSWER in IMPORTANT_QUESTION will get value 42\n\t\t}\n\t\tJUST_AS_IMPORTANT = OR_NOT # ID JUST_AS_IMPORTANT in MY_TOOLTIP will get value OR_NOT\n\t}\n\t# Implicit:\n\t# not_tooltip = {\n\t#\tlocalization_key = MY_TOOLTIP_NOT\n\t#\tIMPORTANT_QUESTION = {\n\t#\t\tlocalization_key = MEANING_OF_LIFE\n\t#\t\tANSWER = \"42\"\n\t#\t}\n\t#\tJUST_AS_IMPORTANT = OR_NOT\n\t#}\n\t<other triggers>\n}\n```\n"
		},
		"has_contested_owner":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"![MD]\nChecks if a state has the specified country as a contested owner.\nThe trigger can be used either from a country or a state scope and accepts the other as parameter.\nThe trigger is localized with a localization environment containing `Country` and `State`.\n\n### Example\nThe following example has the same end result and localization.\n```\n42 = {\n\thas_contested_owner = GER\n}\nGER = {\n\thas_contested_owner = 42\n}\n```\nStandard scope accessors can also be used:\n```\n### Assuming current scope is a state and FROM is a country scope\nhas_contested_owner = FROM\n```\n"
		},
		"longest_war_length":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Check number of months the country has been at war"
		},
		"war_length_with":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Check number of months the country has been at war with X for Y months.\n war_length_with = { tag = X months > Y }"
		},
		"network_strength":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks network strength you have in a country. Examples: \n# country has a network strength greater than 50% over germany\nnetwork_strength = { \n target = GER\n value > 50\n}\n\n# country has a network strength greater than 50% over germany in state 53\nnetwork_strength = { \n target = GER\n state = 53 value > 50\n}\n\n# country has a network strength greater than 50% in state 53, regardless of the target\nnetwork_strength = { \n state = 53\n value > 50\n}\n\n"
		},
		"has_operation_token":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if a country has a specific token against another country\nhas_operation_token = {\n\ttag = GER\n\ttoken = some_token_id\n}"
		},
		"occupation_law":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["any"],
			"description":	"\"Checks the occupation law for an occupied country, occupied state, or the default occupation law of an occupying country.\n\n- If THIS is a country and it's the same as the PREV country, then THIS's default law is checked.\n- If THIS is a country and it's different from the PREV country, then PREV's country law for THIS is checked.\n- If THIS is a state, then the occupier's state law is checked.\n\nExample:\nGER = { occupation_law = autonomous_occupation }\nGER = { POL = { occupation_law = foreign_civilian_oversight } }\n123 = { occupation_law = local_police_force_garrison }\""
		},
		"is_ally_with":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"checks if a country is ally with another country. will check if two countries are same/in same faction/has subject master relation\nExample: is_ally_with = ITA \n"
		},
		"get_highest_scored_country_temp":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"calculates the highest scored country that is defined in a country scorer and sets it to a variable. Example: \nget_highest_scored_country_temp = { \n  scorer = scorer_id \n  var = var_name # variable name that the result will be stored. default is highest_scored_country \n}"
		},
		"get_sorted_scored_countries_temp":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"calculates & sorts all countries in a country scorer and stores them and their scores in temp arrays. Example: \nget_sorted_scored_countries_temp = { \n  scorer = scorer_id # id that is used in country scorer  array = array_name # a name to store sorted countries as a temp array (default to sorted_country_list) \n  scores = array_name # corresponding score temp array for countries stored in array (default to country_list_scores) \n}"
		},
		"decryption_progress":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks decryption ratio against a country. Example: \ndecryption_progress = { \n target = GER\n value > 0.5\n} \n#or decryption_progress@GER as variable\n"
		},
		"any_occupied_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any any occupied meets the trigger. tooltip=key can be defined to override title"
		},
		"all_occupied_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if all occupied countries meets the trigger. tooltip=key can be defined to override title"
		},
		"any_country_with_original_tag":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any country with current scope's original tag meets the trigger. Example:\nany_country_with_original_tag = { \n  original_tag_to_check = ENG # the trigger check all countries that has this original tag \n  # ... triggers to check \n}"
		},
		"all_country_with_original_tag":	{
			"supported_scope":	["any"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if all country with current scope's original tag meets the trigger. Example:\nall_country_with_original_tag = { \n  original_tag_to_check = ENG # the trigger check all countries that has this original tag \n  # ... triggers to check \n}"
		},
		"has_done_agency_upgrade":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"has country done this intelligence agency upgrade (to its highest level)"
		},
		"has_intelligence_agency":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"has country created an Intelligence Agency"
		},
		"is_spymaster":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if country is Spy Master"
		},
		"foreign_manpower":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check the amount of foreign garrison manpower we have"
		},
		"garrison_manpower_need":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check the amount of manpower needed by garrisons"
		},
		"agency_upgrade_number":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks the number of upgrade done in the intelligence agency. \nagency_upgrade_number > 4"
		},
		"is_dynamic_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"returns true if the country is a dynamic country (tag is D01-D50)"
		},
		"operative_leader_mission":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Checks whether the operative is performing the given mission:\noperative_leader_mission = build_intel_network"
		},
		"fighting_army_strength_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compares the total army fighting strength between the scope country and the one set with 'tag'\n\nExample 1:\nfighting_army_strength_ratio = {\n\ttag = TAG\n\tratio > 0.7 # can be '<','>' or '='\n}\n\nExample 2:\nfighting_army_strength_ratio = {\n\ttag = TAG\n\tratio > VARIABLE # can be '<','>' or '='\n}"
		},
		"compare_intel_with":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compare the intel of the scoped country with the specified one:\nGER = {\n  # is true if all predicates are satisfied\n  compare_intel_with = { \n    target = POL\n    civilian_intel > 0.5  # GER has at least 0.5 more civ. intel than POL\n    army_intel = 0  # GER has as much army intel as POL\n    navy_intel < 0  # POL has more navy intel than GER\n    # airforce_intel is not specified and thus ignored in the comparison\n  }\n}\n"
		},
		"all_operative_leader":	{
			"supported_scope":	["COUNTRY", "OPERATION"],
			"supported_target":	["none"],
			"description":	"check if all operatives meets the trigger. tooltip=key can be defined to override title"
		},
		"any_operative_leader":	{
			"supported_scope":	["COUNTRY", "OPERATION"],
			"supported_target":	["none"],
			"description":	"check if any operatives meets the trigger. tooltip=key can be defined to override title"
		},
		"is_operative_captured":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Checks whether the operative has the matching captured status\n"
		},
		"intel_level_over":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Compare the absolute, percentage based, intel level the scoped country has over\nthe specified one:\nGER = {\n  # is true if all predicates are satisfied\n  intel_level_over = { \n    target = POL\n    civilian_intel > 0.5  # GER has more than 50% civ. intel over POL\n    army_intel = 0  # GER has no army intel over POL\n    navy_intel > 0  # GER has at least some navy intel over POL\n    # airforce_intel is not specified and thus ignored in the comparison\n\n    # NOTE: since we are comparing the intel level of a country over another,\n    # checking for values less than 0 does not make sense\n    # NOTE: since we are comparing percentages, using values greater than 1\n    # does not make sense.\n  }\n}\n"
		},
		"any_controlled_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any of the states controlled by the scope country meets the trigger. tooltip=key can be defined to override title"
		},
		"all_controlled_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if all of the states controlled by the scope country meets the trigger. tooltip=key can be defined to override title"
		},
		"num_of_operatives":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks the number of operatives the country controls"
		},
		"num_operative_slots":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks the number of available operative slots a country has.\nIf this differs from the number of operative, this does not mean the country can recruit an operative, but that it will eventually be able to."
		},
		"num_free_operative_slots":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks the number of operative a country can recruit right now.\nNote that this is not necessarily greater than zero if num_operative_slots returned a number greater than the number of operative."
		},
		"is_cryptology_department_active":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"has country an active cryptology department"
		},
		"is_decrypting":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"checks if is currently decrypting a cipher. Example is_decrypting = GER"
		},
		"is_fully_decrypted":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"checks if fully decrypted a cipher. Example is_fully_decrypted = GER"
		},
		"is_active_decryption_bonuses_enabled":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"checks if the country activated their active cipher decryption bonuses. Example is_active_decryption_bonuses_enabled = GER"
		},
		"num_fake_intel_divisions":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Will compare towards the amount of fake intel divisions a country has control over. ."
		},
		"modulo_temp_variable":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"modulos a temp variable with another. Example: \nmodulo_temp_variable = { \n  var = variable_to_modulo \n  value = divisior \n}"
		},
		"any_guaranteed_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if any country with current scoped country guarantees. Example:\nany_guaranteed_country = { \n  # ... triggers to check \n}"
		},
		"all_guaranteed_country":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"check if every country with current scoped country guarantees. Example:\nall_country_with_original_tag = { \n  # ... triggers to check \n}"
		},
		"num_finished_operations":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Compares number of completed operations.\nExample: \nnum_finished_operations = { \n target = ITA \n operation = operation_infiltrate_armed_forces_navy value > 35 \n}"
		},
		"has_collaboration":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks the collaboration in a target country with our currently scoped country. Example: \nhas_collaboration = { \n target = GER\n value > 0.5\n} \n#or has_collaboration@GER as variable\n"
		},
		"set_temp_variable_to_random":	{
			"supported_scope":	["any"],
			"supported_target":	["none"],
			"description":	"sets a temp variable to a random value. example \nset_temp_variable_to_random = num_dogs #sets num_dogs a random value between [0, 1) \nset_temp_variable_to_random = { \n\tvar = num_dogs #variable to set \n\tmin = 5 #default 0. value will be set in between [min, max) \n\tmax = 10 #default 1. value will be set in between [min, max) \n\tinteger = yes #default no. if yes the number value will be an integer \n} \n"
		},
		"is_running_operation":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"checks if running a specific operation. operation can be ommitted to check for any operation\nExample: \nis_running_operation = { \n target = ITA \n operation = operation_infiltrate_armed_forces_navy}"
		},
		"has_finished_collecting_for_operation":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"checks if finished collecting of resources for an operation.\nExample: \nhas_finished_collecting_for_operation = { \n target = ITA \n operation = operation_infiltrate_armed_forces_navy}"
		},
		"conscription_ratio":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks conscription ratio of the country compared to target conscription ratio.\n"
		},
		"target_conscription_amount":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks the target conscription amount of the country.\n"
		},
		"current_conscription_amount":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks the current conscription amount of the country.\n"
		},
		"is_operation_type":	{
			"supported_scope":	["OPERATION"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"checks the type of operation"
		},
		"is_preparing_operation":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"checks if preparing a specific operation.\nExample: \nis_preparing_operation = { \n target = ITA \n operation = operation_infiltrate_armed_forces_navy}"
		},
		"num_researched_technologies":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Number of researched technologies"
		},
		"operative_leader_operation":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Checks whether the operative is performing the given operation:\noperative_leader_operation = operation_rescue_operative"
		},
		"can_declare_war_on":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"checks if the country could potentially declare a war on the target ( according to game rules, relationship, etc... ). Example can_declare_war_on = GER"
		},
		"has_nationality":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks whether the operative has the specified nationality.\nNOTE: this is invalid on non-operatives.\nExamples:\nhas_nationality = GER\n"
		},
		"network_national_coverage":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"checks network national coverage you have over a country. Example: \nnetwork_national_coverage = { \n target = GER\n value > 0.5\n} \n"
		},
		"any_character":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if any character meets the trigger. tooltip=key can be defined to override title"
		},
		"all_character":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if all characters meets the trigger. tooltip=key can be defined to override title"
		},
		"is_army_chief":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_army_chief = yes/no - Checks if the character in scope is hired as an army chief"
		},
		"is_advisor":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_advisor = yes/no - Checks if the current character is an advisor"
		},
		"is_country_leader":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_country_leader = yes/no - Checks if the current character is a country leader"
		},
		"is_unit_leader":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_unit_leader = yes/no - Checks if the current character is a unit leader"
		},
		"is_army_leader":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_army_leader = yes/no - Checks if the current character is a army leader"
		},
		"is_corps_commander":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_corps_commander = yes/no - Checks if the current character is a corps commander"
		},
		"is_character":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"Checks whether the character in scope matches the character in input"
		},
		"is_navy_leader":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_navy_leader = yes/no - Checks if the current character is a navy leader"
		},
		"is_operative":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_operative = yes/no - Checks if the current character is an operative"
		},
		"is_political_advisor":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_political_advisor = yes/no - Checks if the character in scope is hired as a political advisor"
		},
		"is_theorist":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"is_theorist = yes/no - Checks if the character in scope is hired as a theorist"
		},
		"is_navy_chief":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"_is_navy_chief_ = yes/no - Checks if the character in scope is hired as a navy chief"
		},
		"is_air_chief":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"_is_air_chief = yes/no - Checks if the character in scope is hired as an air chief"
		},
		"is_high_command":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"_is_high_command_ = yes/no - Checks if the character in scope is hired as high command"
		},
		"has_army_ledger":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"has_army_ledger = yes/no - Checks if the current character has an army ledger"
		},
		"has_navy_ledger":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"has_navy_ledger = yes/no - Checks if the current character has a navy ledger"
		},
		"has_air_ledger":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"has_air_ledger = yes/no - Checks if the current character has an air ledger"
		},
		"is_character_slot":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"alias of has_advisor_role"
		},
		"num_nukes_being_dropped":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"total number of nukes that are currently ready to be dropped"
		},
		"num_nukes_left_to_drop":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"number of nukes left to drop during this game tick (only useful in-between nuke drops, like in on_nuke_drop on-action, for example)"
		},
		"can_be_country_leader":	{
			"supported_scope":	["COUNTRY", "CHARACTER"],
			"supported_target":	["none"],
			"description":	"Returns true if specified character has a least one country leader role.\n\nExample:\ncan_be_country_leader = GER_erwin_rommelGER_erwin_rommel = { can_be_country_leader = yes }"
		},
		"has_character":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Returns true if scoped country has character.\n\nExample:\nhas_character = GER_erwin_rommel"
		},
		"has_allowed_idea_with_traits":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if country has allowed ideas with specific traits more than limit. Example: \nhas_available_idea_with_traits = { \n\tidea = head_of_intelligence # trait names. can be a list of traits in { } \n\tlimit = 1 \n\tcharacters = yes/no - only runs this trigger on characters \n\tignore = generic_head_of_intelligence # if specified, these ideas will be ignored. can be a list of ideas in { }\n} \n"
		},
		"is_leading_volunteer_group_with_original_country":	{
			"supported_scope":	["CHARACTER", "COMBATANT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"is_leading_volunteer_group_with_original_country = FRA"
		},
		"is_leading_volunteer_group":	{
			"supported_scope":	["CHARACTER", "COMBATANT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"is_leading_volunteer_group = FRA"
		},
		"pc_is_forced_government_by":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if country has had their government force-changed by a certain country in the peace conference.\nExample:\nCZE = { pc_is_forced_government_by = GER }"
		},
		"pc_is_on_same_side_as":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if country is on same side (winning or losing side) as another country in the peace conference.\nExample:\nPOL = { pc_is_on_same_side_as = ENG }"
		},
		"pc_is_puppeted_by":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if country is a puppet of a certain country, or has been released as a puppet by a certain country in the peace conference.\nExample:\nCZE = { pc_is_puppeted_by = GER }"
		},
		"num_divisions_in_states":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Checks number of divisions in states (optionally filtering on majority division types). Using a custom tooltip is highly recommended since the default tooltip leaves out some information for the sake of readability.\nExample:\nnum_divisions_in_states = {\n\tcount > 5 (or <, =)\n\tstates = { 550 559 }\n\ttypes = { infantry cavalry } [optional - will count all except excluded if not specified]\n\texclude = { light_armor } [optional - will count all (included) if not specified]\n}"
		},
		"num_battalions_in_states":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["any"],
			"description":	"Checks number of battalions in states (optionally filtering on battalion types). Using a custom tooltip is highly recommended since the default tooltip leaves out some information for the sake of readability.\nExample:\nnum_battalions_in_states = {\n\tcount > 5 (or <, =)\n\tstates = { 550 559 }\n\ttypes = { infantry cavalry } [optional - will count all except excluded if not specified]\n\texclude = { light_armor } [optional - will count all (included) if not specified]\n}"
		},
		"has_war_with_wargoal_against":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if country has a war started with a wargoal against the target.\nExample 1:\nhas_war_with_wargoal_against = {\n  target = GER\n  type = take_state  # (optional: if not specified any wargoal will do)\n}\nExample 2:\nhas_war_with_wargoal_against = GER  # (any wargoal will do)"
		},
		"pc_is_forced_government":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if country has had their government force-changed in the peace conference.\nExample:\nCZE = { pc_is_forced_government = yes }"
		},
		"seller":	{
			"supported_scope":	["PURCHASE_CONTRACT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check the seller country. Example: seller = GER"
		},
		"buyer":	{
			"supported_scope":	["PURCHASE_CONTRACT"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check the buyer country. Example: buyer = GER"
		},
		"has_design_based_on":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"check if country has a buildable non-obsolete design based on an archetype"
		},
		"has_terrain":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if a country has any province of the specified terrain type.\nExample: has_terrain = mountain"
		},
		"pc_does_state_stack_dismantled":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"Checks if state got dismantled stacked on it in the peace conference.\nExample:\nFROM.FROM.FROM = { pc_does_state_stack_dismantled = yes }"
		},
		"pc_does_state_stack_demilitarized":	{
			"supported_scope":	["STATE"],
			"supported_target":	["none"],
			"description":	"Checks if state got demilitarized stacked on it in the peace conference.\nExample:\nFROM.FROM.FROM = { pc_does_state_stack_demilitarized = yes }"
		},
		"has_character_flag":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["any"],
			"description":	"has a character flag been setCheck flag val date set and days since set.\nExample: has_unit_leader_flag = test_flag\nhas_character_flag = { \n\tflag = <name> (mandatory)\n\tvalue < <int> (optional)\n\tdate > <date> (optional)\n\tdays > <int> (optional)\n}"
		},
		"any_core_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check if any of the country core states for scope meets the trigger. tooltip=key can be defined to override title"
		},
		"all_core_state":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Check if all of the country core states for the scope meets the trigger. tooltip=key can be defined to override title"
		},
		"has_ideology":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"has_ideology = stalinism - Checks if the current character has a country leader role matching the sub-ideology"
		},
		"not_already_hired_except_as":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"not_already_hired_except_as = <slot> - For characters with several advisor roles, checks if the current character is already assigned in another advisor slot.\nexample: let's say a character can be a political advisor and a theorist. But they should only be hired in one role, never both at the same time.\nthen you may set in the advisor available trigger :\n\tadvisor = {\n\t\tslot = political_advisor\n\t\tavailable = { not_already_hired_except_as = political_advisor } \n\t\t...\n\t}\n\tadvisor = {\n\t\tslot = theorist\n\t\tavailable = { not_already_hired_except_as = theorist } \n\t\t...\n\t}\n"
		},
		"has_country_leader_ideology":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks the Ideology of the active country leader"
		},
		"has_ideology_group":	{
			"supported_scope":	["CHARACTER"],
			"supported_target":	["none"],
			"description":	"has_ideology_group = communism - Checks if the current character has a country leader role matching the ideology group"
		},
		"building_count_trigger":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if the current scope has the specified amount of the specified building. \nUsage: <Building> < <int>\nSupported buildings: infrastructure, arms_factory, industrial_complex, air_base, supply_node, rail_way, naval_facility, naval_base, bunker, coastal_bunker, stronghold_network, dockyard, anti_air_building, synthetic_refinery, fuel_silo, radar_station, mega_gun_emplacement, rocket_site, nuclear_reactor, nuclear_reactor_heavy_water, commercial_nuclear_reactor, nuclear_facility, air_facility, land_facility, dam, dam_mountain, canal_kiel, canal_panama, landmark_big_ben, landmark_colosseum, landmark_cristo_redentor, landmark_eiffel_tower, landmark_statue_of_liberty, landmark_kremlin, landmark_hofburg_palace, landmark_berlin_reichstag, landmark_berlin_volkshalle, landmark_taj_mahal, landmark_sadabad_complex, landmark_hagia_sophia."
		},
		"resource_count_trigger":	{
			"supported_scope":	["STATE", "COUNTRY"],
			"supported_target":	["none"],
			"description":	"Checks if the current scope has the specified amount of the specified resource.\nUsage: <Resource> < <int>\nSupported Resources: oil, aluminium, rubber, tungsten, steel, chromium."
		},
		"ideology_support_trigger":	{
			"supported_scope":	["COUNTRY"],
			"supported_target":	["THIS", "ROOT", "PREV", "FROM", "OWNER", "CONTROLLER", "OCCUPIED", "CAPITAL"],
			"description":	"Checks if the current scope has the specified ideology above the specified amount.\nUsage: <Ideology> < <float>\nSupported Ideologies: democratic, communism, fascism, neutrality."
		}
	},
	"modifiers":	[{
			"name":	"air_detection",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_maximum_speed_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_bombing_targetting",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"strategic_bomb_visibility",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_range_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_wing_xp_loss_when_killed_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_ace_generation_chance_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_interception_detect_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_superiority_detect_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_strategic_bomber_bombing_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_superiority_efficiency",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_escort_efficiency",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_intercept_efficiency",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_cas_efficiency",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_nav_efficiency",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_mission_efficiency",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_manpower_requirement_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_close_air_support_org_damage_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_advisor_cost_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"naval_strike",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_strike_attack_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"naval_strike_targetting_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"naval_strike_agility_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"naval_coordination",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"invasion_preparation",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"amphibious_invasion_defence",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"naval_invasion_penalty",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"navy_advisor_cost_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"transport_capacity",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"naval_invasion_capacity",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"naval_commando_raid_distance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"carrier_traffic",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"carrier_night_traffic",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"sortie_efficiency",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"political_power_gain",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"political_power_cost",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"political_power_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"naval_hit_chance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_speed_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"naval_detection",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"army_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"army_armor_speed_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"experience_gain_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader", "military_advancements"]
		}, {
			"name":	"experience_gain_army",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army", "military_advancements"]
		}, {
			"name":	"experience_gain_army_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "military_advancements"]
		}, {
			"name":	"experience_gain_army_unit_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "military_advancements"]
		}, {
			"name":	"experience_gain_army_unit",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "military_advancements"]
		}, {
			"name":	"experience_gain_navy",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "military_advancements"]
		}, {
			"name":	"experience_gain_navy_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "military_advancements"]
		}, {
			"name":	"experience_gain_navy_unit_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "military_advancements"]
		}, {
			"name":	"experience_gain_navy_unit",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "military_advancements"]
		}, {
			"name":	"experience_gain_air",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"experience_gain_air_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"submarine_attack",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"local_resources",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"local_resources_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"local_manpower",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"local_non_core_manpower",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"non_core_manpower",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"weekly_manpower",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"mobilization_speed",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"local_supplies",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"local_factories",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"training_time_army",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "war_production"]
		}, {
			"name":	"training_time_army_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "war_production"]
		}, {
			"name":	"army_org",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive", "aggressive"]
		}, {
			"name":	"army_org_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive", "aggressive"]
		}, {
			"name":	"navy_org",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"navy_org_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"monthly_population",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"conscription",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"conscription_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"local_intel_to_enemies",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state", "defensive"]
		}, {
			"name":	"local_factory_sabotage",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state"]
		}, {
			"name":	"org_loss_when_moving",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"org_loss_at_low_org_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"attrition",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive", "aggressive"]
		}, {
			"name":	"winter_attrition_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"winter_attrition",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"heat_attrition",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"heat_attrition_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"unit_upkeep_attrition_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"spotting_chance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"ships_at_battle_start",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"naval_retreat_chance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"naval_retreat_chance_after_initial_combat",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"naval_retreat_speed_after_initial_combat",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"naval_enemy_positioning_in_initial_attack",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_retreat_speed",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"sub_retreat_speed",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"convoy_retreat_speed",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"out_of_supply_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"offence",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"defence",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"supply_consumption_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive", "aggressive"]
		}, {
			"name":	"recon_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"air_training_xp_gain_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_accidents",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_accidents_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"consumer_goods_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"consumer_goods_expected_value",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"civilian_factory_use",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"nuclear_production",
			"type":	"bool",
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"thermonuclear_production",
			"type":	"bool",
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"nuclear_production_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"thermonuclear_production_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"foreign_subversive_activites",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"subversive_activites_upkeep",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"air_attack_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_defence_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_agility_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_ace_bonuses_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_untrained_pilots_penalty_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_home_defence_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_power_projection_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_strategic_bomber_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"army_morale_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive", "aggressive"]
		}, {
			"name":	"army_morale",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive", "aggressive"]
		}, {
			"name":	"military_leader_cost_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"army_leader_cost_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"navy_leader_cost_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"army_leader_start_level",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"navy_leader_start_level",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"naval_morale",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"naval_morale_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"local_org_regain",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"army_org_regain",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"army_strength_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"dig_in_speed",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"dig_in_speed_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"army_bonus_air_superiority_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"enemy_army_bonus_air_superiority_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_cas_present_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"navy_anti_air_attack",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"navy_anti_air_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"navy_max_range",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"navy_max_range_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"amphibious_invasion",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"stability_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"stability_weekly",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"stability_weekly_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"party_popularity_stability_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"war_stability_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"surrender_limit",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"forced_surrender_limit",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"max_surrender_limit_offset",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"war_support_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"war_support_weekly",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"war_support_weekly_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"power_balance_daily",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"power_balance_weekly",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"opinion_gain_monthly",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"opinion_gain_monthly_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"opinion_gain_monthly_same_ideology",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"opinion_gain_monthly_same_ideology_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"improve_relations_maintain_cost_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"conversion_cost_mil_to_civ_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"conversion_cost_civ_to_mil_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"global_building_slots",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"global_building_slots_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"local_building_slots",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"local_building_slots_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"line_change_production_efficiency_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"production_speed_buildings_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"production_factory_max_efficiency_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"production_factory_efficiency_gain_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"production_factory_start_efficiency_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"production_lack_of_resource_penalty_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"army_attack_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"army_defence_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"army_core_attack_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"army_core_defence_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"army_infantry_attack_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"army_infantry_defence_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"army_armor_attack_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"army_armor_defence_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"army_artillery_attack_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"army_artillery_defence_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"special_forces_attack_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"special_forces_defence_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"motorized_attack_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"rocket_attack_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"motorized_defence_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"cavalry_attack_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"cavalry_defence_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"navy_submarine_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"navy_submarine_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"navy_capital_ship_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"navy_capital_ship_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"navy_screen_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"navy_screen_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"navy_submarine_detection_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"navy_carrier_air_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"navy_carrier_air_targetting_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"navy_carrier_air_agility_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"convoy_raiding_efficiency_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"research_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "military_advancements"]
		}, {
			"name":	"research_sharing_per_country_bonus",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"research_sharing_per_country_bonus_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"encryption",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "defensive"]
		}, {
			"name":	"encryption_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "defensive"]
		}, {
			"name":	"decryption",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "aggressive"]
		}, {
			"name":	"decryption_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "aggressive"]
		}, {
			"name":	"industrial_capacity_factory",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"industrial_capacity_dockyard",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"tech_air_damage_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"industry_air_damage_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"industry_repair_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"industry_free_repair_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"equipment_conversion_speed",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"production_oil_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"max_training",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"training_time_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"min_export",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"trade_opinion_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"ground_attack",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["air", "aggressive"]
		}, {
			"name":	"ground_attack_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["air", "aggressive"]
		}, {
			"name":	"puppet_cost_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["peace", "defensive"]
		}, {
			"name":	"annex_cost_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["peace", "aggressive"]
		}, {
			"name":	"experience_loss_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"equipment_capture",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"equipment_capture_for_controller",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["state"]
		}, {
			"name":	"generate_wargoal_tension",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"generate_wargoal_tension_against",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"join_faction_tension",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"lend_lease_tension",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"lend_lease_tension_with_overlord",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"request_lease_tension",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"send_volunteers_tension",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "defensive"]
		}, {
			"name":	"guarantee_tension",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "defensive"]
		}, {
			"name":	"guarantee_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "politics"]
		}, {
			"name":	"send_volunteer_size",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"send_volunteer_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"send_volunteer_divisions_required",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"air_volunteer_cap",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"justify_war_goal_time",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "aggressive"]
		}, {
			"name":	"justify_war_goal_when_in_major_war_time",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "aggressive"]
		}, {
			"name":	"enemy_justify_war_goal_time",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "aggressive"]
		}, {
			"name":	"enemy_declare_war_tension",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "aggressive"]
		}, {
			"name":	"faction_trade_opinion_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"land_reinforce_rate",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"drift_defence_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["politics"]
		}, {
			"name":	"master_ideology_drift",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["politics"]
		}, {
			"name":	"planning_speed",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"max_planning",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"max_planning_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"max_dig_in",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"max_dig_in_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"land_night_attack",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"air_strategic_bomber_night_penalty",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_night_penalty",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"air_weather_penalty",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"naval_night_attack",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "aggressive"]
		}, {
			"name":	"night_spotting_chance",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"pocket_penalty",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"no_supply_grace",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"port_strike",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"carrier_capacity_penalty_reduction",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"air_carrier_night_penalty_reduction_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"convoy_escort_efficiency",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"combat_width_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"minimum_training_level",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"autonomy_manpower_share",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"extra_trade_to_overlord_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"overlord_trade_cost_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"cic_to_overlord_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"mic_to_overlord_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"autonomy_gain_trade",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"autonomy_gain_trade_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"autonomy_gain_ll_to_overlord",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"autonomy_gain_ll_to_overlord_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"autonomy_gain_ll_to_subject",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"autonomy_gain_ll_to_subject_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"autonomy_gain_warscore",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"autonomy_gain_warscore_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"autonomy_gain",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"autonomy_gain_global_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"license_subject_master_purchase_cost",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"subjects_autonomy_gain",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"can_master_build_for_us",
			"type":	"bool",
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"master_build_autonomy_factor",
			"type":	"bool",
			"IsDynamic":	false,
			"categories":	["autonomy"]
		}, {
			"name":	"industrial_factory_donations",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["government_in_exile"]
		}, {
			"name":	"military_factory_donations",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["government_in_exile"]
		}, {
			"name":	"dockyard_donations",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["government_in_exile"]
		}, {
			"name":	"civil_war_involvement_tension",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_purchase_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_air_purchase_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_infantry_purchase_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_armor_purchase_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_naval_purchase_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_tech_difference_speed",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_production_speed",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_infantry_eq_tech_difference_speed_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_artillery_eq_tech_difference_speed_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_light_tank_eq_tech_difference_speed_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_anti_tank_eq_tech_difference_speed_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_infantry_eq_production_speed_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_artillery_eq_production_speed_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_light_tank_eq_production_speed_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_anti_tank_eq_production_speed_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_infantry_eq_cost_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_artillery_eq_cost_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_light_tank_eq_cost_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"license_anti_tank_eq_cost_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"ai_call_ally_desire_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_join_ally_desire_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_get_ally_desire_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_focus_defense_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_focus_aggressive_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_focus_war_production_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_focus_military_advancements_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_focus_peaceful_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_focus_naval_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_focus_naval_air_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_focus_aviation_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_badass_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_focus_military_equipment_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_desired_divisions_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"ai_license_acceptance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["ai"]
		}, {
			"name":	"command_power_gain",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "army"]
		}, {
			"name":	"max_command_power",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "army"]
		}, {
			"name":	"command_power_gain_mult",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "army"]
		}, {
			"name":	"max_command_power_mult",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "army"]
		}, {
			"name":	"command_abilities_cost_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "army"]
		}, {
			"name":	"acclimatization_cold_climate_gain_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"acclimatization_hot_climate_gain_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"army_advisor_cost_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"army_leader_start_attack_level",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"army_leader_start_defense_level",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"army_leader_start_logistics_level",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"army_leader_start_planning_level",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"navy_leader_start_attack_level",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"navy_leader_start_defense_level",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"navy_leader_start_maneuvering_level",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"navy_leader_start_coordination_level",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"attack_bonus_against",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"attack_bonus_against_cores",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"defense_bonus_against",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"mechanized_attack_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"mechanized_defence_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"max_commander_army_size",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"max_army_group_size",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"terrain_penalty_reduction",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"extra_paratrooper_supply_grace",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"extra_marine_supply_grace",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"cas_damage_reduction",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"air_superiority_bonus_in_combat",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"shore_bombardment_bonus",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"recon_factor_while_entrenched",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"skill_bonus_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"cannot_use_abilities",
			"type":	"bool",
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"promote_cost_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"sickness_chance",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"river_crossing_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"river_crossing_factor_against",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"dont_lose_dig_in_on_attack",
			"type":	"bool",
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"special_forces_cap",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"special_forces_min",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"paratrooper_weight_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"paradrop_organization_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"paratrooper_aa_defense",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"fortification_damage",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"fortification_collateral_chance",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"cic_to_target_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"mic_to_target_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"extra_trade_to_target_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"trade_cost_for_target_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"resource_trade_cost_bonus_per_factory",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"offensive_war_stability_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"defensive_war_stability_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"special_forces_training_time_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "war_production"]
		}, {
			"name":	"special_forces_no_supply_grace",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"special_forces_out_of_supply_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"wounded_chance_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"reassignment_duration_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"naval_invasion_prep_speed",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"equipment_capture_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"equipment_capture_factor_for_controller",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["state"]
		}, {
			"name":	"static_anti_air_damage_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["defensive"]
		}, {
			"name":	"static_anti_air_hit_chance_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["defensive"]
		}, {
			"name":	"critical_receive_chance",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "country"]
		}, {
			"name":	"fuel_gain_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"fuel_gain_factor_from_states",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"fuel_gain_from_states",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"fuel_gain",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"max_fuel_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"max_fuel",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"max_fuel_building",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"base_fuel_gain",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"base_fuel_gain_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"fuel_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"army_fuel_capacity_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"army_fuel_consumption_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"navy_fuel_consumption_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"air_fuel_consumption_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"navy_visibility",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"navy_casualty_on_hit",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"navy_casualty_on_sink",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"naval_attrition",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"mines_planting_by_fleets_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"mines_sweeping_by_fleets_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"mines_planting_by_air_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"mines_sweeping_by_air_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"naval_mines_effect_reduction",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"naval_mines_damage_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"naval_accidents_chance",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"naval_mine_hit_chance",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval"]
		}, {
			"name":	"exiled_divisions_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"own_exiled_divisions_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"exiled_divisions_defense_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"own_exiled_divisions_defense_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["unit_leader"]
		}, {
			"name":	"legitimacy_daily",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["government_in_exile"]
		}, {
			"name":	"targeted_legitimacy_daily",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["government_in_exile"]
		}, {
			"name":	"screening_efficiency",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"positioning",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"screening_without_screens",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["naval", "country"]
		}, {
			"name":	"exile_manpower_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["government_in_exile"]
		}, {
			"name":	"air_mission_xp_gain_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"fighter_sortie_efficiency",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_damage_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_defense_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"naval_enemy_retreat_chance",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"naval_critical_score_chance_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_critical_effect_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"naval_torpedo_reveal_chance_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader"]
		}, {
			"name":	"naval_torpedo_screen_penetration_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_torpedo_cooldown_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_torpedo_hit_chance_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_light_gun_hit_chance_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_heavy_gun_hit_chance_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_torpedo_enemy_critical_chance_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"naval_torpedo_damage_reduction_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "defensive"]
		}, {
			"name":	"carrier_sortie_hours_delay",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_enemy_fleet_size_ratio_penalty_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_has_potf_in_combat_attack",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"naval_has_potf_in_combat_defense",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"strike_force_movement_org_loss",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "unit_leader", "aggressive"]
		}, {
			"name":	"refit_speed",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"refit_ic_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"equipment_upgrade_xp_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"naval_equipment_upgrade_xp_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"land_equipment_upgrade_xp_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"air_equipment_upgrade_xp_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"repair_speed_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "country"]
		}, {
			"name":	"armor_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"breakthrough_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"resistance_target",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"resistance_target_on_our_occupied_states",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"resistance_decay",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"resistance_growth",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"resistance_decay_on_our_occupied_states",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"resistance_growth_on_our_occupied_states",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"starting_compliance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"compliance_growth",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"compliance_growth_on_our_occupied_states",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"army_speed_factor_for_controller",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["state", "army"]
		}, {
			"name":	"enemy_army_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["state", "army"]
		}, {
			"name":	"army_attack_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"disable_strategic_redeployment",
			"type":	"bool",
			"IsDynamic":	false,
			"categories":	["state", "army"]
		}, {
			"name":	"disable_strategic_redeployment_for_controller",
			"type":	"bool",
			"IsDynamic":	false,
			"categories":	["state", "army"]
		}, {
			"name":	"local_supplies_for_controller",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"enemy_local_supplies",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"attrition_for_controller",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive", "aggressive"]
		}, {
			"name":	"enemy_attrition",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["state", "army", "defensive", "aggressive"]
		}, {
			"name":	"resistance_garrison_penetration_chance",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"resistance_damage_to_garrison",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"resistance_damage_to_garrison_on_our_occupied_states",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"required_garrison_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"compliance_gain",
			"type":	"number",
			"decimal_places":	3,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"no_compliance_gain",
			"type":	"bool",
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"enemy_spy_negative_status_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"recruitable_population",
			"type":	"number",
			"decimal_places":	3,
			"IsDynamic":	false,
			"categories":	["state"]
		}, {
			"name":	"recruitable_population_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["state"]
		}, {
			"name":	"resistance_activity",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"legitimacy_gain_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["government_in_exile"]
		}, {
			"name":	"civilian_intel_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"army_intel_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"navy_intel_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"airforce_intel_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"intelligence_agency_defense",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"root_out_resistance_effectiveness_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"defense_impact_on_blueprint_stealing",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"intel_from_operatives_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"target_sabotage_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"boost_resistance_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"operative_death_on_capture_chance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"enemy_operative_recruitment_chance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"occupied_operative_recruitment_chance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"new_operative_slot_bonus",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"operative_slot",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"commando_trait_chance_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"control_trade_mission_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"diplomatic_pressure_mission_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"propaganda_mission_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"boost_ideology_mission_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"decryption_power",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"crypto_strength",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"crypto_department_enabled",
			"type":	"bool",
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"intel_network_gain",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country", "state", "intelligence_agency"]
		}, {
			"name":	"intel_network_gain_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country", "state", "intelligence_agency"]
		}, {
			"name":	"enemy_intel_network_gain_factor_over_occupied_tag",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state"]
		}, {
			"name":	"own_operative_detection_chance",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"enemy_operative_detection_chance",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"enemy_operative_detection_chance_over_occupied_tag",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"own_operative_detection_chance_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"enemy_operative_detection_chance_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"enemy_operative_detection_chance_factor_over_occupied_tag",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"own_operative_capture_chance_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"enemy_operative_capture_chance_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"own_operative_forced_into_hiding_time_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"enemy_operative_forced_into_hiding_time_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"own_operative_harmed_time_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"enemy_operative_harmed_time_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"own_operative_intel_extraction_rate",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"enemy_operative_intel_extraction_rate",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"state_resources_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"state_production_speed_buildings_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state", "war_production"]
		}, {
			"name":	"civilian_intel_to_others",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"army_intel_to_others",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"navy_intel_to_others",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"airforce_intel_to_others",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"breakthrough_bonus_against",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"disabled_ideas",
			"type":	"bool",
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"agency_upgrade_time",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"civilian_intel_decryption_bonus",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"army_intel_decryption_bonus",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"navy_intel_decryption_bonus",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"airforce_intel_decryption_bonus",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"decryption_power_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"female_random_operative_chance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "intelligence_agency"]
		}, {
			"name":	"female_random_scientist_chance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "scientist"]
		}, {
			"name":	"female_random_army_leader_chance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "army"]
		}, {
			"name":	"female_random_admiral_chance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "country"]
		}, {
			"name":	"female_random_country_leader_chance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"supply_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"supply_node_range",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"truck_attrition",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"truck_attrition_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"enemy_truck_attrition_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state"]
		}, {
			"name":	"floating_harbor_supply",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"floating_harbor_range",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"floating_harbor_duration",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"army_attack_against_major_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"army_breakthrough_against_major_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"army_defence_against_major_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"army_attack_against_minor_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"army_defence_against_minor_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"army_breakthrough_against_minor_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "defensive"]
		}, {
			"name":	"air_doctrine_cost_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"land_doctrine_cost_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"naval_doctrine_cost_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"navy_weather_penalty",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"assign_army_leader_cp_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "army"]
		}, {
			"name":	"assign_navy_leader_cp_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["naval", "country"]
		}, {
			"name":	"intel_from_combat_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"exiled_government_weekly_manpower",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"choose_preferred_tactics_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"railway_gun_bombardment_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"unit_leader_as_advisor_cp_cost_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"initiative_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["unit_leader", "country"]
		}, {
			"name":	"naval_invasion_planning_bonus_speed",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"terrain_trait_xp_gain_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["naval", "country", "army"]
		}, {
			"name":	"supply_combat_penalties_on_core_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"coordination_bonus",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["army", "aggressive"]
		}, {
			"name":	"embargo_cost_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "politics"]
		}, {
			"name":	"embargo_threshold_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "politics"]
		}, {
			"name":	"weekly_casualties_war_support",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"weekly_convoys_war_support",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"weekly_bombing_war_support",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"ace_effectiveness_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["air"]
		}, {
			"name":	"local_supply_impact_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state"]
		}, {
			"name":	"local_non_core_supply_impact_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["state"]
		}, {
			"name":	"grant_medal_cost_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"field_officer_promotion_penalty",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"female_divisional_commander_chance",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"paratroopers_special_forces_contribution_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"marines_special_forces_contribution_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"mountaineers_special_forces_contribution_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"additional_brigade_column_size",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"peace_score_ratio_transferred_to_players",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["peace"]
		}, {
			"name":	"peace_score_ratio_transferred_to_overlord",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["peace"]
		}, {
			"name":	"military_industrial_organization_research_bonus",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["war_production"]
		}, {
			"name":	"military_industrial_organization_design_team_assign_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["war_production"]
		}, {
			"name":	"military_industrial_organization_design_team_change_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["war_production"]
		}, {
			"name":	"military_industrial_organization_industrial_manufacturer_assign_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["war_production"]
		}, {
			"name":	"military_industrial_organization_task_capacity",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["war_production"]
		}, {
			"name":	"military_industrial_organization_size_up_requirement",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["war_production"]
		}, {
			"name":	"military_industrial_organization_funds_gain",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["war_production"]
		}, {
			"name":	"military_industrial_organization_policy_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["war_production"]
		}, {
			"name":	"military_industrial_organization_policy_cooldown",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["war_production"]
		}, {
			"name":	"cic_construction_boost",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"cic_construction_boost_factor",
			"type":	"number",
			"decimal_places":	1,
			"IsDynamic":	false,
			"categories":	["country", "war_production"]
		}, {
			"name":	"land_bunker_effectiveness_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"coastal_bunker_effectiveness_factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["country", "state"]
		}, {
			"name":	"special_forces_cap_flat",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	false,
			"categories":	["army"]
		}, {
			"name":	"state_production_speed_facility_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["state"]
		}, {
			"name":	"production_speed_facility_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"special_project_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"special_project_facility_supply_consumption_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"scientist_xp_gain_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["character"]
		}, {
			"name":	"scientist_research_bonus_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["character"]
		}, {
			"name":	"scientist_breakthrough_bonus_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["character"]
		}, {
			"name":	"underway_replenishment_range",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"underway_replenishment_convoy_cost",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	false,
			"categories":	["country"]
		}, {
			"name":	"operation_outcome",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"operation_cost",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"operation_infiltrate_outcome",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["intelligence_agency"]
		}, {
			"name":	"modifier_army_sub_unit_cavalry_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_cavalry_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_cavalry_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_camelry_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_camelry_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_camelry_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_infantry_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_infantry_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_infantry_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_marines_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_marines_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_marines_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_marines_max_org_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_mountaineers_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_mountaineers_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_mountaineers_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_mountaineers_max_org_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_paratrooper_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_paratrooper_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_paratrooper_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_paratrooper_max_org_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_armored_car_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_armored_car_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_armored_car_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_armored_car_max_org_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_armored_car_recon_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_armored_car_recon_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_armored_car_recon_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_armored_car_recon_max_org_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_light_tank_recon_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_light_tank_recon_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_light_tank_recon_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_light_tank_recon_max_org_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_irregular_infantry_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_irregular_infantry_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_irregular_infantry_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_irregular_infantry_max_org_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_militia_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_militia_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_militia_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_militia_max_org_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_militia_org_recovery_cap_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_blackshirt_assault_battalion_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_blackshirt_assault_battalion_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_blackshirt_assault_battalion_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_blackshirt_assault_battalion_max_org_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_military_police_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_military_police_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_military_police_speed_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_military_police_max_org_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_long_range_patrol_support_attack_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_long_range_patrol_support_defence_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"name":	"modifier_army_sub_unit_category_special_forces_max_org_factor",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["army"]
		}, {
			"groupname":	"<Equipment>_design_cost_factor",
			"desc":	"Equipment cost factor.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["country"],
			"modifiers":	["amphibious_mechanized_equipment", "amphibious_tank_chassis", "anti_air_equipment", "anti_tank_equipment", "armored_car_equipment", "armored_support_vehicle", "artillery_equipment", "ballistic_missile_equipment", "convoy", "cv_small_plane_airframe", "cv_small_plane_cas_airframe", "cv_small_plane_cas_airframe_0", "cv_small_plane_cas_airframe_1", "cv_small_plane_cas_airframe_2", "cv_small_plane_cas_airframe_3", "cv_small_plane_cas_airframe_4", "cv_small_plane_naval_bomber_airframe", "cv_small_plane_naval_bomber_airframe_0", "cv_small_plane_naval_bomber_airframe_1", "cv_small_plane_naval_bomber_airframe_2", "cv_small_plane_naval_bomber_airframe_3", "cv_small_plane_naval_bomber_airframe_4", "cv_small_plane_suicide_airframe", "cv_small_plane_suicide_airframe_0", "cv_small_plane_suicide_airframe_1", "cv_small_plane_suicide_airframe_2", "cv_small_plane_suicide_airframe_3", "cv_small_plane_suicide_airframe_4", "explosive_ammo_equipment", "floating_harbor_equipment", "guided_missile_equipment", "heavy_tank_aa_chassis", "heavy_tank_aa_chassis_0", "heavy_tank_aa_chassis_1", "heavy_tank_aa_chassis_2", "heavy_tank_aa_chassis_3", "heavy_tank_amphibious_chassis", "heavy_tank_amphibious_chassis_0", "heavy_tank_amphibious_chassis_1", "heavy_tank_amphibious_chassis_2", "heavy_tank_amphibious_chassis_3", "heavy_tank_artillery_chassis", "heavy_tank_artillery_chassis_0", "heavy_tank_artillery_chassis_1", "heavy_tank_artillery_chassis_2", "heavy_tank_artillery_chassis_3", "heavy_tank_chassis", "heavy_tank_destroyer_chassis", "heavy_tank_destroyer_chassis_0", "heavy_tank_destroyer_chassis_1", "heavy_tank_destroyer_chassis_2", "heavy_tank_destroyer_chassis_3", "heavy_tank_flame_chassis", "heavy_tank_flame_chassis_0", "heavy_tank_flame_chassis_1", "heavy_tank_flame_chassis_2", "heavy_tank_flame_chassis_3", "helicopter_equipment", "infantry_equipment", "jet_fighter_equipment", "jet_strat_bomber_equipment", "jet_tac_bomber_equipment", "land_cruiser_chassis", "large_plane_airframe", "large_plane_maritime_patrol_plane_airframe", "large_plane_maritime_patrol_plane_airframe_0", "large_plane_maritime_patrol_plane_airframe_1", "large_plane_maritime_patrol_plane_airframe_2", "large_plane_maritime_patrol_plane_airframe_3", "large_plane_maritime_patrol_plane_airframe_4", "light_tank_aa_chassis", "light_tank_aa_chassis_0", "light_tank_aa_chassis_1", "light_tank_aa_chassis_2", "light_tank_aa_chassis_3", "light_tank_amphibious_chassis", "light_tank_amphibious_chassis_0", "light_tank_amphibious_chassis_1", "light_tank_amphibious_chassis_2", "light_tank_amphibious_chassis_3", "light_tank_artillery_chassis", "light_tank_artillery_chassis_0", "light_tank_artillery_chassis_1", "light_tank_artillery_chassis_2", "light_tank_artillery_chassis_3", "light_tank_chassis", "light_tank_destroyer_chassis", "light_tank_destroyer_chassis_0", "light_tank_destroyer_chassis_1", "light_tank_destroyer_chassis_2", "light_tank_destroyer_chassis_3", "light_tank_flame_chassis", "light_tank_flame_chassis_0", "light_tank_flame_chassis_1", "light_tank_flame_chassis_2", "light_tank_flame_chassis_3", "mechanized_equipment", "medium_plane_airframe", "medium_plane_fighter_airframe", "medium_plane_fighter_airframe_0", "medium_plane_fighter_airframe_1", "medium_plane_fighter_airframe_2", "medium_plane_fighter_airframe_3", "medium_plane_fighter_airframe_4", "medium_plane_scout_plane_airframe", "medium_plane_scout_plane_airframe_0", "medium_plane_scout_plane_airframe_1", "medium_plane_scout_plane_airframe_2", "medium_plane_scout_plane_airframe_3", "medium_plane_scout_plane_airframe_4", "medium_tank_aa_chassis", "medium_tank_aa_chassis_0", "medium_tank_aa_chassis_1", "medium_tank_aa_chassis_2", "medium_tank_aa_chassis_3", "medium_tank_amphibious_chassis", "medium_tank_amphibious_chassis_0", "medium_tank_amphibious_chassis_1", "medium_tank_amphibious_chassis_2", "medium_tank_amphibious_chassis_3", "medium_tank_artillery_chassis", "medium_tank_artillery_chassis_0", "medium_tank_artillery_chassis_1", "medium_tank_artillery_chassis_2", "medium_tank_artillery_chassis_3", "medium_tank_chassis", "medium_tank_destroyer_chassis", "medium_tank_destroyer_chassis_0", "medium_tank_destroyer_chassis_1", "medium_tank_destroyer_chassis_2", "medium_tank_destroyer_chassis_3", "medium_tank_flame_chassis", "medium_tank_flame_chassis_0", "medium_tank_flame_chassis_1", "medium_tank_flame_chassis_2", "medium_tank_flame_chassis_3", "modern_tank_aa_chassis", "modern_tank_aa_chassis_1", "modern_tank_artillery_chassis", "modern_tank_artillery_chassis_1", "modern_tank_chassis", "modern_tank_destroyer_chassis", "modern_tank_destroyer_chassis_1", "mothership_equipment", "motorbike_equipment", "motorized_equipment", "motorized_rocket_equipment", "nuclear_missile_equipment", "railway_gun_equipment", "rocket_artillery_equipment", "rocket_interceptor_equipment", "sam_missile_equipment", "self_propelled_super_heavy_artillery_equipment", "ship_hull_carrier", "ship_hull_cruiser", "ship_hull_heavy", "ship_hull_light", "ship_hull_submarine", "small_plane_airframe", "small_plane_cas_airframe", "small_plane_cas_airframe_0", "small_plane_cas_airframe_1", "small_plane_cas_airframe_2", "small_plane_cas_airframe_3", "small_plane_cas_airframe_4", "small_plane_cas_airframe_5", "small_plane_naval_bomber_airframe", "small_plane_naval_bomber_airframe_0", "small_plane_naval_bomber_airframe_1", "small_plane_naval_bomber_airframe_2", "small_plane_naval_bomber_airframe_3", "small_plane_naval_bomber_airframe_4", "small_plane_naval_bomber_airframe_5", "small_plane_suicide_airframe", "small_plane_suicide_airframe_0", "small_plane_suicide_airframe_1", "small_plane_suicide_airframe_2", "small_plane_suicide_airframe_3", "small_plane_suicide_airframe_4", "small_plane_suicide_airframe_5", "strat_bomber_intercontinental_equipment", "super_heavy_artillery_equipment", "super_heavy_railway_gun_equipment", "super_heavy_tank_aa_chassis", "super_heavy_tank_aa_chassis_1", "super_heavy_tank_artillery_chassis", "super_heavy_tank_artillery_chassis_1", "super_heavy_tank_chassis", "super_heavy_tank_destroyer_chassis", "super_heavy_tank_destroyer_chassis_1", "support_equipment", "train_equipment", "transport_plane_equipment"]
		}, {
			"groupname":	"<CombatTactic>_preferred_weight_factor",
			"desc":	"Naval preferred weight factor.",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["country"],
			"modifiers":	["nullCombatTactic", "tactic_ambush", "tactic_assault", "tactic_attacker_hb_attack", "tactic_attacker_hb_rush", "tactic_attacker_hb_storm", "tactic_attacker_sb_hold", "tactic_attacker_sb_skillful_defence", "tactic_backhand_blow", "tactic_banzai_charge", "tactic_barrage", "tactic_basic_attack", "tactic_basic_defend", "tactic_blitz", "tactic_breakthrough", "tactic_cc_attack", "tactic_cc_defend", "tactic_cc_local_strong_point", "tactic_cc_storm", "tactic_cc_withdraw", "tactic_counterattack", "tactic_defender_hb_hold", "tactic_defender_hb_skillful_defence", "tactic_defender_sb_assault", "tactic_defender_sb_reckless_assault", "tactic_defender_sb_retake_bridge", "tactic_delay", "tactic_elastic_defense", "tactic_encirclement", "tactic_guerrilla_tactics", "tactic_hold_bridge", "tactic_human_wave_tactics", "tactic_infantry_charge", "tactic_masterful_blitz", "tactic_overwhelming_fire", "tactic_planned_attack", "tactic_relentless_assault", "tactic_seize_bridge", "tactic_sf_ambush", "tactic_sf_armor_supported_assault", "tactic_sf_barrage", "tactic_sf_defense", "tactic_sf_fortify", "tactic_sf_mouse_holing", "tactic_sf_storm", "tactic_shock", "tactic_tactical_withdrawal", "tactic_tw_attack", "tactic_tw_chase", "tactic_tw_defend", "tactic_tw_evade", "tactic_tw_intercept", "tactic_unexpected_thrust", "tactic_urban_defense"]
		}, {
			"groupname":	"state_<Building>_max_level_terrain_limit",
			"desc":	"Maximum allowed building level for specific terrain.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["state"],
			"modifiers":	["air_base_desert", "air_base_forest", "air_base_hills", "air_base_jungle", "air_base_lakes", "air_base_marsh", "air_base_mountain", "air_base_ocean", "air_base_plains", "air_base_unknown", "air_base_urban", "air_base_water_deep_ocean", "air_base_water_fjords", "air_base_water_shallow_sea", "air_facility_desert", "air_facility_forest", "air_facility_hills", "air_facility_jungle", "air_facility_lakes", "air_facility_marsh", "air_facility_mountain", "air_facility_ocean", "air_facility_plains", "air_facility_unknown", "air_facility_urban", "air_facility_water_deep_ocean", "air_facility_water_fjords", "air_facility_water_shallow_sea", "anti_air_building_desert", "anti_air_building_forest", "anti_air_building_hills", "anti_air_building_jungle", "anti_air_building_lakes", "anti_air_building_marsh", "anti_air_building_mountain", "anti_air_building_ocean", "anti_air_building_plains", "anti_air_building_unknown", "anti_air_building_urban", "anti_air_building_water_deep_ocean", "anti_air_building_water_fjords", "anti_air_building_water_shallow_sea", "arms_factory_desert", "arms_factory_forest", "arms_factory_hills", "arms_factory_jungle", "arms_factory_lakes", "arms_factory_marsh", "arms_factory_mountain", "arms_factory_ocean", "arms_factory_plains", "arms_factory_unknown", "arms_factory_urban", "arms_factory_water_deep_ocean", "arms_factory_water_fjords", "arms_factory_water_shallow_sea", "bunker_desert", "bunker_forest", "bunker_hills", "bunker_jungle", "bunker_lakes", "bunker_marsh", "bunker_mountain", "bunker_ocean", "bunker_plains", "bunker_unknown", "bunker_urban", "bunker_water_deep_ocean", "bunker_water_fjords", "bunker_water_shallow_sea", "canal_kiel_desert", "canal_kiel_forest", "canal_kiel_hills", "canal_kiel_jungle", "canal_kiel_lakes", "canal_kiel_marsh", "canal_kiel_mountain", "canal_kiel_ocean", "canal_kiel_plains", "canal_kiel_unknown", "canal_kiel_urban", "canal_kiel_water_deep_ocean", "canal_kiel_water_fjords", "canal_kiel_water_shallow_sea", "canal_panama_desert", "canal_panama_forest", "canal_panama_hills", "canal_panama_jungle", "canal_panama_lakes", "canal_panama_marsh", "canal_panama_mountain", "canal_panama_ocean", "canal_panama_plains", "canal_panama_unknown", "canal_panama_urban", "canal_panama_water_deep_ocean", "canal_panama_water_fjords", "canal_panama_water_shallow_sea", "coastal_bunker_desert", "coastal_bunker_forest", "coastal_bunker_hills", "coastal_bunker_jungle", "coastal_bunker_lakes", "coastal_bunker_marsh", "coastal_bunker_mountain", "coastal_bunker_ocean", "coastal_bunker_plains", "coastal_bunker_unknown", "coastal_bunker_urban", "coastal_bunker_water_deep_ocean", "coastal_bunker_water_fjords", "coastal_bunker_water_shallow_sea", "commercial_nuclear_reactor_desert", "commercial_nuclear_reactor_forest", "commercial_nuclear_reactor_hills", "commercial_nuclear_reactor_jungle", "commercial_nuclear_reactor_lakes", "commercial_nuclear_reactor_marsh", "commercial_nuclear_reactor_mountain", "commercial_nuclear_reactor_ocean", "commercial_nuclear_reactor_plains", "commercial_nuclear_reactor_unknown", "commercial_nuclear_reactor_urban", "commercial_nuclear_reactor_water_deep_ocean", "commercial_nuclear_reactor_water_fjords", "commercial_nuclear_reactor_water_shallow_sea", "dam_desert", "dam_forest", "dam_hills", "dam_jungle", "dam_lakes", "dam_marsh", "dam_mountain", "dam_mountain_desert", "dam_mountain_forest", "dam_mountain_hills", "dam_mountain_jungle", "dam_mountain_lakes", "dam_mountain_marsh", "dam_mountain_mountain", "dam_mountain_ocean", "dam_mountain_plains", "dam_mountain_unknown", "dam_mountain_urban", "dam_mountain_water_deep_ocean", "dam_mountain_water_fjords", "dam_mountain_water_shallow_sea", "dam_ocean", "dam_plains", "dam_unknown", "dam_urban", "dam_water_deep_ocean", "dam_water_fjords", "dam_water_shallow_sea", "dockyard_desert", "dockyard_forest", "dockyard_hills", "dockyard_jungle", "dockyard_lakes", "dockyard_marsh", "dockyard_mountain", "dockyard_ocean", "dockyard_plains", "dockyard_unknown", "dockyard_urban", "dockyard_water_deep_ocean", "dockyard_water_fjords", "dockyard_water_shallow_sea", "fuel_silo_desert", "fuel_silo_forest", "fuel_silo_hills", "fuel_silo_jungle", "fuel_silo_lakes", "fuel_silo_marsh", "fuel_silo_mountain", "fuel_silo_ocean", "fuel_silo_plains", "fuel_silo_unknown", "fuel_silo_urban", "fuel_silo_water_deep_ocean", "fuel_silo_water_fjords", "fuel_silo_water_shallow_sea", "industrial_complex_desert", "industrial_complex_forest", "industrial_complex_hills", "industrial_complex_jungle", "industrial_complex_lakes", "industrial_complex_marsh", "industrial_complex_mountain", "industrial_complex_ocean", "industrial_complex_plains", "industrial_complex_unknown", "industrial_complex_urban", "industrial_complex_water_deep_ocean", "industrial_complex_water_fjords", "industrial_complex_water_shallow_sea", "infrastructure_desert", "infrastructure_forest", "infrastructure_hills", "infrastructure_jungle", "infrastructure_lakes", "infrastructure_marsh", "infrastructure_mountain", "infrastructure_ocean", "infrastructure_plains", "infrastructure_unknown", "infrastructure_urban", "infrastructure_water_deep_ocean", "infrastructure_water_fjords", "infrastructure_water_shallow_sea", "land_facility_desert", "land_facility_forest", "land_facility_hills", "land_facility_jungle", "land_facility_lakes", "land_facility_marsh", "land_facility_mountain", "land_facility_ocean", "land_facility_plains", "land_facility_unknown", "land_facility_urban", "land_facility_water_deep_ocean", "land_facility_water_fjords", "land_facility_water_shallow_sea", "landmark_berlin_reichstag_desert", "landmark_berlin_reichstag_forest", "landmark_berlin_reichstag_hills", "landmark_berlin_reichstag_jungle", "landmark_berlin_reichstag_lakes", "landmark_berlin_reichstag_marsh", "landmark_berlin_reichstag_mountain", "landmark_berlin_reichstag_ocean", "landmark_berlin_reichstag_plains", "landmark_berlin_reichstag_unknown", "landmark_berlin_reichstag_urban", "landmark_berlin_reichstag_water_deep_ocean", "landmark_berlin_reichstag_water_fjords", "landmark_berlin_reichstag_water_shallow_sea", "landmark_berlin_volkshalle_desert", "landmark_berlin_volkshalle_forest", "landmark_berlin_volkshalle_hills", "landmark_berlin_volkshalle_jungle", "landmark_berlin_volkshalle_lakes", "landmark_berlin_volkshalle_marsh", "landmark_berlin_volkshalle_mountain", "landmark_berlin_volkshalle_ocean", "landmark_berlin_volkshalle_plains", "landmark_berlin_volkshalle_unknown", "landmark_berlin_volkshalle_urban", "landmark_berlin_volkshalle_water_deep_ocean", "landmark_berlin_volkshalle_water_fjords", "landmark_berlin_volkshalle_water_shallow_sea", "landmark_big_ben_desert", "landmark_big_ben_forest", "landmark_big_ben_hills", "landmark_big_ben_jungle", "landmark_big_ben_lakes", "landmark_big_ben_marsh", "landmark_big_ben_mountain", "landmark_big_ben_ocean", "landmark_big_ben_plains", "landmark_big_ben_unknown", "landmark_big_ben_urban", "landmark_big_ben_water_deep_ocean", "landmark_big_ben_water_fjords", "landmark_big_ben_water_shallow_sea", "landmark_colosseum_desert", "landmark_colosseum_forest", "landmark_colosseum_hills", "landmark_colosseum_jungle", "landmark_colosseum_lakes", "landmark_colosseum_marsh", "landmark_colosseum_mountain", "landmark_colosseum_ocean", "landmark_colosseum_plains", "landmark_colosseum_unknown", "landmark_colosseum_urban", "landmark_colosseum_water_deep_ocean", "landmark_colosseum_water_fjords", "landmark_colosseum_water_shallow_sea", "landmark_cristo_redentor_desert", "landmark_cristo_redentor_forest", "landmark_cristo_redentor_hills", "landmark_cristo_redentor_jungle", "landmark_cristo_redentor_lakes", "landmark_cristo_redentor_marsh", "landmark_cristo_redentor_mountain", "landmark_cristo_redentor_ocean", "landmark_cristo_redentor_plains", "landmark_cristo_redentor_unknown", "landmark_cristo_redentor_urban", "landmark_cristo_redentor_water_deep_ocean", "landmark_cristo_redentor_water_fjords", "landmark_cristo_redentor_water_shallow_sea", "landmark_eiffel_tower_desert", "landmark_eiffel_tower_forest", "landmark_eiffel_tower_hills", "landmark_eiffel_tower_jungle", "landmark_eiffel_tower_lakes", "landmark_eiffel_tower_marsh", "landmark_eiffel_tower_mountain", "landmark_eiffel_tower_ocean", "landmark_eiffel_tower_plains", "landmark_eiffel_tower_unknown", "landmark_eiffel_tower_urban", "landmark_eiffel_tower_water_deep_ocean", "landmark_eiffel_tower_water_fjords", "landmark_eiffel_tower_water_shallow_sea", "landmark_hagia_sophia_desert", "landmark_hagia_sophia_forest", "landmark_hagia_sophia_hills", "landmark_hagia_sophia_jungle", "landmark_hagia_sophia_lakes", "landmark_hagia_sophia_marsh", "landmark_hagia_sophia_mountain", "landmark_hagia_sophia_ocean", "landmark_hagia_sophia_plains", "landmark_hagia_sophia_unknown", "landmark_hagia_sophia_urban", "landmark_hagia_sophia_water_deep_ocean", "landmark_hagia_sophia_water_fjords", "landmark_hagia_sophia_water_shallow_sea", "landmark_hofburg_palace_desert", "landmark_hofburg_palace_forest", "landmark_hofburg_palace_hills", "landmark_hofburg_palace_jungle", "landmark_hofburg_palace_lakes", "landmark_hofburg_palace_marsh", "landmark_hofburg_palace_mountain", "landmark_hofburg_palace_ocean", "landmark_hofburg_palace_plains", "landmark_hofburg_palace_unknown", "landmark_hofburg_palace_urban", "landmark_hofburg_palace_water_deep_ocean", "landmark_hofburg_palace_water_fjords", "landmark_hofburg_palace_water_shallow_sea", "landmark_kremlin_desert", "landmark_kremlin_forest", "landmark_kremlin_hills", "landmark_kremlin_jungle", "landmark_kremlin_lakes", "landmark_kremlin_marsh", "landmark_kremlin_mountain", "landmark_kremlin_ocean", "landmark_kremlin_plains", "landmark_kremlin_unknown", "landmark_kremlin_urban", "landmark_kremlin_water_deep_ocean", "landmark_kremlin_water_fjords", "landmark_kremlin_water_shallow_sea", "landmark_sadabad_complex_desert", "landmark_sadabad_complex_forest", "landmark_sadabad_complex_hills", "landmark_sadabad_complex_jungle", "landmark_sadabad_complex_lakes", "landmark_sadabad_complex_marsh", "landmark_sadabad_complex_mountain", "landmark_sadabad_complex_ocean", "landmark_sadabad_complex_plains", "landmark_sadabad_complex_unknown", "landmark_sadabad_complex_urban", "landmark_sadabad_complex_water_deep_ocean", "landmark_sadabad_complex_water_fjords", "landmark_sadabad_complex_water_shallow_sea", "landmark_statue_of_liberty_desert", "landmark_statue_of_liberty_forest", "landmark_statue_of_liberty_hills", "landmark_statue_of_liberty_jungle", "landmark_statue_of_liberty_lakes", "landmark_statue_of_liberty_marsh", "landmark_statue_of_liberty_mountain", "landmark_statue_of_liberty_ocean", "landmark_statue_of_liberty_plains", "landmark_statue_of_liberty_unknown", "landmark_statue_of_liberty_urban", "landmark_statue_of_liberty_water_deep_ocean", "landmark_statue_of_liberty_water_fjords", "landmark_statue_of_liberty_water_shallow_sea", "landmark_taj_mahal_desert", "landmark_taj_mahal_forest", "landmark_taj_mahal_hills", "landmark_taj_mahal_jungle", "landmark_taj_mahal_lakes", "landmark_taj_mahal_marsh", "landmark_taj_mahal_mountain", "landmark_taj_mahal_ocean", "landmark_taj_mahal_plains", "landmark_taj_mahal_unknown", "landmark_taj_mahal_urban", "landmark_taj_mahal_water_deep_ocean", "landmark_taj_mahal_water_fjords", "landmark_taj_mahal_water_shallow_sea", "mega_gun_emplacement_desert", "mega_gun_emplacement_forest", "mega_gun_emplacement_hills", "mega_gun_emplacement_jungle", "mega_gun_emplacement_lakes", "mega_gun_emplacement_marsh", "mega_gun_emplacement_mountain", "mega_gun_emplacement_ocean", "mega_gun_emplacement_plains", "mega_gun_emplacement_unknown", "mega_gun_emplacement_urban", "mega_gun_emplacement_water_deep_ocean", "mega_gun_emplacement_water_fjords", "mega_gun_emplacement_water_shallow_sea", "naval_base_desert", "naval_base_forest", "naval_base_hills", "naval_base_jungle", "naval_base_lakes", "naval_base_marsh", "naval_base_mountain", "naval_base_ocean", "naval_base_plains", "naval_base_unknown", "naval_base_urban", "naval_base_water_deep_ocean", "naval_base_water_fjords", "naval_base_water_shallow_sea", "naval_facility_desert", "naval_facility_forest", "naval_facility_hills", "naval_facility_jungle", "naval_facility_lakes", "naval_facility_marsh", "naval_facility_mountain", "naval_facility_ocean", "naval_facility_plains", "naval_facility_unknown", "naval_facility_urban", "naval_facility_water_deep_ocean", "naval_facility_water_fjords", "naval_facility_water_shallow_sea", "nuclear_facility_desert", "nuclear_facility_forest", "nuclear_facility_hills", "nuclear_facility_jungle", "nuclear_facility_lakes", "nuclear_facility_marsh", "nuclear_facility_mountain", "nuclear_facility_ocean", "nuclear_facility_plains", "nuclear_facility_unknown", "nuclear_facility_urban", "nuclear_facility_water_deep_ocean", "nuclear_facility_water_fjords", "nuclear_facility_water_shallow_sea", "nuclear_reactor_desert", "nuclear_reactor_forest", "nuclear_reactor_heavy_water_desert", "nuclear_reactor_heavy_water_forest", "nuclear_reactor_heavy_water_hills", "nuclear_reactor_heavy_water_jungle", "nuclear_reactor_heavy_water_lakes", "nuclear_reactor_heavy_water_marsh", "nuclear_reactor_heavy_water_mountain", "nuclear_reactor_heavy_water_ocean", "nuclear_reactor_heavy_water_plains", "nuclear_reactor_heavy_water_unknown", "nuclear_reactor_heavy_water_urban", "nuclear_reactor_heavy_water_water_deep_ocean", "nuclear_reactor_heavy_water_water_fjords", "nuclear_reactor_heavy_water_water_shallow_sea", "nuclear_reactor_hills", "nuclear_reactor_jungle", "nuclear_reactor_lakes", "nuclear_reactor_marsh", "nuclear_reactor_mountain", "nuclear_reactor_ocean", "nuclear_reactor_plains", "nuclear_reactor_unknown", "nuclear_reactor_urban", "nuclear_reactor_water_deep_ocean", "nuclear_reactor_water_fjords", "nuclear_reactor_water_shallow_sea", "radar_station_desert", "radar_station_forest", "radar_station_hills", "radar_station_jungle", "radar_station_lakes", "radar_station_marsh", "radar_station_mountain", "radar_station_ocean", "radar_station_plains", "radar_station_unknown", "radar_station_urban", "radar_station_water_deep_ocean", "radar_station_water_fjords", "radar_station_water_shallow_sea", "rail_way_desert", "rail_way_forest", "rail_way_hills", "rail_way_jungle", "rail_way_lakes", "rail_way_marsh", "rail_way_mountain", "rail_way_ocean", "rail_way_plains", "rail_way_unknown", "rail_way_urban", "rail_way_water_deep_ocean", "rail_way_water_fjords", "rail_way_water_shallow_sea", "rocket_site_desert", "rocket_site_forest", "rocket_site_hills", "rocket_site_jungle", "rocket_site_lakes", "rocket_site_marsh", "rocket_site_mountain", "rocket_site_ocean", "rocket_site_plains", "rocket_site_unknown", "rocket_site_urban", "rocket_site_water_deep_ocean", "rocket_site_water_fjords", "rocket_site_water_shallow_sea", "stronghold_network_desert", "stronghold_network_forest", "stronghold_network_hills", "stronghold_network_jungle", "stronghold_network_lakes", "stronghold_network_marsh", "stronghold_network_mountain", "stronghold_network_ocean", "stronghold_network_plains", "stronghold_network_unknown", "stronghold_network_urban", "stronghold_network_water_deep_ocean", "stronghold_network_water_fjords", "stronghold_network_water_shallow_sea", "supply_node_desert", "supply_node_forest", "supply_node_hills", "supply_node_jungle", "supply_node_lakes", "supply_node_marsh", "supply_node_mountain", "supply_node_ocean", "supply_node_plains", "supply_node_unknown", "supply_node_urban", "supply_node_water_deep_ocean", "supply_node_water_fjords", "supply_node_water_shallow_sea", "synthetic_refinery_desert", "synthetic_refinery_forest", "synthetic_refinery_hills", "synthetic_refinery_jungle", "synthetic_refinery_lakes", "synthetic_refinery_marsh", "synthetic_refinery_mountain", "synthetic_refinery_ocean", "synthetic_refinery_plains", "synthetic_refinery_unknown", "synthetic_refinery_urban", "synthetic_refinery_water_deep_ocean", "synthetic_refinery_water_fjords", "synthetic_refinery_water_shallow_sea"]
		}, {
			"groupname":	"experience_gain_<Unit>_combat_factor",
			"desc":	"Unit experience gain factor in combat.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["naval", "country"],
			"modifiers":	["airborne_light_armor", "amphibious_armor", "amphibious_heavy_armor", "amphibious_light_armor", "amphibious_mechanized", "amphibious_medium_armor", "anti_air", "anti_air_brigade", "anti_tank", "anti_tank_brigade", "armored_car", "armored_car_recon", "armored_engineer", "armored_maintenance", "armored_signal", "artillery", "artillery_brigade", "assault_engineer", "ballistic_missile", "battle_cruiser", "battleship", "bicycle_battalion", "blackshirt_assault_battalion", "bus", "camelry", "carrier", "cas", "cavalry", "cv_cas", "cv_fighter", "cv_nav_bomber", "cv_suicide_craft", "destroyer", "elephantry", "engineer", "explosive_ammo", "fake_intel_unit", "field_hospital", "fighter", "guided_missile", "heavy_armor", "heavy_cruiser", "heavy_fighter", "heavy_flame_tank", "heavy_sp_anti_air_brigade", "heavy_sp_artillery_brigade", "heavy_tank_destroyer_brigade", "helicopter_brigade", "helicopter_field_hospital", "helicopter_recon", "helicopter_transport", "infantry", "irregular_infantry", "jet_fighter", "jet_strat_bomber", "jet_tac_bomber", "jungle_pioneers_support", "land_cruiser", "light_armor", "light_cruiser", "light_flame_tank", "light_sp_anti_air_brigade", "light_sp_artillery_brigade", "light_tank_destroyer_brigade", "light_tank_recon", "logistics_company", "long_range_patrol_support", "maintenance_company", "marine", "marine_commando", "maritime_patrol_plane", "mechanized", "medium_armor", "medium_flame_tank", "medium_sp_anti_air_brigade", "medium_sp_artillery_brigade", "medium_tank_destroyer_brigade", "military_police", "militia", "modern_armor", "modern_sp_anti_air_brigade", "modern_sp_artillery_brigade", "modern_tank_destroyer_brigade", "mot_anti_air_brigade", "mot_anti_tank_brigade", "mot_artillery_brigade", "mot_recon", "mot_rocket_artillery_brigade", "mothership", "motorized", "motorized_military_police", "motorized_rocket_brigade", "mountaineers", "nav_bomber", "nuclear_missile", "paratrooper", "penal_battalion", "pioneer_support", "railway_gun", "rangers_support", "recon", "rocket_artillery", "rocket_artillery_brigade", "rocket_interceptor", "sam_missile", "scout_plane", "self_propelled_super_heavy_artillery", "signal_company", "strat_bomber", "strat_bomber_intercontinental", "sturmtruppe_battalion", "submarine", "suicide_craft", "super_heavy_armor", "super_heavy_artillery", "super_heavy_railway_gun", "super_heavy_sp_anti_air_brigade", "super_heavy_sp_artillery_brigade", "super_heavy_tank_destroyer_brigade", "tac_bomber", "transport_plane", "winter_logistics_support"]
		}, {
			"groupname":	"state_resource_<Resource>",
			"desc":	"State resource.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["state"],
			"modifiers":	["aluminium", "chromium", "oil", "rubber", "steel", "tungsten"]
		}, {
			"groupname":	"state_resource_cost_<Resource>",
			"desc":	"State resource cost.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["state"],
			"modifiers":	["aluminium", "chromium", "oil", "rubber", "steel", "tungsten"]
		}, {
			"groupname":	"production_speed_<Building>_factor",
			"desc":	"Country building construction speed factor.",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["country"],
			"modifiers":	["air_base", "air_facility", "anti_air_building", "arms_factory", "bunker", "canal_kiel", "canal_panama", "coastal_bunker", "commercial_nuclear_reactor", "dam", "dam_mountain", "dockyard", "fuel_silo", "industrial_complex", "infrastructure", "land_facility", "landmark_berlin_reichstag", "landmark_berlin_volkshalle", "landmark_big_ben", "landmark_colosseum", "landmark_cristo_redentor", "landmark_eiffel_tower", "landmark_hagia_sophia", "landmark_hofburg_palace", "landmark_kremlin", "landmark_sadabad_complex", "landmark_statue_of_liberty", "landmark_taj_mahal", "mega_gun_emplacement", "naval_base", "naval_facility", "nuclear_facility", "nuclear_reactor", "nuclear_reactor_heavy_water", "radar_station", "rail_way", "rocket_site", "stronghold_network", "supply_node", "synthetic_refinery"]
		}, {
			"groupname":	"<Trait>_xp_gain_factor",
			"desc":	"Xp gain factor (used if the trait has prefix 'trait_').",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["naval", "country", "army"],
			"modifiers":	["trait_BUL_ff_sympathizer", "trait_BUL_tsar_loyalist", "trait_BUL_zveno_member", "trait_GRE_fascist_sympathizer", "trait_GRE_marxist_acolyte", "trait_GRE_stauch_monarchist", "trait_GRE_venezelist_loyalist", "trait_HUN_fascist_sympathies", "trait_HUN_vitez", "trait_SOV_bukharinist", "trait_SOV_cowed_by_stalin_army", "trait_SOV_cowed_by_stalin_navy", "trait_SOV_determined", "trait_SOV_foreign_military_advisor", "trait_SOV_monarchist_sympathizer", "trait_SOV_stalinist", "trait_SOV_trotskyist", "trait_SPA_carlist_loyalties", "trait_SPA_falangist_loyalties", "trait_SPA_nationalist_sympathies", "trait_SPR_anti_stalinist_loyalties", "trait_SPR_republican_loyalties", "trait_SPR_stalinist_loyalties", "trait_TUR_kemalist_champion", "trait_cautious", "trait_engineer", "trait_mountaineer", "trait_reckless"]
		}, {
			"groupname":	"<Operation>_cost",
			"desc":	"Operation cost modifier.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["intelligence_agency"],
			"modifiers":	["FRA_coup_in_central_africa", "FRA_coup_in_indochina", "FRA_coup_in_madagascar", "FRA_coup_in_north_africa", "FRA_coup_in_syria", "FRA_coup_in_west_africa", "FRA_instigate_workers_revolution_britain", "FRA_instigate_workers_revolution_germany", "FRA_instigate_workers_revolution_italy", "FRA_instigate_workers_revolution_spain", "bruneval_raid", "capture_tito", "heavy_water_raid", "murder_trotsky", "nuclear_espionage", "operation_boost_resistance", "operation_capture_cipher", "operation_collaboration_government", "operation_coordinated_strike", "operation_coup", "operation_coup_government", "operation_fake_intel", "operation_infiltrate", "operation_infiltrate_armed_forces_airforce", "operation_infiltrate_armed_forces_army", "operation_infiltrate_armed_forces_navy", "operation_infiltrate_civilian", "operation_make_resistance_contacts", "operation_rescue_operative", "operation_steal_tech_airforce", "operation_steal_tech_army", "operation_steal_tech_civilian", "operation_steal_tech_navy", "operation_targeted_sabotage_industry", "operation_targeted_sabotage_infrastructure", "operation_targeted_sabotage_resources", "operation_warsaw_uprising", "raid_trotskys_villa", "rescue_mussolini", "target_sabotage"]
		}, {
			"groupname":	"<IdeaGroup>_cost_factor",
			"desc":	"Idea group cost factor.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["country"],
			"modifiers":	["academy_spirit", "air_chief", "air_force_academy_spirit", "air_force_command_spirit", "air_force_spirit", "aircraft_manufacturer", "army_chief", "army_spirit", "country", "division_command_spirit", "economy", "hidden_ideas", "high_command", "industrial_concern", "materiel_manufacturer", "mobilization_laws", "naval_academy_spirit", "naval_command_spirit", "naval_manufacturer", "navy_chief", "navy_spirit", "political_advisor", "tank_manufacturer", "theorist", "trade_laws"]
		}, {
			"groupname":	"state_production_speed_<Building>_factor",
			"desc":	"State building construction speed factor.",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["state"],
			"modifiers":	["air_base", "air_facility", "anti_air_building", "arms_factory", "bunker", "canal_kiel", "canal_panama", "coastal_bunker", "commercial_nuclear_reactor", "dam", "dam_mountain", "dockyard", "fuel_silo", "industrial_complex", "infrastructure", "land_facility", "landmark_berlin_reichstag", "landmark_berlin_volkshalle", "landmark_big_ben", "landmark_colosseum", "landmark_cristo_redentor", "landmark_eiffel_tower", "landmark_hagia_sophia", "landmark_hofburg_palace", "landmark_kremlin", "landmark_sadabad_complex", "landmark_statue_of_liberty", "landmark_taj_mahal", "mega_gun_emplacement", "naval_base", "naval_facility", "nuclear_facility", "nuclear_reactor", "nuclear_reactor_heavy_water", "radar_station", "rail_way", "rocket_site", "stronghold_network", "supply_node", "synthetic_refinery"]
		}, {
			"groupname":	"state_<Building>_max_level_terrain_limit",
			"desc":	"Maximum allowed building level for terrain.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["state"],
			"modifiers":	["air_base", "air_facility", "anti_air_building", "arms_factory", "bunker", "canal_kiel", "canal_panama", "coastal_bunker", "commercial_nuclear_reactor", "dam", "dockyard", "fuel_silo", "industrial_complex", "infrastructure", "land_facility", "landmark_berlin_reichstag", "landmark_berlin_volkshalle", "landmark_big_ben", "landmark_colosseum", "landmark_cristo_redentor", "landmark_eiffel_tower", "landmark_hagia_sophia", "landmark_hofburg_palace", "landmark_kremlin", "landmark_sadabad_complex", "landmark_statue_of_liberty", "landmark_taj_mahal", "mega_gun_emplacement", "naval_base", "naval_facility", "nuclear_facility", "nuclear_reactor", "nuclear_reactor_heavy_water", "radar_station", "rail_way", "rocket_site", "stronghold_network", "supply_node", "synthetic_refinery"]
		}, {
			"groupname":	"state_resources_<Resource>_factor",
			"desc":	"State resource factor.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["state"],
			"modifiers":	["aluminium", "chromium", "oil", "rubber", "steel", "tungsten"]
		}, {
			"groupname":	"country_resource_cost_<Resource>",
			"desc":	"Country resource cost.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["country"],
			"modifiers":	["aluminium", "chromium", "oil", "rubber", "steel", "tungsten"]
		}, {
			"groupname":	"production_cost_max_<NavalEquipment>",
			"desc":	"Max naval equipment production cost.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["naval"],
			"modifiers":	["convoy", "floating_harbor_equipment", "ship_hull_carrier", "ship_hull_cruiser", "ship_hull_heavy", "ship_hull_light", "ship_hull_submarine"]
		}, {
			"groupname":	"unit_<Unit>_design_cost_factor",
			"desc":	"Unit design cost factor.",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["naval", "country", "army"],
			"modifiers":	["airborne_light_armor", "amphibious_armor", "amphibious_heavy_armor", "amphibious_light_armor", "amphibious_mechanized", "amphibious_medium_armor", "anti_air", "anti_air_brigade", "anti_tank", "anti_tank_brigade", "armored_car", "armored_car_recon", "armored_engineer", "armored_maintenance", "armored_signal", "artillery", "artillery_brigade", "assault_engineer", "ballistic_missile", "battle_cruiser", "battleship", "bicycle_battalion", "blackshirt_assault_battalion", "bus", "camelry", "carrier", "cas", "cavalry", "cv_cas", "cv_fighter", "cv_nav_bomber", "cv_suicide_craft", "destroyer", "elephantry", "engineer", "explosive_ammo", "fake_intel_unit", "field_hospital", "fighter", "guided_missile", "heavy_armor", "heavy_cruiser", "heavy_fighter", "heavy_flame_tank", "heavy_sp_anti_air_brigade", "heavy_sp_artillery_brigade", "heavy_tank_destroyer_brigade", "helicopter_brigade", "helicopter_field_hospital", "helicopter_recon", "helicopter_transport", "infantry", "irregular_infantry", "jet_fighter", "jet_strat_bomber", "jet_tac_bomber", "jungle_pioneers_support", "land_cruiser", "light_armor", "light_cruiser", "light_flame_tank", "light_sp_anti_air_brigade", "light_sp_artillery_brigade", "light_tank_destroyer_brigade", "light_tank_recon", "logistics_company", "long_range_patrol_support", "maintenance_company", "marine", "marine_commando", "maritime_patrol_plane", "mechanized", "medium_armor", "medium_flame_tank", "medium_sp_anti_air_brigade", "medium_sp_artillery_brigade", "medium_tank_destroyer_brigade", "military_police", "militia", "modern_armor", "modern_sp_anti_air_brigade", "modern_sp_artillery_brigade", "modern_tank_destroyer_brigade", "mot_anti_air_brigade", "mot_anti_tank_brigade", "mot_artillery_brigade", "mot_recon", "mot_rocket_artillery_brigade", "mothership", "motorized", "motorized_military_police", "motorized_rocket_brigade", "mountaineers", "nav_bomber", "nuclear_missile", "paratrooper", "penal_battalion", "pioneer_support", "railway_gun", "rangers_support", "recon", "rocket_artillery", "rocket_artillery_brigade", "rocket_interceptor", "sam_missile", "scout_plane", "self_propelled_super_heavy_artillery", "signal_company", "strat_bomber", "strat_bomber_intercontinental", "sturmtruppe_battalion", "submarine", "suicide_craft", "super_heavy_armor", "super_heavy_artillery", "super_heavy_railway_gun", "super_heavy_sp_anti_air_brigade", "super_heavy_sp_artillery_brigade", "super_heavy_tank_destroyer_brigade", "tac_bomber", "transport_plane", "winter_logistics_support"]
		}, {
			"groupname":	"<Building>_max_level_terrain_limit",
			"desc":	"Maximum allowed building level for terrain.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["country"],
			"modifiers":	["air_base", "air_facility", "anti_air_building", "arms_factory", "bunker", "canal_kiel", "canal_panama", "coastal_bunker", "commercial_nuclear_reactor", "dam", "dockyard", "fuel_silo", "industrial_complex", "infrastructure", "land_facility", "landmark_berlin_reichstag", "landmark_berlin_volkshalle", "landmark_big_ben", "landmark_colosseum", "landmark_cristo_redentor", "landmark_eiffel_tower", "landmark_hagia_sophia", "landmark_hofburg_palace", "landmark_kremlin", "landmark_sadabad_complex", "landmark_statue_of_liberty", "landmark_taj_mahal", "mega_gun_emplacement", "naval_base", "naval_facility", "nuclear_facility", "nuclear_reactor", "nuclear_reactor_heavy_water", "radar_station", "rail_way", "rocket_site", "stronghold_network", "supply_node", "synthetic_refinery"]
		}, {
			"groupname":	"module_<EquipmentModule>_design_cost_factor",
			"desc":	"Module design cost factor.",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["naval", "country", "army"],
			"modifiers":	["NOR_rikstanken_turret", "NOR_tank_rikstanken_armor", "additional_machine_guns", "advanced_flamethrower", "air_air_radar_1", "air_air_radar_2", "air_ground_radar_1", "air_ground_radar_2", "aircraft_cannon_1_1x", "aircraft_cannon_1_2x", "aircraft_cannon_2_1x", "aircraft_cannon_2_2x", "airdropped_mines", "amphibious_drive", "armor_piercing_bomb_locks", "armor_plate_large", "armor_plate_medium", "armor_plate_small", "armor_skirts", "auto_loader", "big_ship_deck_space", "bomb_locks", "bomb_sights_1", "bomb_sights_2", "cannon_defense_turret", "cannon_defense_turret_2x", "carrier_ship_engine_1", "carrier_ship_engine_2", "carrier_ship_engine_3", "carrier_ship_engine_4", "carrier_ship_nuclear_engine_1", "cruiser_ship_engine_1", "cruiser_ship_engine_2", "cruiser_ship_engine_3", "cruiser_ship_engine_4", "demining_coil", "dive_brakes_small", "dozer_blade", "dp_light_battery_1", "dp_light_battery_2", "dp_light_battery_3", "dp_light_battery_4", "dp_ship_medium_1", "dp_ship_secondaries_1", "dp_ship_secondaries_2", "dp_ship_secondaries_3", "dp_ship_secondaries_4", "drop_tanks", "earthshaker_bomb_release", "easy_maintenance", "engine_1_1x", "engine_1_2x", "engine_1_3x", "engine_1_4x", "engine_1_6x", "engine_2_1x", "engine_2_2x", "engine_2_3x", "engine_2_4x", "engine_2_6x", "engine_3_1x", "engine_3_2x", "engine_3_3x", "engine_3_4x", "engine_3_6x", "engine_4_1x", "engine_4_2x", "engine_4_3x", "engine_4_4x", "engine_4_6x", "expanded_fuel_tank", "extra_ammo_storage", "fixed_explosive_charge", "flamethrower", "floats", "flying_boat_large", "flying_boat_medium", "fuel_tanks_large", "fuel_tanks_medium", "fuel_tanks_small", "guided_anti_ship_missile", "heavy_bomb_locks", "heavy_mg_2x", "heavy_mg_4x", "heavy_ship_engine_1", "heavy_ship_engine_2", "heavy_ship_engine_3", "heavy_ship_engine_4", "heavy_ship_nuclear_engine_1", "hmg_defense_turret", "hmg_defense_turret_2x", "improved_rocket_propelled_bombs", "jet_engine_1x", "jet_engine_2x", "jet_engine_3x", "jet_engine_4x", "jet_engine_6x", "jet_engine_axial_1x", "jet_engine_axial_2x", "jet_engine_axial_3x", "jet_engine_axial_4x", "jet_engine_axial_6x", "large_aircraft_cannon_1x", "large_aircraft_cannon_2x", "large_bomb_bay", "lc_aircraft_catapult", "lc_armored_skirts", "lc_assault_gun", "lc_bunker_emplacement", "lc_command_center", "lc_flamethrower_turret", "lc_heavy_anti_air_battery", "lc_heavy_anti_air_platform", "lc_heavy_high_velocity_cannons", "lc_heavy_naval_guns", "lc_helipad", "lc_high_impact_obliterator_cannon", "lc_high_velocity_cannon_turret", "lc_hull_mounted_railway_gun", "lc_internal_ammunition_compartments", "lc_internal_fuel_tanks", "lc_light_anti_air_battery", "lc_medium_cannon_turret", "lc_medium_naval_guns", "lc_obstacle_clearance_gear", "lc_radar", "lc_radio_1", "lc_radio_2", "lc_radio_3", "lc_rocket_launcher", "lc_smoke_generators", "lc_stabilizers", "lc_super_heavy_howitzer", "lc_super_heavy_railway_gun", "lc_wet_ammunition_storage", "light_mg_2x", "light_mg_4x", "light_ship_engine_1", "light_ship_engine_2", "light_ship_engine_3", "light_ship_engine_4", "lmg_defense_turret", "lmg_defense_turret_2x", "medium_bomb_bay", "non_strategic_materials_large", "non_strategic_materials_medium", "non_strategic_materials_small", "radio_navigation_1", "radio_navigation_2", "recon_camera", "rocket_engine_1", "rocket_engine_2", "rocket_engine_3", "rocket_propelled_bombs", "rocket_rails", "secondary_turret_hmg", "secondary_turret_small_cannon", "self_sealing_fuel_tanks_large", "self_sealing_fuel_tanks_medium", "self_sealing_fuel_tanks_small", "ship_airplane_launcher_1", "ship_airplane_launcher_2", "ship_anechoic_tile", "ship_anti_air_1", "ship_anti_air_2", "ship_anti_air_3", "ship_anti_air_4", "ship_armor_bb_1", "ship_armor_bb_2", "ship_armor_bb_3", "ship_armor_bc_1", "ship_armor_bc_2", "ship_armor_bc_3", "ship_armor_carrier_deck", "ship_armor_cruiser_1", "ship_armor_cruiser_2", "ship_armor_cruiser_3", "ship_armor_cruiser_4", "ship_armor_ice_carrier_deck_1", "ship_armor_ice_carrier_deck_2", "ship_armor_ice_carrier_deck_3", "ship_armor_shbb", "ship_deck_space", "ship_depth_charge_1", "ship_depth_charge_2", "ship_depth_charge_3", "ship_depth_charge_4", "ship_engine_sub_aip_1", "ship_engine_sub_aip_2", "ship_engine_sub_aip_3", "ship_extra_fuel_tank", "ship_fire_control_system_0", "ship_fire_control_system_1", "ship_fire_control_system_2", "ship_fire_control_system_3", "ship_heavy_battery_1", "ship_heavy_battery_2", "ship_heavy_battery_3", "ship_heavy_battery_4", "ship_light_battery_1", "ship_light_battery_2", "ship_light_battery_3", "ship_light_battery_4", "ship_light_battery_sub", "ship_light_medium_battery_1", "ship_light_medium_battery_2", "ship_light_medium_battery_3", "ship_light_medium_battery_4", "ship_medium_battery_1", "ship_medium_battery_2", "ship_medium_battery_3", "ship_medium_battery_4", "ship_mine_layer_1", "ship_mine_layer_sub", "ship_mine_sweeper_1", "ship_radar_1", "ship_radar_2", "ship_radar_3", "ship_radar_4", "ship_secondaries_1", "ship_secondaries_2", "ship_sonar_1", "ship_sonar_2", "ship_sub_snorkel_1", "ship_sub_snorkel_2", "ship_super_heavy_battery_1", "ship_torpedo_1", "ship_torpedo_2", "ship_torpedo_3", "ship_torpedo_4", "ship_torpedo_sub_1", "ship_torpedo_sub_2", "ship_torpedo_sub_3", "ship_torpedo_sub_4", "ship_torpedo_sub_nuclear", "slbm_launcher", "sloped_armor", "small_bomb_bay", "smoke_launchers", "squeezebore_adaptor", "stabilizer", "sub_missile_launcher", "sub_ship_engine_1", "sub_ship_engine_2", "sub_ship_engine_3", "sub_ship_engine_4", "sub_ship_nuclear_engine_1", "tank_anti_air_cannon", "tank_anti_air_cannon_2", "tank_anti_air_cannon_3", "tank_auto_cannon", "tank_auto_cannon_2", "tank_bogie_suspension", "tank_buster_1", "tank_buster_2", "tank_cast_armor", "tank_christie_suspension", "tank_close_support_gun", "tank_diesel_engine", "tank_gas_turbine_engine", "tank_gasoline_engine", "tank_half_track_suspension", "tank_heavy_cannon", "tank_heavy_cannon_2", "tank_heavy_cannon_3", "tank_heavy_fixed_superstructure_turret", "tank_heavy_howitzer", "tank_heavy_machine_gun", "tank_heavy_three_man_tank_turret", "tank_heavy_two_man_tank_turret", "tank_high_velocity_cannon", "tank_high_velocity_cannon_2", "tank_high_velocity_cannon_3", "tank_interleaved_suspension", "tank_light_fixed_superstructure_turret", "tank_light_one_man_tank_turret", "tank_light_three_man_tank_turret", "tank_light_two_man_tank_turret", "tank_medium_cannon", "tank_medium_cannon_2", "tank_medium_fixed_superstructure_turret", "tank_medium_howitzer", "tank_medium_howitzer_2", "tank_medium_one_man_tank_turret", "tank_medium_three_man_tank_turret", "tank_medium_two_man_tank_turret", "tank_modern_tank_turret", "tank_petrol_electric_engine", "tank_radio_1", "tank_radio_2", "tank_radio_3", "tank_riveted_armor", "tank_rocket_launcher", "tank_rocket_launcher_2", "tank_small_cannon", "tank_small_cannon_2", "tank_super_heavy_cannon", "tank_super_heavy_four_man_tank_turret", "tank_super_heavy_three_man_tank_turret", "tank_torsion_bar_suspension", "tank_welded_armor", "tank_wheeled_suspension", "torpedo_mounting", "torpedo_mounting_2", "torpedo_mounting_3", "wet_ammo_storage"]
		}, {
			"groupname":	"<Building>_max_level_terrain_limit",
			"desc":	"Maximum allowed building level for specific terrain.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["country"],
			"modifiers":	["air_base_desert", "air_base_forest", "air_base_hills", "air_base_jungle", "air_base_lakes", "air_base_marsh", "air_base_mountain", "air_base_ocean", "air_base_plains", "air_base_unknown", "air_base_urban", "air_base_water_deep_ocean", "air_base_water_fjords", "air_base_water_shallow_sea", "air_facility_desert", "air_facility_forest", "air_facility_hills", "air_facility_jungle", "air_facility_lakes", "air_facility_marsh", "air_facility_mountain", "air_facility_ocean", "air_facility_plains", "air_facility_unknown", "air_facility_urban", "air_facility_water_deep_ocean", "air_facility_water_fjords", "air_facility_water_shallow_sea", "anti_air_building_desert", "anti_air_building_forest", "anti_air_building_hills", "anti_air_building_jungle", "anti_air_building_lakes", "anti_air_building_marsh", "anti_air_building_mountain", "anti_air_building_ocean", "anti_air_building_plains", "anti_air_building_unknown", "anti_air_building_urban", "anti_air_building_water_deep_ocean", "anti_air_building_water_fjords", "anti_air_building_water_shallow_sea", "arms_factory_desert", "arms_factory_forest", "arms_factory_hills", "arms_factory_jungle", "arms_factory_lakes", "arms_factory_marsh", "arms_factory_mountain", "arms_factory_ocean", "arms_factory_plains", "arms_factory_unknown", "arms_factory_urban", "arms_factory_water_deep_ocean", "arms_factory_water_fjords", "arms_factory_water_shallow_sea", "bunker_desert", "bunker_forest", "bunker_hills", "bunker_jungle", "bunker_lakes", "bunker_marsh", "bunker_mountain", "bunker_ocean", "bunker_plains", "bunker_unknown", "bunker_urban", "bunker_water_deep_ocean", "bunker_water_fjords", "bunker_water_shallow_sea", "canal_kiel_desert", "canal_kiel_forest", "canal_kiel_hills", "canal_kiel_jungle", "canal_kiel_lakes", "canal_kiel_marsh", "canal_kiel_mountain", "canal_kiel_ocean", "canal_kiel_plains", "canal_kiel_unknown", "canal_kiel_urban", "canal_kiel_water_deep_ocean", "canal_kiel_water_fjords", "canal_kiel_water_shallow_sea", "canal_panama_desert", "canal_panama_forest", "canal_panama_hills", "canal_panama_jungle", "canal_panama_lakes", "canal_panama_marsh", "canal_panama_mountain", "canal_panama_ocean", "canal_panama_plains", "canal_panama_unknown", "canal_panama_urban", "canal_panama_water_deep_ocean", "canal_panama_water_fjords", "canal_panama_water_shallow_sea", "coastal_bunker_desert", "coastal_bunker_forest", "coastal_bunker_hills", "coastal_bunker_jungle", "coastal_bunker_lakes", "coastal_bunker_marsh", "coastal_bunker_mountain", "coastal_bunker_ocean", "coastal_bunker_plains", "coastal_bunker_unknown", "coastal_bunker_urban", "coastal_bunker_water_deep_ocean", "coastal_bunker_water_fjords", "coastal_bunker_water_shallow_sea", "commercial_nuclear_reactor_desert", "commercial_nuclear_reactor_forest", "commercial_nuclear_reactor_hills", "commercial_nuclear_reactor_jungle", "commercial_nuclear_reactor_lakes", "commercial_nuclear_reactor_marsh", "commercial_nuclear_reactor_mountain", "commercial_nuclear_reactor_ocean", "commercial_nuclear_reactor_plains", "commercial_nuclear_reactor_unknown", "commercial_nuclear_reactor_urban", "commercial_nuclear_reactor_water_deep_ocean", "commercial_nuclear_reactor_water_fjords", "commercial_nuclear_reactor_water_shallow_sea", "dam_desert", "dam_forest", "dam_hills", "dam_jungle", "dam_lakes", "dam_marsh", "dam_mountain", "dam_mountain_desert", "dam_mountain_forest", "dam_mountain_hills", "dam_mountain_jungle", "dam_mountain_lakes", "dam_mountain_marsh", "dam_mountain_mountain", "dam_mountain_ocean", "dam_mountain_plains", "dam_mountain_unknown", "dam_mountain_urban", "dam_mountain_water_deep_ocean", "dam_mountain_water_fjords", "dam_mountain_water_shallow_sea", "dam_ocean", "dam_plains", "dam_unknown", "dam_urban", "dam_water_deep_ocean", "dam_water_fjords", "dam_water_shallow_sea", "dockyard_desert", "dockyard_forest", "dockyard_hills", "dockyard_jungle", "dockyard_lakes", "dockyard_marsh", "dockyard_mountain", "dockyard_ocean", "dockyard_plains", "dockyard_unknown", "dockyard_urban", "dockyard_water_deep_ocean", "dockyard_water_fjords", "dockyard_water_shallow_sea", "fuel_silo_desert", "fuel_silo_forest", "fuel_silo_hills", "fuel_silo_jungle", "fuel_silo_lakes", "fuel_silo_marsh", "fuel_silo_mountain", "fuel_silo_ocean", "fuel_silo_plains", "fuel_silo_unknown", "fuel_silo_urban", "fuel_silo_water_deep_ocean", "fuel_silo_water_fjords", "fuel_silo_water_shallow_sea", "industrial_complex_desert", "industrial_complex_forest", "industrial_complex_hills", "industrial_complex_jungle", "industrial_complex_lakes", "industrial_complex_marsh", "industrial_complex_mountain", "industrial_complex_ocean", "industrial_complex_plains", "industrial_complex_unknown", "industrial_complex_urban", "industrial_complex_water_deep_ocean", "industrial_complex_water_fjords", "industrial_complex_water_shallow_sea", "infrastructure_desert", "infrastructure_forest", "infrastructure_hills", "infrastructure_jungle", "infrastructure_lakes", "infrastructure_marsh", "infrastructure_mountain", "infrastructure_ocean", "infrastructure_plains", "infrastructure_unknown", "infrastructure_urban", "infrastructure_water_deep_ocean", "infrastructure_water_fjords", "infrastructure_water_shallow_sea", "land_facility_desert", "land_facility_forest", "land_facility_hills", "land_facility_jungle", "land_facility_lakes", "land_facility_marsh", "land_facility_mountain", "land_facility_ocean", "land_facility_plains", "land_facility_unknown", "land_facility_urban", "land_facility_water_deep_ocean", "land_facility_water_fjords", "land_facility_water_shallow_sea", "landmark_berlin_reichstag_desert", "landmark_berlin_reichstag_forest", "landmark_berlin_reichstag_hills", "landmark_berlin_reichstag_jungle", "landmark_berlin_reichstag_lakes", "landmark_berlin_reichstag_marsh", "landmark_berlin_reichstag_mountain", "landmark_berlin_reichstag_ocean", "landmark_berlin_reichstag_plains", "landmark_berlin_reichstag_unknown", "landmark_berlin_reichstag_urban", "landmark_berlin_reichstag_water_deep_ocean", "landmark_berlin_reichstag_water_fjords", "landmark_berlin_reichstag_water_shallow_sea", "landmark_berlin_volkshalle_desert", "landmark_berlin_volkshalle_forest", "landmark_berlin_volkshalle_hills", "landmark_berlin_volkshalle_jungle", "landmark_berlin_volkshalle_lakes", "landmark_berlin_volkshalle_marsh", "landmark_berlin_volkshalle_mountain", "landmark_berlin_volkshalle_ocean", "landmark_berlin_volkshalle_plains", "landmark_berlin_volkshalle_unknown", "landmark_berlin_volkshalle_urban", "landmark_berlin_volkshalle_water_deep_ocean", "landmark_berlin_volkshalle_water_fjords", "landmark_berlin_volkshalle_water_shallow_sea", "landmark_big_ben_desert", "landmark_big_ben_forest", "landmark_big_ben_hills", "landmark_big_ben_jungle", "landmark_big_ben_lakes", "landmark_big_ben_marsh", "landmark_big_ben_mountain", "landmark_big_ben_ocean", "landmark_big_ben_plains", "landmark_big_ben_unknown", "landmark_big_ben_urban", "landmark_big_ben_water_deep_ocean", "landmark_big_ben_water_fjords", "landmark_big_ben_water_shallow_sea", "landmark_colosseum_desert", "landmark_colosseum_forest", "landmark_colosseum_hills", "landmark_colosseum_jungle", "landmark_colosseum_lakes", "landmark_colosseum_marsh", "landmark_colosseum_mountain", "landmark_colosseum_ocean", "landmark_colosseum_plains", "landmark_colosseum_unknown", "landmark_colosseum_urban", "landmark_colosseum_water_deep_ocean", "landmark_colosseum_water_fjords", "landmark_colosseum_water_shallow_sea", "landmark_cristo_redentor_desert", "landmark_cristo_redentor_forest", "landmark_cristo_redentor_hills", "landmark_cristo_redentor_jungle", "landmark_cristo_redentor_lakes", "landmark_cristo_redentor_marsh", "landmark_cristo_redentor_mountain", "landmark_cristo_redentor_ocean", "landmark_cristo_redentor_plains", "landmark_cristo_redentor_unknown", "landmark_cristo_redentor_urban", "landmark_cristo_redentor_water_deep_ocean", "landmark_cristo_redentor_water_fjords", "landmark_cristo_redentor_water_shallow_sea", "landmark_eiffel_tower_desert", "landmark_eiffel_tower_forest", "landmark_eiffel_tower_hills", "landmark_eiffel_tower_jungle", "landmark_eiffel_tower_lakes", "landmark_eiffel_tower_marsh", "landmark_eiffel_tower_mountain", "landmark_eiffel_tower_ocean", "landmark_eiffel_tower_plains", "landmark_eiffel_tower_unknown", "landmark_eiffel_tower_urban", "landmark_eiffel_tower_water_deep_ocean", "landmark_eiffel_tower_water_fjords", "landmark_eiffel_tower_water_shallow_sea", "landmark_hagia_sophia_desert", "landmark_hagia_sophia_forest", "landmark_hagia_sophia_hills", "landmark_hagia_sophia_jungle", "landmark_hagia_sophia_lakes", "landmark_hagia_sophia_marsh", "landmark_hagia_sophia_mountain", "landmark_hagia_sophia_ocean", "landmark_hagia_sophia_plains", "landmark_hagia_sophia_unknown", "landmark_hagia_sophia_urban", "landmark_hagia_sophia_water_deep_ocean", "landmark_hagia_sophia_water_fjords", "landmark_hagia_sophia_water_shallow_sea", "landmark_hofburg_palace_desert", "landmark_hofburg_palace_forest", "landmark_hofburg_palace_hills", "landmark_hofburg_palace_jungle", "landmark_hofburg_palace_lakes", "landmark_hofburg_palace_marsh", "landmark_hofburg_palace_mountain", "landmark_hofburg_palace_ocean", "landmark_hofburg_palace_plains", "landmark_hofburg_palace_unknown", "landmark_hofburg_palace_urban", "landmark_hofburg_palace_water_deep_ocean", "landmark_hofburg_palace_water_fjords", "landmark_hofburg_palace_water_shallow_sea", "landmark_kremlin_desert", "landmark_kremlin_forest", "landmark_kremlin_hills", "landmark_kremlin_jungle", "landmark_kremlin_lakes", "landmark_kremlin_marsh", "landmark_kremlin_mountain", "landmark_kremlin_ocean", "landmark_kremlin_plains", "landmark_kremlin_unknown", "landmark_kremlin_urban", "landmark_kremlin_water_deep_ocean", "landmark_kremlin_water_fjords", "landmark_kremlin_water_shallow_sea", "landmark_sadabad_complex_desert", "landmark_sadabad_complex_forest", "landmark_sadabad_complex_hills", "landmark_sadabad_complex_jungle", "landmark_sadabad_complex_lakes", "landmark_sadabad_complex_marsh", "landmark_sadabad_complex_mountain", "landmark_sadabad_complex_ocean", "landmark_sadabad_complex_plains", "landmark_sadabad_complex_unknown", "landmark_sadabad_complex_urban", "landmark_sadabad_complex_water_deep_ocean", "landmark_sadabad_complex_water_fjords", "landmark_sadabad_complex_water_shallow_sea", "landmark_statue_of_liberty_desert", "landmark_statue_of_liberty_forest", "landmark_statue_of_liberty_hills", "landmark_statue_of_liberty_jungle", "landmark_statue_of_liberty_lakes", "landmark_statue_of_liberty_marsh", "landmark_statue_of_liberty_mountain", "landmark_statue_of_liberty_ocean", "landmark_statue_of_liberty_plains", "landmark_statue_of_liberty_unknown", "landmark_statue_of_liberty_urban", "landmark_statue_of_liberty_water_deep_ocean", "landmark_statue_of_liberty_water_fjords", "landmark_statue_of_liberty_water_shallow_sea", "landmark_taj_mahal_desert", "landmark_taj_mahal_forest", "landmark_taj_mahal_hills", "landmark_taj_mahal_jungle", "landmark_taj_mahal_lakes", "landmark_taj_mahal_marsh", "landmark_taj_mahal_mountain", "landmark_taj_mahal_ocean", "landmark_taj_mahal_plains", "landmark_taj_mahal_unknown", "landmark_taj_mahal_urban", "landmark_taj_mahal_water_deep_ocean", "landmark_taj_mahal_water_fjords", "landmark_taj_mahal_water_shallow_sea", "mega_gun_emplacement_desert", "mega_gun_emplacement_forest", "mega_gun_emplacement_hills", "mega_gun_emplacement_jungle", "mega_gun_emplacement_lakes", "mega_gun_emplacement_marsh", "mega_gun_emplacement_mountain", "mega_gun_emplacement_ocean", "mega_gun_emplacement_plains", "mega_gun_emplacement_unknown", "mega_gun_emplacement_urban", "mega_gun_emplacement_water_deep_ocean", "mega_gun_emplacement_water_fjords", "mega_gun_emplacement_water_shallow_sea", "naval_base_desert", "naval_base_forest", "naval_base_hills", "naval_base_jungle", "naval_base_lakes", "naval_base_marsh", "naval_base_mountain", "naval_base_ocean", "naval_base_plains", "naval_base_unknown", "naval_base_urban", "naval_base_water_deep_ocean", "naval_base_water_fjords", "naval_base_water_shallow_sea", "naval_facility_desert", "naval_facility_forest", "naval_facility_hills", "naval_facility_jungle", "naval_facility_lakes", "naval_facility_marsh", "naval_facility_mountain", "naval_facility_ocean", "naval_facility_plains", "naval_facility_unknown", "naval_facility_urban", "naval_facility_water_deep_ocean", "naval_facility_water_fjords", "naval_facility_water_shallow_sea", "nuclear_facility_desert", "nuclear_facility_forest", "nuclear_facility_hills", "nuclear_facility_jungle", "nuclear_facility_lakes", "nuclear_facility_marsh", "nuclear_facility_mountain", "nuclear_facility_ocean", "nuclear_facility_plains", "nuclear_facility_unknown", "nuclear_facility_urban", "nuclear_facility_water_deep_ocean", "nuclear_facility_water_fjords", "nuclear_facility_water_shallow_sea", "nuclear_reactor_desert", "nuclear_reactor_forest", "nuclear_reactor_heavy_water_desert", "nuclear_reactor_heavy_water_forest", "nuclear_reactor_heavy_water_hills", "nuclear_reactor_heavy_water_jungle", "nuclear_reactor_heavy_water_lakes", "nuclear_reactor_heavy_water_marsh", "nuclear_reactor_heavy_water_mountain", "nuclear_reactor_heavy_water_ocean", "nuclear_reactor_heavy_water_plains", "nuclear_reactor_heavy_water_unknown", "nuclear_reactor_heavy_water_urban", "nuclear_reactor_heavy_water_water_deep_ocean", "nuclear_reactor_heavy_water_water_fjords", "nuclear_reactor_heavy_water_water_shallow_sea", "nuclear_reactor_hills", "nuclear_reactor_jungle", "nuclear_reactor_lakes", "nuclear_reactor_marsh", "nuclear_reactor_mountain", "nuclear_reactor_ocean", "nuclear_reactor_plains", "nuclear_reactor_unknown", "nuclear_reactor_urban", "nuclear_reactor_water_deep_ocean", "nuclear_reactor_water_fjords", "nuclear_reactor_water_shallow_sea", "radar_station_desert", "radar_station_forest", "radar_station_hills", "radar_station_jungle", "radar_station_lakes", "radar_station_marsh", "radar_station_mountain", "radar_station_ocean", "radar_station_plains", "radar_station_unknown", "radar_station_urban", "radar_station_water_deep_ocean", "radar_station_water_fjords", "radar_station_water_shallow_sea", "rail_way_desert", "rail_way_forest", "rail_way_hills", "rail_way_jungle", "rail_way_lakes", "rail_way_marsh", "rail_way_mountain", "rail_way_ocean", "rail_way_plains", "rail_way_unknown", "rail_way_urban", "rail_way_water_deep_ocean", "rail_way_water_fjords", "rail_way_water_shallow_sea", "rocket_site_desert", "rocket_site_forest", "rocket_site_hills", "rocket_site_jungle", "rocket_site_lakes", "rocket_site_marsh", "rocket_site_mountain", "rocket_site_ocean", "rocket_site_plains", "rocket_site_unknown", "rocket_site_urban", "rocket_site_water_deep_ocean", "rocket_site_water_fjords", "rocket_site_water_shallow_sea", "stronghold_network_desert", "stronghold_network_forest", "stronghold_network_hills", "stronghold_network_jungle", "stronghold_network_lakes", "stronghold_network_marsh", "stronghold_network_mountain", "stronghold_network_ocean", "stronghold_network_plains", "stronghold_network_unknown", "stronghold_network_urban", "stronghold_network_water_deep_ocean", "stronghold_network_water_fjords", "stronghold_network_water_shallow_sea", "supply_node_desert", "supply_node_forest", "supply_node_hills", "supply_node_jungle", "supply_node_lakes", "supply_node_marsh", "supply_node_mountain", "supply_node_ocean", "supply_node_plains", "supply_node_unknown", "supply_node_urban", "supply_node_water_deep_ocean", "supply_node_water_fjords", "supply_node_water_shallow_sea", "synthetic_refinery_desert", "synthetic_refinery_forest", "synthetic_refinery_hills", "synthetic_refinery_jungle", "synthetic_refinery_lakes", "synthetic_refinery_marsh", "synthetic_refinery_mountain", "synthetic_refinery_ocean", "synthetic_refinery_plains", "synthetic_refinery_unknown", "synthetic_refinery_urban", "synthetic_refinery_water_deep_ocean", "synthetic_refinery_water_fjords", "synthetic_refinery_water_shallow_sea"]
		}, {
			"groupname":	"<IdeaCategory>_category_type_cost_factor",
			"desc":	"Idea category type cost factor.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["country"],
			"modifiers":	["air_spirit", "army_spirit", "navy_spirit"]
		}, {
			"groupname":	"state_repair_speed_<Building>_factor",
			"desc":	"State building repair speed factor.",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["state"],
			"modifiers":	["air_base", "air_facility", "anti_air_building", "arms_factory", "bunker", "canal_kiel", "canal_panama", "coastal_bunker", "commercial_nuclear_reactor", "dam", "dam_mountain", "dockyard", "fuel_silo", "industrial_complex", "infrastructure", "land_facility", "landmark_berlin_reichstag", "landmark_berlin_volkshalle", "landmark_big_ben", "landmark_colosseum", "landmark_cristo_redentor", "landmark_eiffel_tower", "landmark_hagia_sophia", "landmark_hofburg_palace", "landmark_kremlin", "landmark_sadabad_complex", "landmark_statue_of_liberty", "landmark_taj_mahal", "mega_gun_emplacement", "naval_base", "naval_facility", "nuclear_facility", "nuclear_reactor", "nuclear_reactor_heavy_water", "radar_station", "rail_way", "rocket_site", "stronghold_network", "supply_node", "synthetic_refinery"]
		}, {
			"groupname":	"<Technology>_cost_factor",
			"desc":	"Technology cost factor.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["country"],
			"modifiers":	["cat_air_bombs", "cat_air_engine", "cat_air_guns", "cat_anti_air", "cat_anti_tank", "cat_armored_cars", "cat_base_strike", "cat_battlefield_support", "cat_fleet_in_being", "cat_fortification", "cat_grand_battle_plan", "cat_heavy_armor", "cat_heavy_fighter", "cat_light_armor", "cat_marines_doctrine", "cat_maritime_patrol", "cat_mass_assault", "cat_mechanized_equipment", "cat_medium_armor", "cat_mobile_warfare", "cat_mountaineers_doctrine", "cat_operational_integrity", "cat_paratroopers_doctrine", "cat_production", "cat_scout_plane", "cat_ship_heavy_battery", "cat_ship_light_battery", "cat_ship_medium_battery", "cat_special_forces_generic", "cat_strategic_bomber", "cat_strategic_destruction", "cat_superior_firepower", "cat_synth_oil", "cat_synth_rubber", "cat_torpedoes", "cat_trade_interdiction"]
		}, {
			"groupname":	"country_resource_<Resource>",
			"desc":	"Country resource.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["country"],
			"modifiers":	["aluminium", "chromium", "oil", "rubber", "steel", "tungsten"]
		}, {
			"groupname":	"<Operation>_risk",
			"desc":	"Operation risk modifier.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["intelligence_agency"],
			"modifiers":	["FRA_coup_in_central_africa", "FRA_coup_in_indochina", "FRA_coup_in_madagascar", "FRA_coup_in_north_africa", "FRA_coup_in_syria", "FRA_coup_in_west_africa", "FRA_instigate_workers_revolution_britain", "FRA_instigate_workers_revolution_germany", "FRA_instigate_workers_revolution_italy", "FRA_instigate_workers_revolution_spain", "bruneval_raid", "capture_tito", "heavy_water_raid", "murder_trotsky", "nuclear_espionage", "operation", "operation_boost_resistance", "operation_capture_cipher", "operation_collaboration_government", "operation_coordinated_strike", "operation_coup_government", "operation_fake_intel", "operation_infiltrate", "operation_infiltrate_armed_forces_airforce", "operation_infiltrate_armed_forces_army", "operation_infiltrate_armed_forces_navy", "operation_infiltrate_civilian", "operation_make_resistance_contacts", "operation_rescue_operative", "operation_steal_tech", "operation_steal_tech_airforce", "operation_steal_tech_army", "operation_steal_tech_civilian", "operation_steal_tech_navy", "operation_targeted_sabotage_industry", "operation_targeted_sabotage_infrastructure", "operation_targeted_sabotage_resources", "operation_warsaw_uprising", "raid_trotskys_villa", "rescue_mussolini", "target_sabotage"]
		}, {
			"groupname":	"repair_speed_<Building>_factor",
			"desc":	"Country building repair speed factor.",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["country"],
			"modifiers":	["air_base", "air_facility", "anti_air_building", "arms_factory", "bunker", "canal_kiel", "canal_panama", "coastal_bunker", "commercial_nuclear_reactor", "dam", "dam_mountain", "dockyard", "fuel_silo", "industrial_complex", "infrastructure", "land_facility", "landmark_berlin_reichstag", "landmark_berlin_volkshalle", "landmark_big_ben", "landmark_colosseum", "landmark_cristo_redentor", "landmark_eiffel_tower", "landmark_hagia_sophia", "landmark_hofburg_palace", "landmark_kremlin", "landmark_sadabad_complex", "landmark_statue_of_liberty", "landmark_taj_mahal", "mega_gun_emplacement", "naval_base", "naval_facility", "nuclear_facility", "nuclear_reactor", "nuclear_reactor_heavy_water", "radar_station", "rail_way", "rocket_site", "stronghold_network", "supply_node", "synthetic_refinery"]
		}, {
			"groupname":	"<Ideology>_acceptance",
			"desc":	"Ideology acceptance.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["politics"],
			"modifiers":	["communism", "democratic", "fascism", "neutrality"]
		}, {
			"groupname":	"temporary_state_resource_<Resource>",
			"desc":	"Temporary state resource.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["state"],
			"modifiers":	["aluminium", "chromium", "oil", "rubber", "steel", "tungsten"]
		}, {
			"groupname":	"trait_<Trait>_xp_gain_factor",
			"desc":	"Xp gain factor (used if the trait has not prefix 'trait_').",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["naval", "country", "army"],
			"modifiers":	["BALTIC_anti_bolshevik", "BALTIC_ex_russian", "ETH_hero_of_ethiopia", "IRQ_golden_square_member", "JAP_communist_sympathizer", "JAP_samurai_lineage", "POL_sanation_left_leader", "POL_sanation_right_leader", "SWE_disillusioned_with_the_government", "SWE_promoted_away_from_power", "SWE_wounded_in_protests", "adaptable", "aggressive_assaulter", "air_controller", "ambusher", "arctic_water_expert", "armor_officer", "ascari_officer", "aviation_enthusiast", "battleship_adherent", "bearer_of_artillery", "big_guns_expert", "blockade_runner", "blue_water_expert", "bold", "brave", "brilliant_strategist", "camouflage_expert", "career_officer", "caustic_personality", "cavalry_expert", "cavalry_leader", "cavalry_officer", "chief_engineer", "combined_arms_expert", "commando", "concealment_expert", "craven", "crisis_magician", "cruiser_captain", "cuts_corners", "defensive_doctrine", "demoted", "desert_fox", "destroyer_leader", "disgruntled", "dive_bomber", "engineer_officer", "exiled_leader", "expert_delegator", "expert_improviser", "fast_planner", "fighter_director", "fleet_protector", "flight_deck_manager", "fly_swatter", "fortress_buster", "gentlemanly", "green_water_expert", "ground_pounder", "guerilla_fighter", "gunnery_expert", "harsh_leader", "hidden_sympathies", "hill_fighter", "hunter_killer", "infantry_expert", "infantry_leader", "infantry_officer", "inflexible_strategist", "inshore_fighter", "inspirational_bagpiper", "inspirational_leader", "invader_ii", "ironside", "irregulars_officer", "jaeger", "jungle_rat", "lancer", "loading_drill_master", "logistics_wizard", "lone_wolf", "loyalty_to_britain", "loyalty_to_india", "loyalty_to_pakistan", "marksman", "media_personality", "militias_officer", "mine_craft", "naval_invader", "naval_liason", "naval_lineage", "navy_career_officer", "navy_media_personality", "offensive_doctrine", "old_guard", "old_guard_navy", "operative_commando", "operative_demolition_expert", "operative_double_agent", "operative_escape_artist", "operative_infiltrator", "operative_linguist", "operative_master_interrogator", "operative_natural_orator", "operative_safe_cracker", "operative_seducer", "operative_tough", "operative_well_groomed", "organisational_leader", "organizer", "panzer_expert", "panzer_leader", "paratrooper", "peasant_sympathiser", "politically_connected", "promoted_from_the_ranks", "ranger", "reassigned", "recently_promoted", "safety_first", "scavenger", "search_pattern_expert", "seawolf", "sick", "silent_hunter", "skilled_staffer", "skirmisher", "smoke_screen_expert", "spotter", "substance_abuser", "substance_addict", "superior_tactician", "swamp_fox", "thorough_planner", "torpedo_bomber", "torpedo_expert", "trickster", "unyielding_defender", "urban_assault_specialist", "war_hero", "winter_expert", "winter_specialist", "wounded"]
		}, {
			"groupname":	"<Ideology>_drift",
			"desc":	"Ideology drift.",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["politics"],
			"modifiers":	["communism", "democratic", "fascism", "neutrality"]
		}, {
			"groupname":	"<SpecialProject>_speed_factor",
			"desc":	"Special project speed factor",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["country", "state"],
			"modifiers":	["sp_air_axial_jet_engine", "sp_air_bouncing_bomb", "sp_air_earthshaker_bomb", "sp_air_helicopter", "sp_air_intercontinental_bomber", "sp_air_jet_engine", "sp_air_mothership_aircraft", "sp_air_radar", "sp_air_supersonic_jet", "sp_commercial_nuclear_reactor", "sp_land_flamethrower_tank", "sp_land_land_cruiser", "sp_land_military_engineering_vehicles", "sp_land_multi_charge_large_caliber_gun", "sp_land_self_propelled_super_heavy_howitzer", "sp_land_stronghold_network", "sp_land_super_heavy_howitzer", "sp_land_super_heavy_railway_gun", "sp_naval_aip_engine", "sp_naval_anechoic_tiles", "sp_naval_cruiser_submarine", "sp_naval_fleet_submarine", "sp_naval_ice_carrier", "sp_naval_midget_submarine", "sp_naval_modern_battleship", "sp_naval_modern_carrier", "sp_naval_nuclear_missile_submarine", "sp_naval_nuclear_submarine", "sp_naval_nuclear_torpedo", "sp_naval_proximity_fuze", "sp_naval_rocket_launching_submarine", "sp_naval_super_heavy_battleship", "sp_naval_torpedo_cruiser", "sp_naval_underway_replenishment", "sp_nuclear_bomb", "sp_nuclear_engines", "sp_nuclear_reactor", "sp_nuclear_warheads", "sp_rocket_interceptor", "sp_rockets_ballistic_missile", "sp_rockets_flying_bomb", "sp_rockets_ground_to_air_missile", "sp_rockets_long_range_ballistic_missile", "sp_rockets_medium_range_ballistic_missile", "sp_tag_aircraft", "sp_tag_artillery", "sp_tag_bomb", "sp_tag_guided_bomb", "sp_tag_helicopter", "sp_tag_jet", "sp_tag_nuclear_power", "sp_tag_nuclear_warfare", "sp_tag_radar", "sp_tag_rocket", "sp_tag_submarine", "sp_tag_surface_ship", "sp_tag_tank", "sp_thermo_nuclear_bomb", "specialization_air", "specialization_land", "specialization_naval", "specialization_nuclear"]
		}, {
			"groupname":	"<Operation>_outcome",
			"desc":	"Operation outcome modifier.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["intelligence_agency"],
			"modifiers":	["FRA_coup_in_central_africa", "FRA_coup_in_indochina", "FRA_coup_in_madagascar", "FRA_coup_in_north_africa", "FRA_coup_in_syria", "FRA_coup_in_west_africa", "FRA_instigate_workers_revolution_britain", "FRA_instigate_workers_revolution_germany", "FRA_instigate_workers_revolution_italy", "FRA_instigate_workers_revolution_spain", "bruneval_raid", "capture_tito", "heavy_water_raid", "murder_trotsky", "nuclear_espionage", "operation_boost_resistance", "operation_capture_cipher", "operation_collaboration_government", "operation_coordinated_strike", "operation_coup_government", "operation_fake_intel", "operation_infiltrate_armed_forces_airforce", "operation_infiltrate_armed_forces_army", "operation_infiltrate_armed_forces_navy", "operation_infiltrate_civilian", "operation_make_resistance_contacts", "operation_rescue_operative", "operation_steal_tech", "operation_steal_tech_airforce", "operation_steal_tech_army", "operation_steal_tech_civilian", "operation_steal_tech_navy", "operation_targeted_sabotage_industry", "operation_targeted_sabotage_infrastructure", "operation_targeted_sabotage_resources", "operation_warsaw_uprising", "raid_trotskys_villa", "rescue_mussolini"]
		}, {
			"groupname":	"production_cost_<Building>_factor",
			"desc":	"Building construction cost factor.",
			"type":	"number",
			"decimal_places":	2,
			"IsDynamic":	true,
			"categories":	["country"],
			"modifiers":	["air_base", "air_facility", "anti_air_building", "arms_factory", "bunker", "canal_kiel", "canal_panama", "coastal_bunker", "commercial_nuclear_reactor", "dam", "dam_mountain", "dockyard", "fuel_silo", "industrial_complex", "infrastructure", "land_facility", "landmark_berlin_reichstag", "landmark_berlin_volkshalle", "landmark_big_ben", "landmark_colosseum", "landmark_cristo_redentor", "landmark_eiffel_tower", "landmark_hagia_sophia", "landmark_hofburg_palace", "landmark_kremlin", "landmark_sadabad_complex", "landmark_statue_of_liberty", "landmark_taj_mahal", "mega_gun_emplacement", "naval_base", "naval_facility", "nuclear_facility", "nuclear_reactor", "nuclear_reactor_heavy_water", "radar_station", "rail_way", "rocket_site", "stronghold_network", "supply_node", "synthetic_refinery"]
		}, {
			"groupname":	"experience_gain_<Unit>_training_factor",
			"desc":	"Unit experience gain factor on training.",
			"type":	"number",
			"decimal_places":	0,
			"IsDynamic":	true,
			"categories":	["naval", "country"],
			"modifiers":	["airborne_light_armor", "amphibious_armor", "amphibious_heavy_armor", "amphibious_light_armor", "amphibious_mechanized", "amphibious_medium_armor", "anti_air", "anti_air_brigade", "anti_tank", "anti_tank_brigade", "armored_car", "armored_car_recon", "armored_engineer", "armored_maintenance", "armored_signal", "artillery", "artillery_brigade", "assault_engineer", "ballistic_missile", "battle_cruiser", "battleship", "bicycle_battalion", "blackshirt_assault_battalion", "bus", "camelry", "carrier", "cas", "cavalry", "cv_cas", "cv_fighter", "cv_nav_bomber", "cv_suicide_craft", "destroyer", "elephantry", "engineer", "explosive_ammo", "fake_intel_unit", "field_hospital", "fighter", "guided_missile", "heavy_armor", "heavy_cruiser", "heavy_fighter", "heavy_flame_tank", "heavy_sp_anti_air_brigade", "heavy_sp_artillery_brigade", "heavy_tank_destroyer_brigade", "helicopter_brigade", "helicopter_field_hospital", "helicopter_recon", "helicopter_transport", "infantry", "irregular_infantry", "jet_fighter", "jet_strat_bomber", "jet_tac_bomber", "jungle_pioneers_support", "land_cruiser", "light_armor", "light_cruiser", "light_flame_tank", "light_sp_anti_air_brigade", "light_sp_artillery_brigade", "light_tank_destroyer_brigade", "light_tank_recon", "logistics_company", "long_range_patrol_support", "maintenance_company", "marine", "marine_commando", "maritime_patrol_plane", "mechanized", "medium_armor", "medium_flame_tank", "medium_sp_anti_air_brigade", "medium_sp_artillery_brigade", "medium_tank_destroyer_brigade", "military_police", "militia", "modern_armor", "modern_sp_anti_air_brigade", "modern_sp_artillery_brigade", "modern_tank_destroyer_brigade", "mot_anti_air_brigade", "mot_anti_tank_brigade", "mot_artillery_brigade", "mot_recon", "mot_rocket_artillery_brigade", "mothership", "motorized", "motorized_military_police", "motorized_rocket_brigade", "mountaineers", "nav_bomber", "nuclear_missile", "paratrooper", "penal_battalion", "pioneer_support", "railway_gun", "rangers_support", "recon", "rocket_artillery", "rocket_artillery_brigade", "rocket_interceptor", "sam_missile", "scout_plane", "self_propelled_super_heavy_artillery", "signal_company", "strat_bomber", "strat_bomber_intercontinental", "sturmtruppe_battalion", "submarine", "suicide_craft", "super_heavy_armor", "super_heavy_artillery", "super_heavy_railway_gun", "super_heavy_sp_anti_air_brigade", "super_heavy_sp_artillery_brigade", "super_heavy_tank_destroyer_brigade", "tac_bomber", "transport_plane", "winter_logistics_support"]
		}],
	"dynamic_variables":	{
		"global":	{
			"year":	{
				"description":	"current year"
			},
			"province_controllers":	{
				"description":	"get array of all province controllers. Example: province_controllers^4135"
			},
			"power_balance_value":	{
				"description":	"compares current value of a power balance\n\nExample:\npower_balance_value = {\n\tid = power_balance_id\n\tvalue > 0.5 # supported operators are: >, < and =\n}",
				"is_trigger":	true
			},
			"technology":	{
				"description":	"array of objects in technology database"
			},
			"majors":	{
				"description":	"get array of all majors (including non existing"
			},
			"num_days":	{
				"description":	"current total days"
			},
			"date":	{
				"description":	"get date value that can be comparable to other date values and localized using GetDateString/GetDateStringShortMonth/GetDateStringNoHour/GetDateStringNoHourLong scripted locs"
			},
			"countries":	{
				"description":	"get array of all countries (including non existing"
			},
			"states":	{
				"description":	"get array of all states"
			},
			"ideology_groups":	{
				"description":	"array of objects in ideology_groups database"
			},
			"operations":	{
				"description":	"array of objects in operations database"
			},
			"difficulty":	{
				"description":	"check if the difficulty is above or below specified value 0-2 (difficulty enum). Example: difficulty > 0 (above easy)",
				"is_trigger":	true
			},
			"threat":	{
				"description":	"check the global threat value (world tension). 0-1 value",
				"is_trigger":	true
			},
			"pc_turn":	{
				"description":	"Checks turn number in PC.\nExample:\npc_turn > 20",
				"is_trigger":	true
			},
			"power_balance_daily_change":	{
				"description":	"compares current total daily change of a power balance\n\nExample:\npower_balance_daily_change = {\n\tid = power_balance_id\n\tvalue > 0.5 # supported operators are: >, < and =\n}",
				"is_trigger":	true
			},
			"power_balance_weekly_change":	{
				"description":	"compares current total weekly change of a power balance\n\nExample:\npower_balance_weekly_change = {\n\tid = power_balance_id\n\tvalue > 0.5 # supported operators are: >, < and =\n}",
				"is_trigger":	true
			},
			"num_of_career_profile_points":	{
				"description":	"check amount of gained career points",
				"is_trigger":	true
			}
		},
		"country":	{
			"political_power":	{
				"description":	"total political power of country"
			},
			"subjects":	{
				"description":	"array of subjects"
			},
			"deployed_total_manpower_k":	{
				"description":	"total deployed manpower of country in thousands."
			},
			"resource_consumed":	{
				"description":	"number of resources consumed by country, resource type is defined in target resource_consumed@steel"
			},
			"total_equipment_produced_mechanized":	{
				"description":	"Total produced equipment of typemechanized"
			},
			"manpower":	{
				"description":	"DEPRECATED, MAY OVERFLOW. total manpower of country"
			},
			"air_intel":	{
				"description":	"air intel against a target country. example GER.air_intel@ENG"
			},
			"overlord":	{
				"description":	"master of this subject"
			},
			"num_of_nukes":	{
				"description":	"check amount of nukes",
				"is_trigger":	true
			},
			"command_power":	{
				"description":	"total command power of country"
			},
			"enemies_of_allies":	{
				"description":	"array of enemies of allies"
			},
			"total_equipment_produced_strategic_bomber":	{
				"description":	"Total produced equipment of typestrategic_bomber"
			},
			"owned_controlled_states":	{
				"description":	"array owned and core states"
			},
			"resource_produced":	{
				"description":	"number of resources produced by country, resource type is defined in target. example resource_produced@steel"
			},
			"core_resistance":	{
				"description":	"returns core resistance of target country"
			},
			"num_core_states":	{
				"description":	"number of core states"
			},
			"deployed_navy_manpower_k":	{
				"description":	"total deployed navy manpower of country in thousands."
			},
			"navy_intel":	{
				"description":	"navy intel against a target country. example GER.navy_intel@ENG"
			},
			"manpower_k":	{
				"description":	"total manpower of country in thousands"
			},
			"deployed_airforce_manpower_k":	{
				"description":	"total deployed air manpower of country in thousands. Does not include exile manpower"
			},
			"deployed_army_manpower_k":	{
				"description":	"total deployed army manpower of country in thousands."
			},
			"total_equipment_produced_flame":	{
				"description":	"Total produced equipment of typeflame"
			},
			"faction_members":	{
				"description":	"array of faction members"
			},
			"fuel_k":	{
				"description":	"total fuel of country in thousands"
			},
			"max_fuel_k":	{
				"description":	"max fuel of country in thousands"
			},
			"num_owned_controlled_states":	{
				"description":	"number of owned and core states"
			},
			"agency_upgrade_number":	{
				"description":	"Checks the number of upgrade done in the intelligence agency. \nagency_upgrade_number > 4",
				"is_trigger":	true
			},
			"max_available_manpower":	{
				"description":	"DEPRECATED, MAY OVERFLOW. total available manpower of country"
			},
			"total_equipment_produced_floating_harbor":	{
				"description":	"Total produced equipment of typefloating_harbor"
			},
			"ai_strategy_dont_defend_ally_borders":	{
				"description":	"ai strategy value dont_defend_ally_borders against country. Example: GER.ai_strategy_dont_defend_ally_borders@ENG"
			},
			"max_available_manpower_k":	{
				"description":	"total available manpower of country in thousands"
			},
			"opinion":	{
				"description":	"opinion of a country targeted on another one. example GER.opinion@ENG"
			},
			"num_battalions":	{
				"description":	"number of battalions"
			},
			"max_manpower":	{
				"description":	"DEPRECATED, MAY OVERFLOW. maximum manpower of country"
			},
			"owned_states":	{
				"description":	"array of owned states"
			},
			"power_balance_weekly":	{
				"description":	"current total power balance weekly change"
			},
			"max_manpower_k":	{
				"description":	"maximum manpower of country in thousands"
			},
			"num_ships_with_type":	{
				"description":	"number of ships controlled in country, ship type is defined in target. example num_ships_with_type@carrier. can be a sub unit def type or one of carrier,capital,screen, submarine"
			},
			"army_experience":	{
				"description":	"army experience of a country"
			},
			"navy_experience":	{
				"description":	"navy experience of a country"
			},
			"air_experience":	{
				"description":	"air experience of a country"
			},
			"any_war_score":	{
				"description":	"compares the warscore of all wars in a country to see if any fullfills the comparison condition 0-100 - Example: any_war_score > 40",
				"is_trigger":	true
			},
			"num_armies":	{
				"description":	"number of armies"
			},
			"ai_strategy_ignore_claim":	{
				"description":	"ai strategy value ignore_claim against country. Example: GER.ai_strategy_ignore_claim@ENG"
			},
			"party_popularity":	{
				"description":	"popularity of targeted party [0.00, 1.00]. example party_popularity@democratic. May also target ruling_party. This also supports country variables, so you can party_popularity@my_var_name for variables that store ideologies"
			},
			"num_ships":	{
				"description":	"number of ships"
			},
			"enemies_naval_strength_ratio":	{
				"description":	"Compares the estimated navy strength between the scope country and all its enemies",
				"is_trigger":	true
			},
			"num_deployed_planes":	{
				"description":	"number of deployed planes"
			},
			"total_equipment_produced_artillery":	{
				"description":	"Total produced equipment of typeartillery"
			},
			"command_power_daily":	{
				"description":	"Checks if daily command power increase is more or less that specified value \n command_power_daily > 1.5",
				"is_trigger":	true
			},
			"num_deployed_planes_with_type":	{
				"description":	"number of deployed planes with equipment type. example num_deployed_planes_with_type@fighter"
			},
			"researched_techs":	{
				"description":	"returns the array of researched technologies"
			},
			"num_armies_in_state":	{
				"description":	"number of armies in state, state is in target. example num_armies_in_state@123"
			},
			"total_equipment_produced_support":	{
				"description":	"Total produced equipment of typesupport"
			},
			"num_armies_with_type":	{
				"description":	"number of armies with dominant type, dominant type is defined in target. example: num_armies_with_type@light_armor"
			},
			"army_intel":	{
				"description":	"army intel against a target country. example GER.army_intel@ENG"
			},
			"num_battalions_with_type":	{
				"description":	"number of battalions with sub unit type, sub unit type is defined in target. example: num_battalions_with_type@light_armor"
			},
			"civilian_intel":	{
				"description":	"civilian intel against a target country. example GER.civilian_intel@ENG"
			},
			"stability":	{
				"description":	"stability of a country"
			},
			"modifier":	{
				"description":	"a modifier stored in country scope"
			},
			"party_popularity_100":	{
				"description":	"popularity of targeted party [0.00, 100.00]. example party_popularity_100@democratic. May also target ruling_party. This also supports country variables, so you can party_popularity_100@my_var_name for variables that store ideologies"
			},
			"highest_party_ideology":	{
				"description":	"ideology of the most popular party. Can exclude the ruling party by using @exclude_ruling_party. Example: highest_party_ideology OR highest_party_ideology@exclude_ruling_party"
			},
			"total_equipment_produced_train":	{
				"description":	"Total produced equipment of typetrain"
			},
			"highest_party_popularity":	{
				"description":	"popularity size of the most popular party [0.00, 1.00]. Can exclude the ruling party by using @exclude_ruling_party. Example: highest_party_popularity OR highest_party_popularity@exclude_ruling_party"
			},
			"neighbors_owned":	{
				"description":	"array of neighbors to owned states"
			},
			"current_party_ideology_group":	{
				"description":	"returns the token for current party ideology group"
			},
			"num_controlled_states":	{
				"description":	"number of controlled states"
			},
			"controlled_states":	{
				"description":	"array of controlled states"
			},
			"potential_and_current_enemies":	{
				"description":	"array of potential and actual enemies"
			},
			"capital":	{
				"description":	"capital state of the country"
			},
			"total_equipment_produced_carrier":	{
				"description":	"Total produced equipment of typecarrier"
			},
			"encryption_strength":	{
				"description":	"total encryption strength of a country that is needed"
			},
			"num_owned_states":	{
				"description":	"number of owned states"
			},
			"core_states":	{
				"description":	"array of core states"
			},
			"total_constructed_other":	{
				"description":	"Total constructions of other"
			},
			"enemies":	{
				"description":	"array of enemies at war with"
			},
			"neighbors":	{
				"description":	"array of neighbors"
			},
			"host":	{
				"description":	"exile host of this country"
			},
			"days_decision_timeout":	{
				"description":	"timeout in days for a specific timed decision, decision type token is defined in target. example: days_decision_timeout@SOV_propaganda_knowledge"
			},
			"exiles":	{
				"description":	"exile host of this country"
			},
			"days_mission_timeout":	{
				"description":	"timeout in days for a specific timed mission, mission type token is defined in target. example: days_mission_timeout@GER_mefo_bills_mission"
			},
			"allies":	{
				"description":	"array of allies (faction members). prefer using faction_members instead"
			},
			"faction_leader":	{
				"description":	"faction leader of this country's faction"
			},
			"ai_attitude_protective_weight":	{
				"description":	"weight for an ai attitude attitude_protectiveagainst country. Example: GER.ai_attitude_protective_weight@ENG"
			},
			"resource_exported":	{
				"description":	"number of resources exported by country, resource type is defined in target resource_exported@steel"
			},
			"resource_imported":	{
				"description":	"number of resources imported by country, resource type is defined in target resource_imported@steel"
			},
			"alliance_naval_strength_ratio":	{
				"description":	"Compares the estimated naval strength between the scope country, his allies and his enemies.",
				"is_trigger":	true
			},
			"resource":	{
				"description":	"number of surplus resources in country, resource type is defined in target resource@steel"
			},
			"legitimacy":	{
				"description":	"legitimacy of scope country. -1 if not an exile"
			},
			"num_equipment":	{
				"description":	"number of equipment in country. example num_equipment@infantry_equipment"
			},
			"num_equipment_in_armies":	{
				"description":	"number of equipment in armies of the country, equipment type token is defined in target. example num_equipment_in_armies@infantry_equipment"
			},
			"num_target_equipment_in_armies":	{
				"description":	"number of equipment required in armies of the country, equipment type token is defined in target. example num_target_equipment_in_armies@infantry_equipment"
			},
			"num_of_operatives":	{
				"description":	"Checks the number of operatives the country controls",
				"is_trigger":	true
			},
			"num_equipment_in_armies_k":	{
				"description":	"number of equipment in armies of the country in thousands, equipment type token is defined in target. example num_equipment_in_armies_k@infantry_equipment"
			},
			"num_target_equipment_in_armies_k":	{
				"description":	"number of equipment required in armies of the country in thousands, equipment type token is defined in target. example num_target_equipment_in_armies_k@infantry_equipment"
			},
			"autonomy_ratio":	{
				"description":	"autonomy of scope country. -1 if not a subject"
			},
			"ai_attitude_wants_antagonize":	{
				"description":	"returns 1 if ai wants antagonize"
			},
			"ai_attitude_wants_weaken":	{
				"description":	"returns 1 if ai wants weaken"
			},
			"ai_attitude_wants_ally":	{
				"description":	"returns 1 if ai wants ally"
			},
			"ai_attitude_wants_protect":	{
				"description":	"returns 1 if ai wants protect"
			},
			"has_bombing_war_support":	{
				"description":	"check value of bombing malus to war support 0-1: Example has_bombing_war_support < 0.1",
				"is_trigger":	true
			},
			"ai_attitude_wants_ignore":	{
				"description":	"returns 1 if ai wants ignore"
			},
			"ai_attitude_is_threatened":	{
				"description":	"returns 1 if ai is threatened"
			},
			"core_compliance":	{
				"description":	"returns core compliance of target country"
			},
			"occupied_countries":	{
				"description":	"array of occupied countries"
			},
			"original_tag":	{
				"description":	"returns the original tag of a country"
			},
			"decryption_speed":	{
				"description":	"total encryption strength of a country that is needed"
			},
			"cryptology_defense_level":	{
				"description":	"cryptology defense level of a country"
			},
			"army_leaders":	{
				"description":	"all army leaders of a country"
			},
			"navy_leaders":	{
				"description":	"all navy leaders of a country"
			},
			"operatives":	{
				"description":	"all operatives of a country"
			},
			"num_orders_groups":	{
				"description":	"number of orders groups"
			},
			"total_equipment_produced_interceptor":	{
				"description":	"Total produced equipment of typeinterceptor"
			},
			"power_balance_value":	{
				"description":	"current power balance value"
			},
			"power_balance_daily":	{
				"description":	"current total power balance daily change"
			},
			"total_constructed_civilian_factory":	{
				"description":	"Total constructions of civilian_factory"
			},
			"num_of_supply_nodes":	{
				"description":	"check amount of supply nodes",
				"is_trigger":	true
			},
			"country_leader":	{
				"description":	"returns the current country leader of the country"
			},
			"ai_strategy_alliance":	{
				"description":	"ai strategy value alliance against country. Example: GER.ai_strategy_alliance@ENG"
			},
			"theorist":	{
				"description":	"returns the currently hired theorist of the country"
			},
			"army_chief":	{
				"description":	"returns the currently hired army chief of the country"
			},
			"navy_chief":	{
				"description":	"returns the currently hired navy chief of the country"
			},
			"num_subjects":	{
				"description":	"check the number of subjects of nation",
				"is_trigger":	true
			},
			"has_political_power":	{
				"description":	"check amount of political power",
				"is_trigger":	true
			},
			"air_chief":	{
				"description":	"returns the currently hired air chief of the country"
			},
			"political_advisor":	{
				"description":	"returns an array with the currently hired political advisors of the country"
			},
			"high_command":	{
				"description":	"returns an array with the currently hired high command of the country"
			},
			"total_equipment_produced_capital_ship":	{
				"description":	"Total produced equipment of typecapital_ship"
			},
			"num_of_civilian_factories_in_cores":	{
				"description":	"calculates the number of civilian factories on core states of current country scope, on those states that are under control of @Tag <Tag | ROOT | my_var> example num_of_civilian_factories_in_cores@GER"
			},
			"surrender_progress":	{
				"description":	"check if a country is close to surrendering",
				"is_trigger":	true
			},
			"num_of_military_factories_in_cores":	{
				"description":	"calculates the number of civilian factories on core states of current country scope, on those states that are under control of @Tag  <Tag | ROOT | my_var> example num_of_military_factories_in_cores@GER"
			},
			"num_of_naval_factories_in_cores":	{
				"description":	"calculates the number of civilian factories on core states of current country scope, on those states that are under control of @Tag  <Tag | ROOT | my_var> example num_of_naval_factories_in_cores@my_var"
			},
			"ai_strategy_declare_war":	{
				"description":	"ai strategy value declare_war against country. Example: GER.ai_strategy_declare_war@ENG"
			},
			"num_of_controlled_factories":	{
				"description":	"check the number of factories in controlled states excluding any gained or lost through trade, relations, modifiers etc.",
				"is_trigger":	true
			},
			"num_of_owned_factories":	{
				"description":	"check the number of factories in owned states excluding any gained or lost through trade, relations, modifiers etc.",
				"is_trigger":	true
			},
			"total_equipment_produced_suicide":	{
				"description":	"Total produced equipment of typesuicide"
			},
			"num_of_military_factories":	{
				"description":	"check amount of military factories",
				"is_trigger":	true
			},
			"num_of_civilian_factories":	{
				"description":	"check amount of civilian factories",
				"is_trigger":	true
			},
			"num_of_naval_factories":	{
				"description":	"check amount of naval factories",
				"is_trigger":	true
			},
			"foreign_manpower":	{
				"description":	"check the amount of foreign garrison manpower we have",
				"is_trigger":	true
			},
			"has_manpower":	{
				"description":	"check amount of manpower",
				"is_trigger":	true
			},
			"num_of_available_military_factories":	{
				"description":	"check amount of available military factories",
				"is_trigger":	true
			},
			"num_of_available_naval_factories":	{
				"description":	"check amount of available naval factories",
				"is_trigger":	true
			},
			"num_of_available_civilian_factories":	{
				"description":	"check amount of available civilian factories",
				"is_trigger":	true
			},
			"total_equipment_produced_sam_missile":	{
				"description":	"Total produced equipment of typesam_missile"
			},
			"political_power_daily":	{
				"description":	"Checks if daily political power increase is more or less that specified value \n political_power_daily > 1.5",
				"is_trigger":	true
			},
			"has_casualties_war_support":	{
				"description":	"check value of casualties malus to war support 0-1: Example has_casualties_war_support < 0.1",
				"is_trigger":	true
			},
			"has_convoys_war_support":	{
				"description":	"check value of convoys sunk malus to war support 0-1: Example has_convoys_war_support < 0.1",
				"is_trigger":	true
			},
			"land_doctrine_level":	{
				"description":	"checks researched land doctrine level",
				"is_trigger":	true
			},
			"casualties":	{
				"description":	"Check the amount of casualties a country has suffered in all of it's wars",
				"is_trigger":	true
			},
			"num_of_factories":	{
				"description":	"Check amount of available factories (excluding temporary sources like trade and lend-lease)\nExample:\nGER = { num_of_factories < 50 }",
				"is_trigger":	true
			},
			"num_of_controlled_states":	{
				"description":	"check amount of controlled stats",
				"is_trigger":	true
			},
			"has_added_tension_amount":	{
				"description":	"Compare if the country has added above or below the specified ammount of tension",
				"is_trigger":	true
			},
			"total_equipment_produced_screen_ship":	{
				"description":	"Total produced equipment of typescreen_ship"
			},
			"ai_irrationality":	{
				"description":	"check the ai irrationality value",
				"is_trigger":	true
			},
			"ai_strategy_antagonize":	{
				"description":	"ai strategy value antagonize against country. Example: GER.ai_strategy_antagonize@ENG"
			},
			"num_divisions":	{
				"description":	"Will compare towards the amount of divisions a country has control over, if strength matters use has_army_size.",
				"is_trigger":	true
			},
			"original_research_slots":	{
				"description":	"check number of research slots at start of game",
				"is_trigger":	true
			},
			"ai_wants_divisions":	{
				"description":	"Will compare towards the amount of divisions an ai wants to have.",
				"is_trigger":	true
			},
			"alliance_strength_ratio":	{
				"description":	"Compares the estimated army strength between the scope country, his allies and his enemies.",
				"is_trigger":	true
			},
			"num_faction_members":	{
				"description":	"Compares the number of members in the faction for the current country. \n Example: num_faction_members > 10",
				"is_trigger":	true
			},
			"total_constructed_gun_emplacement":	{
				"description":	"Total constructions of gun_emplacement"
			},
			"enemies_strength_ratio":	{
				"description":	"Compares the estimated army strength between the scope country and all its enemies",
				"is_trigger":	true
			},
			"compare_autonomy_progress_ratio":	{
				"description":	"check if autonomy progress ratio is higher than value, example:\ncompare_autonomy_progress_ratio > 0.5",
				"is_trigger":	true
			},
			"num_tech_sharing_groups":	{
				"description":	"checks how many groups a nation is a member of",
				"is_trigger":	true
			},
			"ai_strategy_invade":	{
				"description":	"ai strategy value invade against country. Example: GER.ai_strategy_invade@ENG"
			},
			"num_occupied_states":	{
				"description":	"check the number of states occupied by nation",
				"is_trigger":	true
			},
			"amount_research_slots":	{
				"description":	"check number of research current research slots \n amount_research_slots > 2",
				"is_trigger":	true
			},
			"manpower_per_military_factory":	{
				"description":	"Number of available manpower per factory the country has. Excluding dockyards.\nmanpower_per_military_factory < 1000",
				"is_trigger":	true
			},
			"has_stability":	{
				"description":	"check value of stability 0-1: Example has_stability < 0.6",
				"is_trigger":	true
			},
			"has_war_support":	{
				"description":	"check value of war_support 0-1: Example has_war_support < 0.6",
				"is_trigger":	true
			},
			"total_equipment_produced_infantry":	{
				"description":	"Total produced equipment of typeinfantry"
			},
			"num_of_civilian_factories_available_for_projects":	{
				"description":	"check amount of civilian factories available for a new project to use",
				"is_trigger":	true
			},
			"political_power_growth":	{
				"description":	"Check the value of political power daily growth.Exacmple: political_power_growth > 0",
				"is_trigger":	true
			},
			"amount_manpower_in_deployment_queue":	{
				"description":	"Checks for amount manpower currently in deploymentview. amount_manpower_in_training > 10",
				"is_trigger":	true
			},
			"pc_total_score":	{
				"description":	"Checks country's total peace conference score. Only usable if the country is on the winning side.\nExample:\nCZE = { pc_total_score > 400 }",
				"is_trigger":	true
			},
			"ai_strategy_conquer":	{
				"description":	"ai strategy value conquer against country. Example: GER.ai_strategy_conquer@ENG"
			},
			"pc_current_score":	{
				"description":	"Checks country's total peace conference score. Only usable if the country is on the winning side.\nExample:\nCZE = { pc_current_score > 400 }",
				"is_trigger":	true
			},
			"has_legitimacy":	{
				"description":	"Check scope country legitimacy 0-100: Example has_legitimacy < 60",
				"is_trigger":	true
			},
			"casualties_k":	{
				"description":	"Check the amount of casualties in thousands a country has suffered in all of it's wars",
				"is_trigger":	true
			},
			"fuel_ratio":	{
				"description":	"Compares the fuel ratio to a variable.\nExample: fuel_ratio > 0.5",
				"is_trigger":	true
			},
			"days_since_capitulated":	{
				"description":	"Checks the number of days since the country last capitulated, even if it is no longer capitulated.\n\tIf it has not ever capitulated, the value is extremely large.\n\tIt is recommended to combine this with has_capitulated = yes when you specifically want to ignore non-active capitulations.\nExamples:\n\tHOL = { has_capitulated = yes days_since_capitulated > 60 } # The Netherlands has been capitulated for more than two months\n\tFRA = { has_capitulated = yes days_since_capitulated < 21 } # France has capitulated sometime within the past three weeks\n\tGER = { OR = { has_capitulated = no days_since_capitulated > 14 } } # Germany is not both actively and recently capitulated\n",
				"is_trigger":	true
			},
			"mine_threat":	{
				"description":	"A trigger to check how dangerous enemy mines are for a country. Controlled by NAVAL_MINE_DANGER defines. Returns a value between 0 and 1. Example mine_threat > 0.5 ",
				"is_trigger":	true
			},
			"convoy_threat":	{
				"description":	"A trigger to check convoy threat for a country. Controlled by NAVAL_CONVOY_DANGER defines. Returns a value between 0 and 1. Example convoy_threat > 0.5 ",
				"is_trigger":	true
			},
			"longest_war_length":	{
				"description":	"Check number of months the country has been at war",
				"is_trigger":	true
			},
			"decryption_progress":	{
				"description":	"checks decryption ratio against a country. Example: \ndecryption_progress = { \n target = GER\n value > 0.5\n} \n#or decryption_progress@GER as variable\n",
				"is_trigger":	true
			},
			"garrison_manpower_need":	{
				"description":	"check the amount of manpower needed by garrisons",
				"is_trigger":	true
			},
			"num_operative_slots":	{
				"description":	"Checks the number of available operative slots a country has.\nIf this differs from the number of operative, this does not mean the country can recruit an operative, but that it will eventually be able to.",
				"is_trigger":	true
			},
			"num_free_operative_slots":	{
				"description":	"Checks the number of operative a country can recruit right now.\nNote that this is not necessarily greater than zero if num_operative_slots returned a number greater than the number of operative.",
				"is_trigger":	true
			},
			"num_fake_intel_divisions":	{
				"description":	"Will compare towards the amount of fake intel divisions a country has control over. .",
				"is_trigger":	true
			},
			"has_collaboration":	{
				"description":	"checks the collaboration in a target country with our currently scoped country. Example: \nhas_collaboration = { \n target = GER\n value > 0.5\n} \n#or has_collaboration@GER as variable\n",
				"is_trigger":	true
			},
			"num_researched_technologies":	{
				"description":	"Number of researched technologies",
				"is_trigger":	true
			},
			"network_national_coverage":	{
				"description":	"checks network national coverage you have over a country. Example: \nnetwork_national_coverage = { \n target = GER\n value > 0.5\n} \n",
				"is_trigger":	true
			},
			"num_nukes_being_dropped":	{
				"description":	"total number of nukes that are currently ready to be dropped",
				"is_trigger":	true
			},
			"num_nukes_left_to_drop":	{
				"description":	"number of nukes left to drop during this game tick (only useful in-between nuke drops, like in on_nuke_drop on-action, for example)",
				"is_trigger":	true
			},
			"ai_strategy_befriend":	{
				"description":	"ai strategy value befriend against country. Example: GER.ai_strategy_befriend@ENG"
			},
			"ai_strategy_consider_weak":	{
				"description":	"ai strategy value consider_weak against country. Example: GER.ai_strategy_consider_weak@ENG"
			},
			"ai_strategy_protect":	{
				"description":	"ai strategy value protect against country. Example: GER.ai_strategy_protect@ENG"
			},
			"ai_strategy_contain":	{
				"description":	"ai strategy value contain against country. Example: GER.ai_strategy_contain@ENG"
			},
			"ai_strategy_support":	{
				"description":	"ai strategy value support against country. Example: GER.ai_strategy_support@ENG"
			},
			"ai_strategy_force_defend_ally_borders":	{
				"description":	"ai strategy value force_defend_ally_borders against country. Example: GER.ai_strategy_force_defend_ally_borders@ENG"
			},
			"ai_strategy_influence":	{
				"description":	"ai strategy value influence against country. Example: GER.ai_strategy_influence@ENG"
			},
			"total_equipment_produced_ballistic_missile":	{
				"description":	"Total produced equipment of typeballistic_missile"
			},
			"ai_strategy_ignore":	{
				"description":	"ai strategy value ignore against country. Example: GER.ai_strategy_ignore@ENG"
			},
			"ai_strategy_send_volunteers_desire":	{
				"description":	"ai strategy value send_volunteers_desire against country. Example: GER.ai_strategy_send_volunteers_desire@ENG"
			},
			"ai_strategy_occupation_policy":	{
				"description":	"ai strategy value occupation_policy against country. Example: GER.ai_strategy_occupation_policy@ENG"
			},
			"total_constructed_infrastructure":	{
				"description":	"Total constructions of infrastructure"
			},
			"ai_strategy_prepare_for_war":	{
				"description":	"ai strategy value prepare_for_war against country. Example: GER.ai_strategy_prepare_for_war@ENG"
			},
			"ai_strategy_decrypt_target":	{
				"description":	"ai strategy value decrypt_target against country. Example: GER.ai_strategy_decrypt_target@ENG"
			},
			"ai_strategy_activate_crypto":	{
				"description":	"ai strategy value activate_crypto against country. Example: GER.ai_strategy_activate_crypto@ENG"
			},
			"ai_attitude_neutral_weight":	{
				"description":	"weight for an ai attitude attitude_neutralagainst country. Example: GER.ai_attitude_neutral_weight@ENG"
			},
			"total_equipment_produced_submarine":	{
				"description":	"Total produced equipment of typesubmarine"
			},
			"ai_attitude_hostile_weight":	{
				"description":	"weight for an ai attitude attitude_hostileagainst country. Example: GER.ai_attitude_hostile_weight@ENG"
			},
			"ai_attitude_friendly_weight":	{
				"description":	"weight for an ai attitude attitude_friendlyagainst country. Example: GER.ai_attitude_friendly_weight@ENG"
			},
			"ai_attitude_outraged_weight":	{
				"description":	"weight for an ai attitude attitude_outragedagainst country. Example: GER.ai_attitude_outraged_weight@ENG"
			},
			"ai_attitude_threatened_weight":	{
				"description":	"weight for an ai attitude attitude_threatenedagainst country. Example: GER.ai_attitude_threatened_weight@ENG"
			},
			"ai_attitude_allied_weight":	{
				"description":	"weight for an ai attitude attitude_alliedagainst country. Example: GER.ai_attitude_allied_weight@ENG"
			},
			"total_equipment_produced_fighter":	{
				"description":	"Total produced equipment of typefighter"
			},
			"total_constructed_military_factory":	{
				"description":	"Total constructions of military_factory"
			},
			"total_constructed_dockyard":	{
				"description":	"Total constructions of dockyard"
			},
			"total_constructed_port":	{
				"description":	"Total constructions of port"
			},
			"total_constructed_air_base":	{
				"description":	"Total constructions of air_base"
			},
			"total_constructed_rocket_site":	{
				"description":	"Total constructions of rocket_site"
			},
			"total_constructed_radar":	{
				"description":	"Total constructions of radar"
			},
			"total_constructed_anti_air":	{
				"description":	"Total constructions of anti_air"
			},
			"total_constructed_refinery":	{
				"description":	"Total constructions of refinery"
			},
			"total_constructed_fuel_silo":	{
				"description":	"Total constructions of fuel_silo"
			},
			"total_constructed_supply_node":	{
				"description":	"Total constructions of supply_node"
			},
			"total_constructed_nuclear_reactor":	{
				"description":	"Total constructions of nuclear_reactor"
			},
			"total_constructed_land_fort":	{
				"description":	"Total constructions of land_fort"
			},
			"total_constructed_naval_fort":	{
				"description":	"Total constructions of naval_fort"
			},
			"total_equipment_produced_convoy":	{
				"description":	"Total produced equipment of typeconvoy"
			},
			"total_equipment_produced_railway_gun":	{
				"description":	"Total produced equipment of typerailway_gun"
			},
			"total_equipment_produced_armor":	{
				"description":	"Total produced equipment of typearmor"
			},
			"total_equipment_produced_land_cruiser":	{
				"description":	"Total produced equipment of typeland_cruiser"
			},
			"total_equipment_produced_motorized":	{
				"description":	"Total produced equipment of typemotorized"
			},
			"total_equipment_produced_heavy_fighter":	{
				"description":	"Total produced equipment of typeheavy_fighter"
			},
			"total_equipment_produced_tactical_bomber":	{
				"description":	"Total produced equipment of typetactical_bomber"
			},
			"total_equipment_produced_cas":	{
				"description":	"Total produced equipment of typecas"
			},
			"total_equipment_produced_naval_bomber":	{
				"description":	"Total produced equipment of typenaval_bomber"
			},
			"total_equipment_produced_missile":	{
				"description":	"Total produced equipment of typemissile"
			},
			"total_equipment_produced_emplacement_gun_ammo":	{
				"description":	"Total produced equipment of typeemplacement_gun_ammo"
			},
			"total_equipment_produced_nuclear_missile":	{
				"description":	"Total produced equipment of typenuclear_missile"
			},
			"total_equipment_produced_scout_plane":	{
				"description":	"Total produced equipment of typescout_plane"
			},
			"total_equipment_produced_maritime_patrol_plane":	{
				"description":	"Total produced equipment of typemaritime_patrol_plane"
			},
			"total_equipment_produced_air_transport":	{
				"description":	"Total produced equipment of typeair_transport"
			},
			"total_equipment_produced_missile_launcher":	{
				"description":	"Total produced equipment of typemissile_launcher"
			},
			"total_equipment_produced_":	{
				"description":	"Total produced equipment of type"
			},
			"total_equipment_produced_amphibious":	{
				"description":	"Total produced equipment of typeamphibious"
			},
			"total_equipment_produced_anti_air":	{
				"description":	"Total produced equipment of typeanti_air"
			},
			"total_equipment_produced_anti_tank":	{
				"description":	"Total produced equipment of typeanti_tank"
			},
			"total_equipment_produced_rocket":	{
				"description":	"Total produced equipment of typerocket"
			}
		},
		"state":	{
			"arms_factory_level":	{
				"description":	"military factory level in the state"
			},
			"damaged_building_level":	{
				"description":	"damaged building level of a building with type, uses target as building type. example damaged_building_level@arms_factory"
			},
			"modifier":	{
				"description":	"value of modifier stored in this state, uses target as modifier token, example: 123.modifier@local_manpower"
			},
			"industrial_complex_level":	{
				"description":	"civilian factor level in the state"
			},
			"infrastructure_level":	{
				"description":	"infrastructure level in the state"
			},
			"days_since_last_strategic_bombing":	{
				"description":	"Checks the days since last strategic bombing.\ndays_since_last_strategic_bombing < 10\n",
				"is_trigger":	true
			},
			"distance_to":	{
				"description":	"distance to another state, uses target as another state. example: 123.distance_to@124"
			},
			"non_damaged_building_level":	{
				"description":	"non damaged building level of a building with type, uses target as building type. example non_damaged_building_level@arms_factory"
			},
			"building_level":	{
				"description":	"building level of a building with type, uses target as building type. example building_level@arms_factory"
			},
			"core_countries":	{
				"description":	"countries that cores the state"
			},
			"resource":	{
				"description":	"resources produced in state. example resource@steel"
			},
			"owner":	{
				"description":	"owner of the state"
			},
			"controller":	{
				"description":	"controller of the state"
			},
			"resistance":	{
				"description":	"Compares the current resistance level of a state to a value. Example: resistance > 50 ",
				"is_trigger":	true
			},
			"state_population":	{
				"description":	"check the population in the state",
				"is_trigger":	true
			},
			"state_strategic_value":	{
				"description":	"Checks for state strategic value",
				"is_trigger":	true
			},
			"state_and_terrain_strategic_value":	{
				"description":	"Checks for state strategic value",
				"is_trigger":	true
			},
			"state_population_k":	{
				"description":	"check the population in the state in thousands (use to avoid variable overflows)",
				"is_trigger":	true
			},
			"compliance":	{
				"description":	"Compares the current compliance level of a state to a value. Example: compliance > 50 ",
				"is_trigger":	true
			},
			"compliance_speed":	{
				"description":	"Compares the current compliance speed of a state to a value. Example: compliance_speed > 50 ",
				"is_trigger":	true
			},
			"resistance_speed":	{
				"description":	"Compares the current resistance speed of a state to a value. Example: resistance_speed > 50 ",
				"is_trigger":	true
			},
			"resistance_target":	{
				"description":	"Compares the target resistance level of a state to a value. Example: resistance_target > 50 ",
				"is_trigger":	true
			}
		},
		"unit_leader":	{
			"num_units":	{
				"description":	"number of units controlled by leader"
			},
			"num_units_with_type":	{
				"description":	"number of units with dominant type controlled by leader, dominant type is defined in target. example: num_units_with_type@light_armor"
			},
			"has_orders_group":	{
				"description":	"1 if leader has orders group, zero otherwise"
			},
			"num_units_in_state":	{
				"description":	"number of units controlled by leader in state, state is in target. example num_units_in_state@123"
			},
			"num_rocket":	{
				"description":	"number of units with rocket dominant type"
			},
			"num_equipment":	{
				"description":	"number of equipment in army of a leader, equipment type token is defined in target. example num_equipment@infantry_equipment"
			},
			"num_max_traits":	{
				"description":	"number of maximum assignable traits a leader can have"
			},
			"num_cavalry":	{
				"description":	"number of units with cavalry dominant type"
			},
			"avg_units_acclimation":	{
				"description":	"average unit acclimatization for a specific climate, acclimatization type is defined in target. example avg_units_acclimation@cold_climate"
			},
			"num_artillery":	{
				"description":	"number of units with artillery dominant type"
			},
			"num_target_equipment":	{
				"description":	"number of equipment required in army of a leader, equipment type token is defined in target. example num_target_equipment@infantry_equipment"
			},
			"num_units_defensive_combats_on":	{
				"description":	"number of units that are defensively fighting on a terrain, terrain type is defined as target. example: num_units_defensive_combats_on@plains"
			},
			"num_ships_with_type":	{
				"description":	"number of ships controlled by leader, ship type is defined in target. example num_ships_with_type@carrier"
			},
			"own_capture_chance_factor":	{
				"description":	"The chance this operative has to be captured, taking into account the country it is operating for and the country it is operating against."
			},
			"num_ships":	{
				"description":	"number of ships controlled by leader"
			},
			"logistics_level":	{
				"description":	"logistics level of the leader"
			},
			"num_infantry":	{
				"description":	"number of units with infantry dominant type"
			},
			"num_armored":	{
				"description":	"number of units with armored dominant type"
			},
			"num_battalions":	{
				"description":	"number of battalions"
			},
			"num_special":	{
				"description":	"number of units with special dominant type"
			},
			"num_mechanized":	{
				"description":	"number of units with mechanized dominant type"
			},
			"attack_level":	{
				"description":	"attack level of the leader"
			},
			"num_personality_traits":	{
				"description":	"number of personality traits a leader has"
			},
			"num_motorized":	{
				"description":	"number of units with motorized dominant type"
			},
			"maneuvering_level":	{
				"description":	"maneuvering level of the leader"
			},
			"num_battalions_with_type":	{
				"description":	"number of battalions with sub unit type, sub unit type is defined in target. example: num_battalions_with_type@light_armor"
			},
			"own_harmed_time_factor":	{
				"description":	"The time factor applied to the status \"harmed\". Takes int accountthe country it is operating for and the country it is operating against."
			},
			"num_battle_plans":	{
				"description":	"number of battle plans of unit leader"
			},
			"avg_defensive_combat_status":	{
				"description":	"average progress of defensive combats"
			},
			"num_traits":	{
				"description":	"number of traits a leader has"
			},
			"num_status_traits":	{
				"description":	"number of status traits a leader has"
			},
			"defense_skill_level":	{
				"description":	"Compares defense skill level of a unit leader.\nExample: defense_skill_level > 5",
				"is_trigger":	true
			},
			"num_assigned_traits":	{
				"description":	"number of assigned traits the leader has"
			},
			"leader_modifier":	{
				"description":	"value of a modifier stored in leader modifier, modifier token is defined in target. example leader_modifier@navy_max_range"
			},
			"num_terrain_traits":	{
				"description":	"number of terrain traits a leader has"
			},
			"avg_unit_planning_ratio":	{
				"description":	"average planning ratio of all units"
			},
			"num_basic_traits":	{
				"description":	"number of basic traits a leader has"
			},
			"skill_level":	{
				"description":	"skill level of the leader"
			},
			"army_attack_level":	{
				"description":	"attack level of the leader"
			},
			"attack_skill_level":	{
				"description":	"Compares attack skill level of a unit leader.\nExample: attack_skill_level > 5",
				"is_trigger":	true
			},
			"army_defense_level":	{
				"description":	"defense level of the leader"
			},
			"defense_level":	{
				"description":	"defense level of the leader"
			},
			"planning_level":	{
				"description":	"planning level of the leader"
			},
			"avg_combat_status":	{
				"description":	"average progress of all combats"
			},
			"coordination_level":	{
				"description":	"coordination level of the leader"
			},
			"operation_state":	{
				"description":	"the state location the operative is assigned. 0 if it is not assigned to a state"
			},
			"average_stats":	{
				"description":	"average stats of unit leader"
			},
			"avg_offensive_combat_status":	{
				"description":	"average progress of offensive combats"
			},
			"operation_type":	{
				"description":	"returns the operation token the operative is assigned"
			},
			"sum_unit_terrain_modifier":	{
				"description":	"sum of terrain modifiers of each army's location, terrain type is defined in target. example: sum_unit_terrain_modifier@sickness_chance "
			},
			"unit_modifier":	{
				"description":	"value of a modifier stored in unit modifier, modifier token is defined in target. example unit_modifier@army_attack_factor"
			},
			"num_units_in_combat":	{
				"description":	"number of units current fighting"
			},
			"operation_country":	{
				"description":	"the country location the operative is assigned. 0 if it is not assigned to a country"
			},
			"num_units_defensive_combats":	{
				"description":	"number of units in defensive combats"
			},
			"num_units_on_climate":	{
				"description":	"number of units that are on an acclimatization required location, acclimatization type is defined in target. example num_units_on_climate@hot_climate"
			},
			"num_units_offensive_combats":	{
				"description":	"number of units in offensive combats"
			},
			"unit_ratio_ready_for_plan":	{
				"description":	"ratio of units that are ready for plan"
			},
			"num_units_crossing_river":	{
				"description":	"number of units currently passing through a river"
			},
			"num_units_offensive_combats_against":	{
				"description":	"number of units that are offensively fighting against a terrain, terrain type is defined as target. example: num_units_offensive_combats_against@plains"
			},
			"own_forced_into_hiding_time_factor":	{
				"description":	"The time factor applied to the status \"forced into hiding\". Takes into account the country it is operating for and the country it is operating against."
			},
			"skill":	{
				"description":	"compare leader skill levels",
				"is_trigger":	true
			},
			"intel_yield_factor_on_capture":	{
				"description":	"Rate at which intel is extracted from this operative by an enemy country."
			},
			"operative_captor":	{
				"description":	"returns the country tag that captured the operative"
			},
			"logistics_skill_level":	{
				"description":	"Compares logistics skill level of a unit leader.\nExample: logistics_skill_level > 5",
				"is_trigger":	true
			},
			"planning_skill_level":	{
				"description":	"Compares planning skill level of a unit leader.\nExample: planning_skill_level > 5",
				"is_trigger":	true
			}
		},
		"military_industrial_organization":	{
			"modifier":	{
				"description":	"Value of the modifier stored in the military industrial organization.\nex: modifier@military_industrial_organization_research_bonus"
			},
			"research_bonus":	{
				"description":	"Research bonus of the military industrial organization when assigned to a research slot"
			},
			"size":	{
				"description":	"Size of the military industrial organization"
			},
			"number_of_currently_assigned_tasks":	{
				"description":	"Number of tasks the military industrial organization is currently assigned to"
			},
			"funds":	{
				"description":	"Funds of the military industrial organization"
			},
			"max_task_capacity":	{
				"description":	"Maximum task capacity of the military industrial organization."
			},
			"number_of_unlocked_traits":	{
				"description":	"Number of unlocked traits of the military industrial organization."
			},
			"number_of_unused_trait_points":	{
				"description":	"Number of unused trait points of the military industrial organization"
			}
		},
		"special_project":	{
			"facility_state":	{
				"description":	"State that the project is researched in"
			},
			"facility_province_id":	{
				"description":	"The province that the project is researched in"
			},
			"scientist":	{
				"description":	"The scientist that researches the project"
			}
		}
	},
	"console_commands":	{
		"commands":	{
			"rendertype":	{
				"description":	"Reports what render backend is used"
			},
			"CrashReporter.SimulateCrash":	{
				"description":	"Simulates a crash (resulting in the game exiting)."
			},
			"CrashReporter.DeleteCrashData":	{
				"description":	"Delete local crash dumps older than X days."
			},
			"pops_account_login":	{
				"available_in_release_build":	false,
				"arguments":	["email", "password"],
				"description":	"Login to a POPS Account"
			},
			"pops_account_logout":	{
				"available_in_release_build":	false,
				"description":	"Login to a POPS Account"
			},
			"pops_account_status":	{
				"available_in_release_build":	false,
				"description":	"Show whether you are currently logged into POPS or not."
			},
			"test":	{
				"available_in_release_build":	false,
				"description":	"This is a placeholder command. Use it for your debug code if you need to quickly test something locally. Or copy and paste it to create a new console command."
			},
			"toggle_silhouette_portraits":	{
				"available_in_release_build":	false,
				"description":	"Enables and disables silhouette portraits."
			},
			"add_mines":	{
				"arguments":	["<Amount of naval mines>"],
				"aliases":	["mines"],
				"description":	"Add naval mines to selected region(s)"
			},
			"release":	{
				"arguments":	["Tag of a country to be released"],
				"aliases":	["rls"],
				"description":	"Released a given country"
			},
			"map_icon_reload_type":	{
				"available_in_release_build":	false,
				"arguments":	["<NUM> or <help>"],
				"description":	"Specify a map icon type to reload"
			},
			"randomlog":	{
				"available_in_release_build":	false,
				"aliases":	["rlog"],
				"description":	"Toggles the random logs."
			},
			"oos_dump":	{
				"available_in_release_build":	false,
				"aliases":	["oosdump"],
				"description":	"Generates an oos dump on demand for local client."
			},
			"acclimatization":	{
				"arguments":	["<climate_name>", "<value 0-100>"],
				"aliases":	["acc"],
				"description":	"Sets the acclimatization on a division(s)."
			},
			"combattest":	{
				"available_in_release_build":	false,
				"description":	"combat simulation process"
			},
			"navalcombatlog":	{
				"available_in_release_build":	false,
				"description":	"logs naval combat"
			},
			"debug":	{
				"description":	"Toggle debug mode on/off."
			},
			"deironman":	{
				"available_in_release_build":	false,
				"description":	"Removes Ironman status from current game."
			},
			"show_xp_gain":	{
				"aliases":	["xp_gain"],
				"description":	"Show XP gain information."
			},
			"whitepeace":	{
				"arguments":	["<country tags>"],
				"aliases":	["wp"],
				"description":	"White peace with the specified countries."
			},
			"debug_orders_tree":	{
				"available_in_release_build":	false,
				"aliases":	["dot"],
				"description":	"Print out debug about orders chain."
			},
			"testtool":	{
				"available_in_release_build":	false,
				"description":	"Testing tool."
			},
			"analyzetheatres":	{
				"aliases":	["anth"],
				"description":	"Analyze theatres for errors."
			},
			"debug_front_sections":	{
				"arguments":	["<Theatre index>", "<Front index>", "<Section index>"],
				"aliases":	["dbg_fs"],
				"description":	"Visual debug of theatres, fronts and sections."
			},
			"rebuildfronts":	{
				"available_in_release_build":	false,
				"arguments":	["<Country tag>"],
				"description":	"Rebuild fronts."
			},
			"debug_unit_controller_weights":	{
				"arguments":	["<weight token>"],
				"aliases":	["dbg_ucw"],
				"description":	"Visual debug of unit controller weights. Enable track_unit_controller_weights first!"
			},
			"track_unit_controller_weights":	{
				"aliases":	["track_ucw"],
				"description":	"Will start tracking unit controller weights for current country, should be used together with debug_unit_controller_weights to view the data."
			},
			"debug_force_capitulate":	{
				"arguments":	["<tag>"],
				"aliases":	["dfc"],
				"description":	"forces capitulation of a country on next daily tick"
			},
			"massconquer":	{
				"available_in_release_build":	false,
				"aliases":	["massc"],
				"description":	"Mass conquer tool."
			},
			"deleteallunits":	{
				"aliases":	["delall"],
				"description":	"Delete all armies and fleets of the specified countries."
			},
			"deleteallunitsbut":	{
				"aliases":	["delallbut"],
				"description":	"Delete all armies and fleets of ALL countries, except specified one."
			},
			"aircombat":	{
				"available_in_release_build":	false,
				"arguments":	["<scenario name>", "<result name>", "<province id>", "<state id with airbase>", "<state id with airbase>", "<equipment type>", "<equipment type>", "[equipment creator country]", "[equipment creator country]"],
				"aliases":	["airc"],
				"description":	"Spawns an air combat in desired location."
			},
			"teleport":	{
				"arguments":	["<province_id>"],
				"aliases":	["tp"],
				"description":	"Teleports selected armies or ships to the specified province"
			},
			"theatersrebuild":	{
				"available_in_release_build":	false,
				"aliases":	["trebuild"],
				"description":	"Rebuilds all theatres in the world. All orders will be cleaned."
			},
			"test_naval_move_danger":	{
				"available_in_release_build":	false,
				"arguments":	["<from region id>", "<to region id>"],
				"description":	"Tests if path between two regions is blocked for surface warships"
			},
			"highlight_encirclements":	{
				"description":	"Toggle highlighting of detected encirclements"
			},
			"simplified_transport":	{
				"description":	"Toggle simplified naval transports"
			},
			"fronts":	{
				"description":	"Toggle visibility of the foreign fronts"
			},
			"traderoutes":	{
				"description":	"Toggle visibility of trade routes"
			},
			"railroads":	{
				"description":	"Toggle rendering of railroads"
			},
			"debug_norender":	{
				"description":	"Toggle rendering of map"
			},
			"debug_tactics":	{
				"description":	"Toggle visibility of debug tooltip for tactics"
			},
			"show_ships":	{
				"description":	"Toggle always showing of player ships"
			},
			"show_enemy_ships":	{
				"description":	"Toggle always showing of enemy ships"
			},
			"allowdiplo":	{
				"aliases":	["adiplo", "nocb"],
				"description":	"Allows to use all diplomatic actions for no matter the rules."
			},
			"allowtraits":	{
				"description":	"Allows to learn all traits."
			},
			"allowideas":	{
				"description":	"Allows to learn all ideas."
			},
			"allowoperations":	{
				"description":	"Allows to execute all operations."
			},
			"operation_test_phase_selection":	{
				"arguments":	["Operation ID", "Target Tag"],
				"description":	"Test an operation phase."
			},
			"operation_debug":	{
				"arguments":	["Operation ID", "Target Tag"],
				"description":	"Allows to execute all operations."
			},
			"operation_start":	{
				"arguments":	["Operation ID", "Target Tag"],
				"description":	"Allows to execute all operations."
			},
			"nukes":	{
				"arguments":	["<count>"],
				"aliases":	["nuke"],
				"description":	"add nukes"
			},
			"launch_nuke":	{
				"arguments":	["[Nuke Type]", "<Province ID>", "..."],
				"aliases":	["ln"],
				"description":	"Launch nuke to any specified province(s) without checking any conditions."
			},
			"armageddon":	{
				"description":	"Deliver a thermonuclear strike to every state in the game."
			},
			"instantevents":	{
				"description":	"Ignores event mth s"
			},
			"rebuildlayers":	{
				"description":	"Reload mapmodes."
			},
			"deltat":	{
				"arguments":	["<speed factor>"],
				"description":	"control animation speeds"
			},
			"building_health":	{
				"arguments":	["<building type>", "<state or prov id>", "<building level>", "<health to add>"],
				"aliases":	["bhealth"],
				"description":	"Changes specified building health"
			},
			"instantconstruction":	{
				"aliases":	["ic"],
				"description":	"Toggles instant construction cheat."
			},
			"instantshiprefit":	{
				"aliases":	["isr"],
				"description":	"Toggles instant ship refitting cheat."
			},
			"instanttraining":	{
				"aliases":	["it"],
				"description":	"Toggles instant army training cheat."
			},
			"war_relations":	{
				"arguments":	["<tag>"],
				"description":	"Prints war relations info"
			},
			"add_temporary_buff":	{
				"arguments":	["<buff_index>"],
				"description":	"adds temporary buff to selected units"
			},
			"list_temporary_buffs":	{
				"description":	"lists all temporary buffs on selected units"
			},
			"unit_stats":	{
				"description":	"lists stats of selected units"
			},
			"trigger_ability":	{
				"arguments":	["<ability_name>"],
				"description":	"triggers an ability"
			},
			"profile":	{
				"arguments":	["<on> <off> <print> <clear>"],
				"description":	"profile options"
			},
			"nomapicons":	{
				"description":	"Toggles map icons."
			},
			"nopausetext":	{
				"description":	"Toggles the pausebanner for nicer screenshots."
			},
			"time":	{
				"description":	"What time is it?"
			},
			"combatsound":	{
				"description":	"How often does the combat view give a random sound? 0-50"
			},
			"Audio.PlayEffect":	{
				"arguments":	["effect_name"],
				"description":	"Play the specified sound effect"
			},
			"morehumans":	{
				"arguments":	["num"],
				"aliases":	["humans"],
				"description":	"Adds more humans"
			},
			"morehumanswithcountries":	{
				"arguments":	["num"],
				"description":	"Adds more humans and assigns them to the highest scoring countries available"
			},
			"window":	{
				"arguments":	["Arguments: open/close", "window gui name"],
				"aliases":	["wnd"],
				"description":	"Opens or closes the specified window"
			},
			"reloadinterface":	{
				"description":	"Reloads the entire interface"
			},
			"reloadtechnologies":	{
				"description":	"Reloads the technology database"
			},
			"updateequipments":	{
				"description":	"Updates the equipment database"
			},
			"updatesubunits":	{
				"description":	"Updates the subunit database"
			},
			"reloadoob":	{
				"arguments":	["<Target Country Tag>"],
				"description":	"Reloads OOBs"
			},
			"createarmygroup":	{
				"description":	"Create field marshal group from selected groups"
			},
			"combat_analyzer":	{
				"arguments":	["<TAG1>", "<TAG2>", "<OOB1>", "<OOB2>", "<num runs> OPTIONAL", "<num days> OPTIONAL"],
				"description":	"Runs a combat between the 2 OOBs owned by the two TAGs either until done or for the specified number of days. \nUsing <num runs> the combat will be run multiple times and the averages are printed"
			},
			"reloadfx":	{
				"arguments":	["Arguments: map/mapname/postfx or *.fx filename"],
				"description":	"Reloads the shader"
			},
			"update_loc":	{
				"arguments":	["localization tag"],
				"description":	"Updates the localization tag file"
			},
			"event":	{
				"arguments":	["event id", "<Target Country Tag>"],
				"description":	"Executes an event"
			},
			"research":	{
				"arguments":	["<slot id> or \"all\""],
				"description":	"Researches an technology from research slot or all."
			},
			"research_on_icon_click":	{
				"aliases":	["roic"],
				"description":	"Research a technology when clicking on technology tree icon"
			},
			"research_fast":	{
				"description":	"Base cost of every technology is set to 1 RP"
			},
			"Agency.Instant":	{
				"description":	"Activates Operation.Instant, IntelNetwork.Instant, Agency.InstantSlotUnlock and Agency.Autocomplete"
			},
			"add_autonomy":	{
		},
			"annex":	{
				"arguments":	["<Target Country Tag>"],
				"description":	"Begin annex/annexes the specified tag"
			},
			"puppet":	{
				"arguments":	["<Target Country Tag>"],
				"description":	"Puppets the specified tag"
			},
			"focus_count":	{
				"arguments":	["<Target Country Tag>"],
				"description":	"Counts how many focuses a tag has. For science"
			},
			"no_wargoal":	{
				"description":	"No need to have a wargoal for declaring war"
			},
			"instant_wargoal":	{
				"description":	"Generation of wargoals are instant"
			},
			"testrtti":	{
				"arguments":	["<test case>"],
				"description":	"Tests performance for RTTI"
			},
			"testevent":	{
				"arguments":	["<Event ID>", "<Character ID>"],
				"description":	"Tests an event without triggering it"
			},
			"manpower":	{
				"arguments":	["<Amount>"],
				"description":	"Adds manpower to player"
			},
			"add_opinion":	{
				"arguments":	["<Country tag>"],
				"description":	"Add opinion to/from tag"
			},
			"tag":	{
				"arguments":	["<Country tag>"],
				"description":	"Switch tag to another country"
			},
			"resign":	{
				"description":	"Resign from the game"
			},
			"add_diplo":	{
				"description":	"Adds diplomatic entroute"
			},
			"build_war_blobs":	{
				"description":	"Prints a list of all your wars"
			},
			"PrintSynchStuff":	{
				"description":	"Prints random count and seed"
			},
			"SetRandomCount":	{
				"description":	"Sets the randomcount to 0 or arg"
			},
			"observe":	{
				"aliases":	["spectator"],
				"description":	"Switches to play no country at all, and no longer shows messages or pauses the game"
			},
			"lock_air_det":	{
				"arguments":	["<CountryTag>", "<Detection> (0.0-1.0) OPTIONAL"],
				"description":	"Locks Air Detection for a country, omit detection value to reset"
			},
			"lock_air_eff":	{
				"arguments":	["<CountryTag>", "<Efficiency> (0.0-1.0) OPTIONAL"],
				"description":	"Locks Air Efficiency for a country, omit efficiency value to reset"
			},
			"ai_trace":	{
				"available_in_release_build":	false,
				"description":	"Toggles the AI Trace window"
			},
			"ai":	{
				"description":	"Toggles the AI on or off"
			},
			"enable_ai":	{
				"description":	"Enables the AI"
			},
			"disable_ai":	{
				"description":	"Disables the AI"
			},
			"human_ai":	{
				"description":	"Toggles AI for Human countries"
			},
			"ai_invasion":	{
				"description":	"Toggles AI AI naval invasions"
			},
			"ai_accept":	{
				"aliases":	["yesman"],
				"description":	"Toggles AI always accept diplomacy"
			},
			"fow":	{
				"arguments":	["<Province ID> OPTIONAL"],
				"aliases":	["debug_fow"],
				"description":	"Turns off fog of war in a province or in general"
			},
			"collision":	{
				"aliases":	["debug_collision"],
				"description":	"Toggles debug display of normals/bounding boxes/collision"
			},
			"savegame":	{
				"aliases":	["save"],
				"description":	"Creates a save file."
			},
			"savecheck":	{
				"description":	"Makes a savegame (Test_01), loads the savegame, makes a new savegame (Test_02). Those savegames should look the same."
			},
			"IP":	{
				"description":	"Shows your IP"
			},
			"nudge":	{
				"description":	"Go to the nudge tool"
			},
			"mapmode":	{
				"arguments":	["Mapmode type (int)"],
				"description":	"Change mapmode."
			},
			"fullscreen":	{
				"description":	"Toggles fullscreen"
			},
			"prices":	{
				"description":	"Price Info"
			},
			"add_core":	{
				"arguments":	["<Province ID>"],
				"description":	"Add core"
			},
			"remove_core":	{
				"arguments":	["<Province ID>"],
				"description":	"Remove core"
			},
			"debug_zoom":	{
				"description":	"Zooms in the game"
			},
			"debug_types":	{
				"available_in_release_build":	false,
				"description":	"Will print the data type for all dynamic reference objects. Can only be used if using RTTI."
			},
			"debug_show_event_ID":	{
				"description":	"Shows event ID"
			},
			"debug_commands":	{
				"available_in_release_build":	false,
				"description":	"Printing commandcount to message.log"
			},
			"debug_events":	{
				"description":	"Start Counting events"
			},
			"dump_garrison_templates":	{
				"description":	"Dump garrison templates to game log"
			},
			"debug_dumpevents":	{
				"description":	"Dump Event data to game log"
			},
			"dump_cached_random_logs":	{
				"description":	"dumps cached random logs"
			},
			"debug_diploactions":	{
				"available_in_release_build":	false,
				"description":	"Start Counting diplomatic actions"
			},
			"debug_dumpdiploactions":	{
				"available_in_release_build":	false,
				"description":	"Dump diplomatic action data to game log"
			},
			"debug_checkportraitssanity":	{
				"description":	"Analyse all characters' portraits and write failures in error log"
			},
			"debug_assert":	{
				"available_in_release_build":	false,
				"description":	"Toggles asserts on/off"
			},
			"debug_smooth":	{
				"description":	"Toggle framesmoothing"
			},
			"debug_nomouse":	{
				"description":	"Toggles mouse scrollwheel on/off"
			},
			"debug_terrain":	{
				"description":	"Toggles Terrain on/off"
			},
			"debug_cities":	{
				"description":	"Toggles Cities painting mode on/off"
			},
			"debug_water":	{
				"description":	"Toggles Water on/off"
			},
			"debug_fronts":	{
				"available_in_release_build":	false,
				"description":	"Toggles interpolated fronts debug"
			},
			"history_logger":	{
				"description":	"Toggle history logger"
			},
			"instant_prepare":	{
				"description":	"Instantly prepares naval invasions"
			},
			"debug_off_front_snap":	{
				"available_in_release_build":	false,
				"aliases":	["dbg_fsnap"],
				"description":	"Toggles offensive fronts snapping debug"
			},
			"debug_borders":	{
				"description":	"Toggles Borders on/off"
			},
			"debug_trees":	{
				"description":	"Toggles Trees on/off"
			},
			"debug_rivers":	{
				"description":	"Toggles Rivers on/off"
			},
			"debug_postfx":	{
				"description":	"Toggles PostFX on/off"
			},
			"debug_sky":	{
				"description":	"Toggles Sky on/off"
			},
			"debug_bloom":	{
				"description":	"Toggles Bloom on/off"
			},
			"debug_tooltip":	{
				"description":	"Toggles Tooltips on/off"
			},
			"flagsoutput":	{
				"arguments":	["<path>"],
				"description":	"Creates texture atlas files from memory."
			},
			"cityreload":	{
				"description":	"Reloads the cities"
			},
			"error":	{
				"description":	"Show errors in log"
			},
			"version":	{
				"description":	"Show current game version"
			},
			"debug_nogui":	{
				"description":	"Toggles GUI on/off"
			},
			"debug_lockcamera":	{
				"description":	"Toggles Camera locked on/off"
			},
			"debug_lines":	{
				"available_in_release_build":	false,
				"description":	"Toggles Debuglines"
			},
			"debug_entities":	{
				"available_in_release_build":	false,
				"description":	"Toggles Debug entities"
			},
			"debug_info":	{
				"available_in_release_build":	false,
				"description":	"Toggles Debug info"
			},
			"debug_particle":	{
				"available_in_release_build":	false,
				"description":	"Toggles Particles Debug info"
			},
			"debug_textures":	{
				"available_in_release_build":	false,
				"description":	"Writes Texture info to application debug log"
			},
			"reload_textures":	{
				"arguments":	["<optional file name filters...>"],
				"aliases":	["rt", "reload_texture"],
				"description":	"Reloads all textures, with an optional filter to reload only files that include the given text"
			},
			"debug_texture":	{
				"available_in_release_build":	false,
				"description":	"draws textures like bloom"
			},
			"debug_wireframe":	{
				"available_in_release_build":	false,
				"description":	"Toggles forced wireframe on/off"
			},
			"debug_achievements_clear":	{
				"available_in_release_build":	false,
				"description":	"Clear all achievements and user stats"
			},
			"debug_achievements":	{
				"available_in_release_build":	false,
				"description":	"Enables popups for achievements to debug them"
			},
			"debug_custom_achievements":	{
				"description":	"For testing custom achievements, clear completion status (delete files on cloud storage) and reload mod achievement files"
			},
			"moveunit":	{
				"arguments":	["<Unit ID>", "<Province ID>"],
				"description":	"Moves a unit to a province"
			},
			"spawnactor":	{
				"arguments":	["<Actorname>", "<Province ID>", "<Animation> OPTIONAL"],
				"description":	"Spawns an actor with an optional animation"
			},
			"spawn":	{
				"available_in_release_build":	false,
				"arguments":	["<SubUnit Type>", "<Province ID>", "<Amount>"],
				"description":	"Spawns a unit in a province"
			},
			"guibounds":	{
				"aliases":	["gui"],
				"description":	"Toggles GUI bounds debug"
			},
			"cameraclamp":	{
				"description":	"Toggles the camera clamping"
			},
			"provtooltipdebug":	{
				"aliases":	["tdebug"],
				"description":	"Toggles the debug info in province tooltip"
			},
			"reloadweather":	{
				"arguments":	["<randomseed>"],
				"description":	"Reload and regenerate weather"
			},
			"weather":	{
				"description":	"Toggle weather simulation"
			},
			"enable_weather":	{
				"description":	"Enable weather simulation"
			},
			"disable_weather":	{
				"description":	"Disable weather simulation"
			},
			"debug_air_vs_land":	{
				"available_in_release_build":	false,
				"aliases":	["dbg_cas"],
				"description":	"Toggle debug mode for air vs land combat."
			},
			"supply_toggle_flow_penalties":	{
				"available_in_release_build":	false,
				"description":	"Toggle the supply penalties due to bad supply flow"
			},
			"add_temp_supply_node":	{
				"available_in_release_build":	false,
				"description":	"Add temp supply node"
			},
			"mapnames":	{
				"description":	"Toggle map names"
			},
			"gbreload":	{
				"available_in_release_build":	false,
				"description":	"Reloads gradient borders"
			},
			"gbpaint":	{
				"available_in_release_build":	false,
				"arguments":	["layer", "channel"],
				"description":	"Toggles gradient border painting"
			},
			"occupationpaint":	{
				"arguments":	["tag<OPTIONAL>"],
				"aliases":	["op"],
				"description":	"Toggles occupation painting. If specifying a tag, that country will be occupied."
			},
			"setowner":	{
				"arguments":	["country tag", "state id"],
				"description":	"Sets state owner"
			},
			"setcontroller":	{
				"arguments":	["country tag", "province id"],
				"description":	"Sets province controller"
			},
			"gamestate_timer":	{
				"arguments":	["on / off"],
				"aliases":	["gstimer"],
				"description":	"Enable / Disable recording of how long an hour / day / week etc takes to process."
			},
			"run":	{
				"description":	"Runs the specified file with list of commands"
			},
			"oos":	{
				"available_in_release_build":	false,
				"description":	"Out of Synch"
			},
			"debug_crash":	{
				"available_in_release_build":	false,
				"aliases":	["crash"],
				"description":	"Crash!"
			},
			"debug_unit_entity":	{
				"aliases":	["dbg_ue"],
				"description":	"Print out the entity hierarchy."
			},
			"sleep":	{
				"available_in_release_build":	false,
				"arguments":	["time in sec"],
				"aliases":	["wait"],
				"description":	"Sleep"
			},
			"goto_province":	{
				"arguments":	["province id"],
				"description":	"Centers to province"
			},
			"goto_state":	{
				"arguments":	["state id"],
				"description":	"Centers to state"
			},
			"goto_region":	{
				"arguments":	["region id"],
				"description":	"Centers to region"
			},
			"trigger_docs":	{
				"aliases":	["effect_docs", "scripting_docs", "docs"],
				"description":	"Print docs for triggers, effects and variables"
			},
			"cp":	{
				"arguments":	["CP amount"],
				"description":	"Gives command power to player"
			},
			"effect":	{
				"arguments":	["<tag> scripted_effect_name"],
				"aliases":	["e"],
				"description":	"Runs a scripted effect on selected scope",
				"argument_completion_support":	true
			},
			"eval_effect":	{
				"description":	"Runs the inlined effect on a selected scope"
			},
			"eval_trigger":	{
				"description":	"Runs the inlined trigger on a selected scope"
			},
			"trigger":	{
				"arguments":	["<tag> scripted_trigger_name"],
				"aliases":	["t"],
				"description":	"Runs a scripted trigger on selected scope",
				"argument_completion_support":	true
			},
			"print_operation_tokens":	{
				"description":	"Runs a scripted effect on selected scope"
			},
			"xp":	{
				"arguments":	["XP amount"],
				"description":	"Gives Army, navy and air experience to player"
			},
			"threat":	{
				"arguments":	["threat amount"],
				"aliases":	["tension"],
				"description":	"Adds or show threat level of player"
			},
			"add_latest_equipment":	{
				"arguments":	["equipment amount"],
				"aliases":	["ale"],
				"description":	"Gives player amount of latest equipment variants"
			},
			"add_equipment":	{
				"arguments":	["equipment amount", "equipment name"],
				"aliases":	["ae"],
				"description":	"Gives player amount of equipment that has the specified name"
			},
			"pp":	{
				"arguments":	["PP amount"],
				"aliases":	["political_power"],
				"description":	"Gives political power to player"
			},
			"fuel":	{
				"arguments":	["Fuel amount"],
				"aliases":	["army_juice"],
				"description":	"Adds/removes fuel to the player"
			},
			"fuel_gain":	{
				"arguments":	["Daily Fuel amount"],
				"description":	"Adds/removes daily fuel gain for player"
			},
			"empty_fuel_tanks":	{
				"arguments":	["Fuel amount"],
				"description":	"Clear fuel tanks of all armies"
			},
			"resistance":	{
				"arguments":	["amount"],
				"description":	"increases decreases resistance in a state"
			},
			"compliance":	{
				"arguments":	["amount"],
				"description":	"increases decreases compliance in a state"
			},
			"add_stability":	{
				"arguments":	["unity amount"],
				"aliases":	["st"],
				"description":	"Gives/removes stability from player"
			},
			"add_war_support":	{
				"arguments":	["unity amount"],
				"aliases":	["ws"],
				"description":	"Gives/removes war support from player"
			},
			"3dstats":	{
				"description":	"Toggles 3D Stats"
			},
			"hdr":	{
				"available_in_release_build":	false,
				"description":	"Toggles hdr"
			},
			"hdr_debug":	{
				"available_in_release_build":	false,
				"description":	"Toggles hdr debugging"
			},
			"srgb":	{
				"available_in_release_build":	false,
				"description":	"Toggles sRGB"
			},
			"bloom":	{
				"available_in_release_build":	false,
				"description":	"Toggles bloom"
			},
			"PostEffectVolumes.Default":	{
				"available_in_release_build":	false,
				"arguments":	["posteffect_values name"],
				"description":	"Toggles default posteffect values"
			},
			"night":	{
				"available_in_release_build":	false,
				"description":	"Toggles night"
			},
			"civilwar":	{
				"arguments":	["<ideology>", "[target country tag]"],
				"description":	"Spawns a civil war",
				"argument_completion_support":	true
			},
			"createlean":	{
				"available_in_release_build":	false,
				"description":	"Create LEAN textures"
			},
			"helplog":	{
				"description":	"Print out all console commands to game.log file."
			},
			"help":	{
				"arguments":	["command name"],
				"description":	"Print out all console commands or a specific command description."
			},
			"helphelp":	{
				"description":	"Double Rainbow help."
			},
			"hsv":	{
				"available_in_release_build":	false,
				"description":	"Converts RGB to HSV"
			},
			"tag_color":	{
				"description":	"Test setting a country's color"
			},
			"browser":	{
				"available_in_release_build":	false,
				"arguments":	["url"],
				"description":	"Show browser window"
			},
			"aiview":	{
				"description":	"Enable AI debug info"
			},
			"ai_dump":	{
				"available_in_release_build":	false,
				"aliases":	["aidump"],
				"description":	"Dump AI data to log file"
			},
			"ai_front_dump":	{
				"available_in_release_build":	false,
				"aliases":	["aifrontdump"],
				"description":	"Dump AI front data to log file, needs to have a unit selected"
			},
			"metrics":	{
				"available_in_release_build":	false,
				"arguments":	["log_units|log_pools|player|air_mission|global|unit_assignments <days>|decision|log|file<=file_name>|tag=<country_tag>|add_tag=<country_tag>"],
				"description":	"Toggles collecting metrics"
			},
			"ai_research_log":	{
				"available_in_release_build":	false,
				"description":	"Toggles ai research logging"
			},
			"ai_idea_desire_log":	{
				"description":	"Prints AI desire for ideas to log. For Current country only."
			},
			"set_debug_unit_controller":	{
				"available_in_release_build":	false,
				"aliases":	["dbg_unit_controller"],
				"description":	"Sets debug unit controller tag, other countries will not update units"
			},
			"ai_pp_log":	{
				"description":	"Prints AI use of PP to log"
			},
			"airealism":	{
				"description":	"Enable realistic AI"
			},
			"ai_force_template":	{
				"description":	"Force the AI to only spend army XP on template design"
			},
			"ai_force_equipment":	{
				"description":	"Force the AI to only spend army XP on equipment design"
			},
			"pause_on_trigger":	{
				"description":	"Pauses the game when trigger activates",
				"argument_completion_support":	true
			},
			"pause_in_hours":	{
				"description":	"Pauses the game after X hours have passed after command is called"
			},
			"pathfind_stats":	{
				"available_in_release_build":	false,
				"description":	"Print PathFind Cache Stats"
			},
			"debug_army_entity":	{
				"aliases":	["dae"],
				"description":	"Shows debug entity for all armies"
			},
			"pathfind_cache":	{
				"available_in_release_build":	false,
				"arguments":	["on / off"],
				"description":	"Enable / Disable the PathFind Cache"
			},
			"gamespeed":	{
				"arguments":	["speed <0-5>"],
				"description":	"Set the current game speed, pausing the game at speed 0."
			},
			"unit_address":	{
				"description":	"Get the address of the first selected unit, for debugging"
			},
			"ai_front_id":	{
				"description":	"Get the address of selected group's front debug id"
			},
			"test_log":	{
				"description":	"Enable / Disable tests"
			},
			"test_save_mode":	{
				"description":	"Sets if save game for failed test should be for current or previous day"
			},
			"set_cosmetic_tag":	{
				"arguments":	["<country tag>", "<cosmetic tag>"],
				"description":	"Sets 'cosmetic tag' for a specified country"
			},
			"drop_cosmetic_tag":	{
				"arguments":	["<country tag>"],
				"description":	"Drops 'cosmetic tag' for a specified country"
			},
			"add_ideas":	{
				"arguments":	["all|<idea1> <idea2> ...>"],
				"description":	"Adds ideas (ministers or national spirits) with <ID> to the country. Use 'all' to add them all",
				"argument_completion_support":	true
			},
			"remove_ideas":	{
				"arguments":	["all|<idea1> <idea2> ..."],
				"description":	"Removes ideas (ministers or national spirits) with <ID> to the country. Use 'all' to remove them all",
				"argument_completion_support":	true
			},
			"list_ideas":	{
				"description":	"Dump all ideas to console (ministers or national spirits)"
			},
			"add_party_popularity":	{
				"arguments":	["<party>", "<amount>"],
				"description":	"Adds party popularity for specified party to the current country"
			},
			"set_ruling_party":	{
				"arguments":	["<ideology>"],
				"description":	"Sets ruling party for the country"
			},
			"set_global_flag":	{
				"arguments":	["<flag name>"],
				"description":	"Sets the specified global flag to a value. Defaults to 1"
			},
			"set_country_flag":	{
				"arguments":	["<flag name>"],
				"description":	"Sets country flag on specified TAG for a duration. Defaults to current country and value 1 with infinite duration."
			},
			"get_country_flag":	{
				"arguments":	["<flag name>"],
				"description":	"Gets country flag on specified TAG. Defaults to current country"
			},
			"set_var":	{
				"arguments":	["<var name>"],
				"description":	"Set a variable"
			},
			"get_var":	{
				"arguments":	["<var name>"],
				"description":	"Gets a variable"
			},
			"set_flag":	{
				"arguments":	["<flag name>"],
				"description":	"Set a flag"
			},
			"get_flag":	{
				"arguments":	["<flag name>"],
				"description":	"Get a flag"
			},
			"list_vars":	{
				"arguments":	["<scope>"],
				"description":	"Lists all variables in a scope or for the selected country/state/unitleader"
			},
			"gain_xp":	{
				"arguments":	["<trait>"],
				"description":	"Gain xp for selected leader or for a leader trait"
			},
			"list_flags":	{
				"arguments":	["<scope>"],
				"description":	"Lists all flags in a scope or for the selected country/state/unitleader"
			},
			"list_modifiers":	{
				"arguments":	["<scope>"],
				"description":	"Lists all modifiers in a scope or for the selected country/state/unitleader"
			},
			"dbg_enable_scripted_gui":	{
				"available_in_release_build":	false,
				"arguments":	["<scope>"],
				"description":	"Enables scripted GUIs"
			},
			"prep_for_war":	{
				"arguments":	["<TAG>"],
				"description":	"Make AI country with specified TAG to prepare fight for another country "
			},
			"dbg_prov":	{
				"available_in_release_build":	false,
				"arguments":	["<int>"],
				"description":	"Sets type of debugging information on provinces."
			},
			"random_seed":	{
				"description":	"reseeds random with specified seed or reseeds random"
			},
			"timer":	{
				"description":	"Prints out debug timing info"
			},
			"timer_start":	{
				"description":	"Starts debug timing"
			},
			"timer_restart":	{
				"description":	"Restarts (resets and starts) debug timing"
			},
			"timer_reset":	{
				"description":	"Resets debug timing"
			},
			"timer_stop":	{
				"description":	"Stops debug timing"
			},
			"timer_dump":	{
				"description":	"Dumps debug timing info"
			},
			"ct":	{
				"description":	"Puts timer info in clipboard"
			},
			"dump_checksum":	{
				"description":	"Compute and store the checksum in a file"
			},
			"compare_to_last_checksum":	{
				"description":	"Compare current checksum with the most recent dump"
			},
			"dump_synchronized_members":	{
				"description":	"Dump the synchronized game state (the one that has checksum ID 2)"
			},
			"add_legitimacy":	{
				"arguments":	["<TAG>", "<value>"],
				"description":	"Adds legitimacy to specified tag. add_legitimacy TAG amount"
			},
			"dbg_tf_fulfillment":	{
				"description":	"Show the managed fulfillment of a taskforce (exepected number of ships after all ships have been merged in)"
			},
			"damage_units":	{
				"arguments":	["<org>", "<str>", "<num>"],
				"description":	"Damage or heal selected units or units under pointer if there is none selected. Enter 1 argument to apply damage for both types, two for individual both types"
			},
			"add_critical_hit":	{
				"arguments":	["<critical_hit_name>"],
				"description":	"add critical hit to selected ships"
			},
			"clear_critical_hits":	{
				"description":	"clear all critical hits"
			},
			"add_exile_manpower":	{
				"arguments":	["<TAG>", "<value>"],
				"description":	"Adds legitimacy to specified tag. add_legitimacy TAG amount"
			},
			"bypass_invasion_superiority_check":	{
				"aliases":	["bisc"],
				"description":	"Ignore superiority in the strategic areas crossed by a naval invasion order"
			},
			"add_fleet_arrow":	{
				"available_in_release_build":	false,
				"arguments":	["color"],
				"description":	"Add an arrow around a strategic region"
			},
			"toggle_offset_ai_daily_update":	{
				"available_in_release_build":	false,
				"description":	"Whether a country's ai daily update should be spread over a day"
			},
			"get_capital":	{
				"arguments":	["<Country tag>"],
				"description":	"Get the capital of a country"
			},
			"dbg_task_force_role_insignia_assignment":	{
				"aliases":	["tfria"],
				"description":	"print the role that would be deduced for the selected task force"
			},
			"imgui":	{
				"description":	"Controls ImGui UIs. See the sub commands.",
				"argument_completion_support":	true
			},
			"grow_intel_network":	{
				"description":	"Grow the intel network in the specified tag"
			},
			"print_intel_network":	{
				"description":	"Print intel network related information"
			},
			"print_intel_values":	{
				"description":	"Print the intel a country has over another"
			},
			"clear_intel_pools":	{
				"description":	"Reset the specified intel pool"
			},
			"print_radar_intel":	{
				"description":	"Print the intel value breakdown generated by radar"
			},
			"add_intel":	{
				"description":	"Set the values of a static intel pool against a specific country. E.g. `add_intel GER POL army=10`"
			},
			"force_operative_detection":	{
				"aliases":	["snitch"],
				"description":	"Print intel network related information"
			},
			"prevent_operative_detection":	{
				"description":	"Prevent a country from detecting and harming foreign operatives"
			},
			"emulate_ai_operative_assignment":	{
				"description":	"Log ai operative assignment if it were to run this tick. Takes as first argument the tag of the country to test, default to the player's."
			},
			"select":	{
				"available_in_release_build":	false,
				"arguments":	["<object id>", "<object type id> (optional)"],
				"aliases":	["sel"],
				"description":	"select object by id"
			},
			"railwaygun":	{
				"available_in_release_build":	false,
				"aliases":	["rg"],
				"description":	"create railway gun in supply capital"
			},
			"railwaygun_damage":	{
				"available_in_release_build":	false,
				"aliases":	["rg_damage"],
				"description":	"damage railway guns"
			},
			"loc_check_focuses":	{
				"description":	"Check national focuses for missing localization"
			},
			"loc_check_events":	{
				"description":	"Check events for missing localization"
			},
			"loc_check_modifiers":	{
				"description":	"Check modifiers for missing localization"
			},
			"loc_check_decisions":	{
				"description":	"Check decisions for missing localization"
			},
			"loc_check_national_spirits":	{
				"description":	"Check national spirits for missing localization"
			},
			"loc_check_characters":	{
				"description":	"Check characters for missing localization"
			},
			"loc_check":	{
				"description":	"Check for missing localization"
			},
			"set_weather":	{
				"arguments":	["<weather_type>"],
				"description":	"Sets the weather for the selected province (and corresponding region)"
			},
			"set_mud":	{
				"description":	"Sets mud for the selected province"
			},
			"add_rain":	{
				"arguments":	["<rain_amount>"],
				"description":	"Adds rain to the selected province"
			},
			"add_snow":	{
				"arguments":	["<snow_amount>"],
				"description":	"Adds snow to the selected province"
			},
			"dump_equipment_loc":	{
				"arguments":	["desc: Dump equipment descriptions instead of the names", "<country_tag>: Multiple allowed. Only include loc strings for the given countries. Generic loc strings are included if no tags are given, or with argument 'generic'.", "<type>: Multiple allowed. Only include equipment that are all of the given types, e.g. 'armor anti_tank' will only include tank destroyers.", "path=<filepath>: File path to write the dump to. Default is 'logs/equipment_loc.csv'."],
				"description":	"Dumps equipment loc strings to file. All arguments are optional."
			},
			"print_controllers":	{
				"description":	"Prints countries controlled by human players."
			},
			"bop_show":	{
				"description":	"Shows current country's active power balances."
			},
			"bop_set":	{
				"arguments":	["<ID>"],
				"description":	"Activates a power balance for the current country."
			},
			"bop_remove":	{
				"arguments":	["<ID>"],
				"description":	"Deactivates a power balance for the current country."
			},
			"bop_add":	{
				"arguments":	["<ID>", "<value>"],
				"description":	"Changes the value of the specified power balance."
			},
			"bop_addmod":	{
				"arguments":	["<ID>", "<ModID>"],
				"description":	"Adds static modifier to a power balance."
			},
			"bop_rmmod":	{
				"arguments":	["<ID>", "<ModID>"],
				"description":	"Removes static modifier from a power balance."
			},
			"easy_decisions":	{
				"aliases":	["ezd"],
				"description":	"Toggles Easy Decisions Mode which makes all decisions with days_remove take only 1 day to be removed, and all decisions with cost not have any cost or cost trigger."
			},
			"log_advisor_trait_errors":	{
				"description":	"Logs all instances of unit leader advisors not having the corresponding unit leader traits."
			},
			"deleteallairwings":	{
				"aliases":	["delallair"],
				"description":	"Delete all airwings."
			},
			"ListIncorrectCenterOfRegions":	{
				"available_in_release_build":	false,
				"description":	"List regions center point that is located within another region"
			},
			"endraids":	{
				"available_in_release_build":	false,
				"arguments":	[" <Success Level: 1-4 OR { failure, limitedsuccess, success, criticalsuccess}>"],
				"description":	"Instantly end all active raids, optionally with a specific success level"
			},
			"prepareraids":	{
				"available_in_release_build":	false,
				"arguments":	[" <[Optional] the degree to which the raid should be prepared (0.0-1.0)>"],
				"description":	"Instantly complete preparation of all active raids, optionally to a specific progress level"
			},
			"restart":	{
				"available_in_release_build":	false,
				"description":	"Restart the game as the current country"
			},
			"freefocuses":	{
				"aliases":	["ff"],
				"description":	"Enable freely activating any focuses"
			},
			"province_ids":	{
				"aliases":	["pid"],
				"description":	"Show province IDs on the map"
			},
			"InternationalMarket.RequestPurchase":	{
				"arguments":	["<SellerTag>", "<BuyerTag>", "<PaidCivs>", "<EquipmentName>", "<EquipmentAmount>"],
				"description":	"Request Equipment Purchase."
			},
			"InternationalMarket.CancelPurchase":	{
				"arguments":	["<SellerTag>", "<BuyerTag>", "<ContractIndex>"],
				"description":	"Cancel the purchase contract between the seller and the buyer"
			},
			"InternationalMarket.ReserveToMarketStockpile":	{
				"arguments":	["<EquipmentName>", "<EquipmentAmount>"],
				"description":	"Reserve equipment from main stockpile to market stockpile"
			},
			"InternationalMarket.ReleaseFromMarketStockpile":	{
				"arguments":	["<EquipmentName>", "<EquipmentAmount>"],
				"description":	"Release equipment to main stockpile from market stockpile"
			},
			"add_cic_bank":	{
				"arguments":	["<value>"],
				"aliases":	["stonks", "cic", "bank"],
				"description":	"Add CIC to the CIC bank (negative value subtracts)"
			},
			"InternationalMarket.SetPriceLevel":	{
				"arguments":	["<EquipmentName>", "<Level>"],
				"description":	"Sets the price level for the given equipment in the Market Stockpile"
			},
			"InternationalMarket.AddSubsidyForTags":	{
				"arguments":	["<CIC>", "<Archetype>", "<Tag>"],
				"description":	"Add a Equipment Subsidy to the player's international market."
			},
			"InternationalMarket.AddSubsidyForTrigger":	{
				"arguments":	["<CIC>", "<Archetype>", "<ScriptedTrigger> "],
				"description":	"Add a Equipment Subsidy to the player's international market."
			},
			"InternationalMarket.Dev.SetMarketRequestAutomation":	{
				"arguments":	["<AcceptMarketAccess>", "<SendMarketAccess>", "<AcceptPurchase>"],
				"description":	"Set the market requests automation state"
			},
			"AddFunds":	{
				"arguments":	["<Industrial Organisation token> (optional)", "<Funds amount> (optional)"],
				"aliases":	["mio.AddFunds", "IndustrialOrganisation.AddFunds"],
				"description":	"\"Add funds to one or all Military Industrial Organisations\nex:\nAddFunds org_token 2000\nAddFunds org_token // default added funds is NDefines::NIndustrialOrganisation::FUNDS_FOR_SIZE_UP\nAddFunds 2000 // Funds added to all the player's MIOs\nAddFunds // default funds amount added to all the player's MIOs\"",
				"argument_completion_support":	true
			},
			"AddTaskCapacity":	{
				"arguments":	["<Industrial Organisation token> (optional)", "<capacity amount> (optional)"],
				"aliases":	["mio.AddTaskCapacity", "IndustrialOrganisation.AddTaskCapacity"],
				"description":	"\"Add task capacity to one or all Military Industrial Organisations.\nValue can be negative but final task capacity will be capped at 0.\nex:\nAddTaskCapacity org_token 2\nAddTaskCapacity org_token // adds 1 capacity\nAddTaskCapacity 2 // adds input capacity to all the player's MIOs\nAddTaskCapacity // adds 1 capacity to all the player's MIOs\"",
				"argument_completion_support":	true
			},
			"AddSize":	{
				"arguments":	["<Industrial Organisation token> (optional)", "<capacity amount> (optional)"],
				"aliases":	["mio.AddSize", "IndustrialOrganisation.AddSize"],
				"description":	"\"Add sizes to one or all Military Industrial Organisations.\nex:\nAddSize org_token 2\nAddSize org_token // adds 1 size\nAddSize 2 // adds input size to all the player's MIOs\nAddSize // adds 1 size to all the player's MIOs\"",
				"argument_completion_support":	true
			},
			"sp_fast":	{
				"description":	"\"All phases in Special Projects take now 1 day to complete.\nFor prototype phase, it's the iterations that will take 1 day. And it will require as many iterations as usual.\nex:\nsp_fast\""
			},
			"sp_instant":	{
				"description":	"\"All started Special Projects finish on the daily tick. It skips the iterations of the Prototyping phase and their reward.\nex:\nsp_instant\""
			},
			"sp_available":	{
				"description":	"\"Trigger available returns true for all Special Projects.\nex:\nsp_available\""
			},
			"sp_unlock_all":	{
				"description":	"\"All Special Projects are always visible and available. Whether or not the triggers returns true, and whether the parents are completed.\nex:\nsp_unlock_all\""
			},
			"sp_add_scientist":	{
				"arguments":	["<Level> (optional)", "<Specialization> (optional)"],
				"description":	"\"Add a scientist. Is specified a specialization and level that will be applied to the scientist. If no specialization is specified the level will be applied to all.\nex:\nsp_add_scientist 3 nuclear\nsp_add_scientist 2\nsp_add_scientist\""
			},
			"sp_add_mastermind":	{
				"description":	"\"Add a scientist with max skill in all specializations\""
			},
			"sp_add_selected_scientist_level":	{
				"arguments":	["<Level>", "<Specialization> (optional)"],
				"description":	"\"Add level and if specified, specifically to a specialization for a scientist. If no specialization is specified, the level will be added for each specialization. Requires the facility view with an attached scientist to be open.\nex:\nsp_add_scientist_level 3 nuclear\nsp_add_scientist_level 2\""
			},
			"sp_set_selected_scientist_level":	{
				"arguments":	["<Level>", "<Specialization> (optional)"],
				"description":	"\"Set level and if specified, specifically to a specialization for a scientist. If no specialization is specified, the level will be added for each specialization. Requires the facility view with an attached scientist to be open.\nex:\nsp_set_scientist_level 3 nuclear\nsp_set_scientist_level 2\""
			},
			"sp_add_selected_scientist_trait":	{
				"arguments":	["<Trait>"],
				"description":	"\"Add a trait to the scientist. Requires the facility view with an attached scientist to be open.\nex:\nsp_add_scientist_trait my_trait_token\""
			},
			"sp_remove_selected_scientist_trait":	{
				"description":	"\"Remove a trait from the scientist. Requires the facility view with an attached scientist to be open.\nex:\nsp_remove_selected_scientist_trait my_trait_token\""
			},
			"sp_research_all":	{
				"aliases":	["sp_ra"],
				"description":	"\"Research all special projects. If no scientist exist it will create one, otherwise it will pick an arbitrary one. Imagine there is a secret hidden facility\nin a controlled province where the projects are researched.\""
			},
			"sp_breakthrough":	{
				"arguments":	["<amount> optional <specialization>"],
				"aliases":	["sp_br"],
				"description":	"\"Create breakthrough points.\""
			},
			"toggle_hidden_techs":	{
				"arguments":	[],
				"aliases":	["tht"],
				"description":	"\"Toggle show/hide all hidden techs.\""
			},
			"sp_prototype_reward":	{
				"arguments":	[],
				"aliases":	["spr"],
				"description":	"\"Trigger a specified prototype reward during a project.\"",
				"argument_completion_support":	true
			},
			"social_debuginfo":	{
				"available_in_release_build":	false,
				"description":	"Print debug info about the social layer"
			},
			"social_joinroom":	{
				"available_in_release_build":	false,
				"arguments":	["Context Index", "Room Name", "Nick Name"],
				"description":	"Join a chat room using the given social context"
			},
			"social_sendmessage":	{
				"available_in_release_build":	false,
				"arguments":	["Context Index", "Room Name", "Message"],
				"description":	"Send a message to a chat room."
			},
			"social_addfriend":	{
				"available_in_release_build":	false,
				"arguments":	["Context Index", "Account ID"],
				"description":	"Add a friend to friends list"
			},
			"collaboration":	{
				"description":	"Adds collaborations against selected country. Right click to select a country and use \"collaboration 0.3\""
			},
			"add_fake_armies":	{
				"description":	"Creates fake intel armies for the player"
			},
			"retire_country_leader":	{
		},
			"clear_tech":	{
		},
			"add_tech":	{
		},
			"spawn_3D_models":	{
		},
			"add_subsidies":	{
		},
			"add_subsidies_second":	{
		}
		},
		"tweakables":	{
			"Operation.Instant":	{
				"type":	"bool"
			},
			"IntelNetwork.Instant":	{
				"type":	"bool"
			},
			"Debug.OldCombat":	{
				"type":	"bool"
			},
			"Focus.NoChecks":	{
				"type":	"bool"
			},
			"Focus.AutoComplete":	{
				"type":	"bool"
			},
			"fa":	{
				"type":	"bool"
			},
			"Focus.IgnorePrerequisites":	{
				"type":	"bool"
			},
			"BattleSound.PlayBackground":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"BattleSound.Debug":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Draw.Objects":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Draw.Transparent":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Draw.Shadows":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Draw.ShadowBlur":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"PostEffectVolumes.Draw":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"ShowBorderTypes":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Draw.Postfx":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Draw.Tree":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Draw.Terrain":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Draw.Rivers":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Draw.Water":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Draw.Borders":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Draw.Refractions":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Tree.MipLevels":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Terrain.MipLevels":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"BorderLOD.Threaded":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"PostEffectVolumes.Enabled":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"CounterIntelligence.TestShieldColors":	{
				"type":	"bool"
			},
			"supply_debug.show_debug_lines_rail":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"supply_debug.show_debug_lines_train":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"supply_debug.show_debug_lines_supply":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"supply_debug.show_debug_rivers":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"ShowTechBonus":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Debug.DeleteUnitEachTick":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Decision.NoChecks":	{
				"type":	"bool"
			},
			"Decision.FastRemove":	{
				"type":	"bool"
			},
			"resistance_system":	{
				"type":	"bool"
			},
			"Agency.AutoComplete":	{
				"type":	"bool"
			},
			"Agency.KeepExcessOperatives":	{
				"type":	"bool"
			},
			"Agency.InstantSlotUnlock":	{
				"type":	"bool"
			},
			"ApplicationUtils.Update":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Audio.DebugMin":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Audio.DebugMax":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Audio.Debug.LevelsSampleRate":	{
				"available_in_release_build":	false,
				"type":	"integer"
			},
			"Audio.Debug.Levels":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"guibounds":	{
				"type":	"bool"
			},
			"Update.Particles":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Update.Animations":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Normals":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"BoundingVolumes":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Collisions":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Mesh.Names":	{
				"type":	"bool"
			},
			"Mesh.TextureNames":	{
				"type":	"bool"
			},
			"GUI.Wireframe":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Mesh.Wireframe":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Mesh.MipLevels":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Particle.Wireframe":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Particle.UseRingbuffer":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Particle.MipLevels":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Audio.Debug":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Audio.Debug.ExtendedRange":	{
				"available_in_release_build":	false,
				"type":	"bool"
			},
			"Audio.Compressor":	{
				"available_in_release_build":	false,
				"type":	"bool"
			}
		}
	}
}